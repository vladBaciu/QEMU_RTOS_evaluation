
build/ch.elf:     file format elf32-littlearm


Disassembly of section .vectors:

08000000 <_vectors>:
 8000000:	20000400 	.word	0x20000400
 8000004:	080002b9 	.word	0x080002b9
 8000008:	080002bb 	.word	0x080002bb
 800000c:	080002bb 	.word	0x080002bb
 8000010:	080002bb 	.word	0x080002bb
 8000014:	080002bb 	.word	0x080002bb
 8000018:	080002bb 	.word	0x080002bb
 800001c:	080002bb 	.word	0x080002bb
 8000020:	080002bb 	.word	0x080002bb
 8000024:	080002bb 	.word	0x080002bb
 8000028:	080002bb 	.word	0x080002bb
 800002c:	080037f1 	.word	0x080037f1
 8000030:	080002bb 	.word	0x080002bb
 8000034:	080002bb 	.word	0x080002bb
 8000038:	080002bb 	.word	0x080002bb
 800003c:	080002bb 	.word	0x080002bb
 8000040:	080002bb 	.word	0x080002bb
 8000044:	080002bb 	.word	0x080002bb
 8000048:	080002bb 	.word	0x080002bb
 800004c:	080002bb 	.word	0x080002bb
 8000050:	080002bb 	.word	0x080002bb
 8000054:	080002bb 	.word	0x080002bb
 8000058:	080002bb 	.word	0x080002bb
 800005c:	080002bb 	.word	0x080002bb
 8000060:	080002bb 	.word	0x080002bb
 8000064:	080002bb 	.word	0x080002bb
 8000068:	080002bb 	.word	0x080002bb
 800006c:	080002bb 	.word	0x080002bb
 8000070:	080002bb 	.word	0x080002bb
 8000074:	080002bb 	.word	0x080002bb
 8000078:	080002bb 	.word	0x080002bb
 800007c:	080002bb 	.word	0x080002bb
 8000080:	080002bb 	.word	0x080002bb
 8000084:	080002bb 	.word	0x080002bb
 8000088:	080002bb 	.word	0x080002bb
 800008c:	080002bb 	.word	0x080002bb
 8000090:	080002bb 	.word	0x080002bb
 8000094:	080002bb 	.word	0x080002bb
 8000098:	080002bb 	.word	0x080002bb
 800009c:	080002bb 	.word	0x080002bb
 80000a0:	080002bb 	.word	0x080002bb
 80000a4:	080002bb 	.word	0x080002bb
 80000a8:	080002bb 	.word	0x080002bb
 80000ac:	080002bb 	.word	0x080002bb
 80000b0:	08008cd1 	.word	0x08008cd1
 80000b4:	080002bb 	.word	0x080002bb
 80000b8:	080002bb 	.word	0x080002bb
 80000bc:	080002bb 	.word	0x080002bb
 80000c0:	080002bb 	.word	0x080002bb
 80000c4:	080002bb 	.word	0x080002bb
 80000c8:	080002bb 	.word	0x080002bb
 80000cc:	080002bb 	.word	0x080002bb
 80000d0:	080002bb 	.word	0x080002bb
 80000d4:	080002bb 	.word	0x080002bb
 80000d8:	08008b31 	.word	0x08008b31
 80000dc:	080002bb 	.word	0x080002bb
 80000e0:	080002bb 	.word	0x080002bb
 80000e4:	080002bb 	.word	0x080002bb
 80000e8:	080002bb 	.word	0x080002bb
 80000ec:	080002bb 	.word	0x080002bb
 80000f0:	080002bb 	.word	0x080002bb
 80000f4:	080002bb 	.word	0x080002bb
 80000f8:	080002bb 	.word	0x080002bb
 80000fc:	080002bb 	.word	0x080002bb
 8000100:	080002bb 	.word	0x080002bb
 8000104:	080002bb 	.word	0x080002bb
 8000108:	080002bb 	.word	0x080002bb
 800010c:	080002bb 	.word	0x080002bb
 8000110:	080002bb 	.word	0x080002bb
 8000114:	080002bb 	.word	0x080002bb
 8000118:	080002bb 	.word	0x080002bb
 800011c:	080002bb 	.word	0x080002bb
 8000120:	080002bb 	.word	0x080002bb
 8000124:	080002bb 	.word	0x080002bb
 8000128:	080002bb 	.word	0x080002bb
 800012c:	080002bb 	.word	0x080002bb
 8000130:	080002bb 	.word	0x080002bb
 8000134:	080002bb 	.word	0x080002bb
 8000138:	080002bb 	.word	0x080002bb
 800013c:	080002bb 	.word	0x080002bb
 8000140:	080002bb 	.word	0x080002bb
 8000144:	080002bb 	.word	0x080002bb
 8000148:	080002bb 	.word	0x080002bb
 800014c:	080002bb 	.word	0x080002bb
 8000150:	080002bb 	.word	0x080002bb
 8000154:	080002bb 	.word	0x080002bb
 8000158:	080002bb 	.word	0x080002bb
 800015c:	080002bb 	.word	0x080002bb
 8000160:	080002bb 	.word	0x080002bb
 8000164:	080002bb 	.word	0x080002bb
 8000168:	080002bb 	.word	0x080002bb
 800016c:	080002bb 	.word	0x080002bb
 8000170:	080002bb 	.word	0x080002bb
 8000174:	080002bb 	.word	0x080002bb
 8000178:	080002bb 	.word	0x080002bb
 800017c:	080002bb 	.word	0x080002bb
 8000180:	080002bb 	.word	0x080002bb
 8000184:	080002bb 	.word	0x080002bb
 8000188:	080002bb 	.word	0x080002bb
 800018c:	080002bb 	.word	0x080002bb
 8000190:	080002bb 	.word	0x080002bb
 8000194:	080002bb 	.word	0x080002bb
 8000198:	080002bb 	.word	0x080002bb
 800019c:	080002bb 	.word	0x080002bb
 80001a0:	080002bb 	.word	0x080002bb
 80001a4:	080002bb 	.word	0x080002bb
 80001a8:	080002bb 	.word	0x080002bb
 80001ac:	080002bb 	.word	0x080002bb
 80001b0:	080002bb 	.word	0x080002bb
 80001b4:	080002bb 	.word	0x080002bb
 80001b8:	080002bb 	.word	0x080002bb
 80001bc:	080002bb 	.word	0x080002bb
 80001c0:	080002bb 	.word	0x080002bb
 80001c4:	080002bb 	.word	0x080002bb
 80001c8:	080002bb 	.word	0x080002bb
 80001cc:	080002bb 	.word	0x080002bb
 80001d0:	080002bb 	.word	0x080002bb
 80001d4:	080002bb 	.word	0x080002bb
 80001d8:	080002bb 	.word	0x080002bb
 80001dc:	080002bb 	.word	0x080002bb

Disassembly of section .text:

080001e0 <_crt0_entry>:
                .align  2
                .thumb_func
                .global _crt0_entry
_crt0_entry:
                /* Interrupts are globally masked initially.*/
                cpsid   i
 80001e0:	b672      	cpsid	i

#if CRT0_FORCE_MSP_INIT == TRUE
                /* MSP stack pointers initialization.*/
                ldr     r0, =__main_stack_end__
 80001e2:	4827      	ldr	r0, [pc, #156]	; (8000280 <endfiniloop+0x4>)
                msr     MSP, r0
 80001e4:	f380 8808 	msr	MSP, r0
#endif

                /* PSP stack pointers initialization.*/
                ldr     r0, =__process_stack_end__
 80001e8:	4826      	ldr	r0, [pc, #152]	; (8000284 <endfiniloop+0x8>)
                msr     PSP, r0
 80001ea:	f380 8809 	msr	PSP, r0

#if CRT0_VTOR_INIT == TRUE
                ldr     r0, =_vectors
 80001ee:	4826      	ldr	r0, [pc, #152]	; (8000288 <endfiniloop+0xc>)
                movw    r1, #SCB_VTOR & 0xFFFF
 80001f0:	f64e 5108 	movw	r1, #60680	; 0xed08
                movt    r1, #SCB_VTOR >> 16
 80001f4:	f2ce 0100 	movt	r1, #57344	; 0xe000
                str     r0, [r1]
 80001f8:	6008      	str	r0, [r1, #0]

                /* Enforcing FPCA bit in the CONTROL register.*/
                movs    r0, #CRT0_CONTROL_INIT | CONTROL_FPCA

#else
                movs    r0, #CRT0_CONTROL_INIT
 80001fa:	2002      	movs	r0, #2
#endif

                /* CONTROL register initialization as configured.*/
                msr     CONTROL, r0
 80001fc:	f380 8814 	msr	CONTROL, r0
                isb
 8000200:	f3bf 8f6f 	isb	sy

#if CRT0_INIT_CORE == TRUE
                /* Core initialization.*/
                bl      __core_init
 8000204:	f008 fe0c 	bl	8008e20 <__core_init>
#endif

                /* Early initialization.*/
                bl      __early_init
 8000208:	f008 fb5a 	bl	80088c0 <__early_init>

#if CRT0_INIT_STACKS == TRUE
                ldr     r0, =CRT0_STACKS_FILL_PATTERN
 800020c:	f04f 3055 	mov.w	r0, #1431655765	; 0x55555555
                /* Main Stack initialization. Note, it assumes that the
                   stack size is a multiple of 4 so the linker file must
                   ensure this.*/
                ldr     r1, =__main_stack_base__
 8000210:	491e      	ldr	r1, [pc, #120]	; (800028c <endfiniloop+0x10>)
                ldr     r2, =__main_stack_end__
 8000212:	4a1b      	ldr	r2, [pc, #108]	; (8000280 <endfiniloop+0x4>)

08000214 <msloop>:
msloop:
                cmp     r1, r2
 8000214:	4291      	cmp	r1, r2
                itt     lo
 8000216:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 8000218:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     msloop
 800021c:	e7fa      	bcc.n	8000214 <msloop>

                /* Process Stack initialization. Note, it assumes that the
                   stack size is a multiple of 4 so the linker file must
                   ensure this.*/
                ldr     r1, =__process_stack_base__
 800021e:	491c      	ldr	r1, [pc, #112]	; (8000290 <endfiniloop+0x14>)
                ldr     r2, =__process_stack_end__
 8000220:	4a18      	ldr	r2, [pc, #96]	; (8000284 <endfiniloop+0x8>)

08000222 <psloop>:
psloop:
                cmp     r1, r2
 8000222:	4291      	cmp	r1, r2
                itt     lo
 8000224:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 8000226:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     psloop
 800022a:	e7fa      	bcc.n	8000222 <psloop>
#endif

#if CRT0_INIT_DATA == TRUE
                /* Data initialization. Note, it assumes that the DATA size
                  is a multiple of 4 so the linker file must ensure this.*/
                ldr     r1, =__textdata_base__
 800022c:	4919      	ldr	r1, [pc, #100]	; (8000294 <endfiniloop+0x18>)
                ldr     r2, =__data_base__
 800022e:	4a1a      	ldr	r2, [pc, #104]	; (8000298 <endfiniloop+0x1c>)
                ldr     r3, =__data_end__
 8000230:	4b1a      	ldr	r3, [pc, #104]	; (800029c <endfiniloop+0x20>)

08000232 <dloop>:
dloop:
                cmp     r2, r3
 8000232:	429a      	cmp	r2, r3
                ittt    lo
 8000234:	bf3e      	ittt	cc
                ldrlo   r0, [r1], #4
 8000236:	f851 0b04 	ldrcc.w	r0, [r1], #4
                strlo   r0, [r2], #4
 800023a:	f842 0b04 	strcc.w	r0, [r2], #4
                blo     dloop
 800023e:	e7f8      	bcc.n	8000232 <dloop>
#endif

#if CRT0_INIT_BSS == TRUE
                /* BSS initialization. Note, it assumes that the DATA size
                  is a multiple of 4 so the linker file must ensure this.*/
                movs    r0, #0
 8000240:	2000      	movs	r0, #0
                ldr     r1, =__bss_base__
 8000242:	4917      	ldr	r1, [pc, #92]	; (80002a0 <endfiniloop+0x24>)
                ldr     r2, =__bss_end__
 8000244:	4a17      	ldr	r2, [pc, #92]	; (80002a4 <endfiniloop+0x28>)

08000246 <bloop>:
bloop:
                cmp     r1, r2
 8000246:	4291      	cmp	r1, r2
                itt     lo
 8000248:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 800024a:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     bloop
 800024e:	e7fa      	bcc.n	8000246 <bloop>
#endif

#if CRT0_INIT_RAM_AREAS == TRUE
                /* RAM areas initialization.*/
                bl      __init_ram_areas
 8000250:	f008 fd9e 	bl	8008d90 <__init_ram_areas>
#endif

                /* Late initialization..*/
                bl      __late_init
 8000254:	f008 fddc 	bl	8008e10 <__late_init>

#if CRT0_CALL_CONSTRUCTORS == TRUE
                /* Constructors invocation.*/
                ldr     r4, =__init_array_base__
 8000258:	4c13      	ldr	r4, [pc, #76]	; (80002a8 <endfiniloop+0x2c>)
                ldr     r5, =__init_array_end__
 800025a:	4d14      	ldr	r5, [pc, #80]	; (80002ac <endfiniloop+0x30>)

0800025c <initloop>:
initloop:
                cmp     r4, r5
 800025c:	42ac      	cmp	r4, r5
                bge     endinitloop
 800025e:	da03      	bge.n	8000268 <endinitloop>
                ldr     r1, [r4], #4
 8000260:	f854 1b04 	ldr.w	r1, [r4], #4
                blx     r1
 8000264:	4788      	blx	r1
                b       initloop
 8000266:	e7f9      	b.n	800025c <initloop>

08000268 <endinitloop>:
endinitloop:
#endif

                /* Main program invocation, r0 contains the returned value.*/
                bl      main
 8000268:	f003 f8ca 	bl	8003400 <main>

#if CRT0_CALL_DESTRUCTORS == TRUE
                /* Destructors invocation.*/
                ldr     r4, =__fini_array_base__
 800026c:	4c10      	ldr	r4, [pc, #64]	; (80002b0 <endfiniloop+0x34>)
                ldr     r5, =__fini_array_end__
 800026e:	4d11      	ldr	r5, [pc, #68]	; (80002b4 <endfiniloop+0x38>)

08000270 <finiloop>:
finiloop:
                cmp     r4, r5
 8000270:	42ac      	cmp	r4, r5
                bge     endfiniloop
 8000272:	da03      	bge.n	800027c <endfiniloop>
                ldr     r1, [r4], #4
 8000274:	f854 1b04 	ldr.w	r1, [r4], #4
                blx     r1
 8000278:	4788      	blx	r1
                b       finiloop
 800027a:	e7f9      	b.n	8000270 <finiloop>

0800027c <endfiniloop>:
endfiniloop:
#endif

                /* Branching to the defined exit handler.*/
                b       __default_exit
 800027c:	f008 bdc0 	b.w	8008e00 <__default_exit>
                ldr     r0, =__main_stack_end__
 8000280:	20000400 	.word	0x20000400
                ldr     r0, =__process_stack_end__
 8000284:	20000800 	.word	0x20000800
                ldr     r0, =_vectors
 8000288:	08000000 	.word	0x08000000
                ldr     r1, =__main_stack_base__
 800028c:	20000000 	.word	0x20000000
                ldr     r1, =__process_stack_base__
 8000290:	20000400 	.word	0x20000400
                ldr     r1, =__textdata_base__
 8000294:	0800b688 	.word	0x0800b688
                ldr     r2, =__data_base__
 8000298:	20000800 	.word	0x20000800
                ldr     r3, =__data_end__
 800029c:	200008dc 	.word	0x200008dc
                ldr     r1, =__bss_base__
 80002a0:	200008e0 	.word	0x200008e0
                ldr     r2, =__bss_end__
 80002a4:	20001ce0 	.word	0x20001ce0
                ldr     r4, =__init_array_base__
 80002a8:	080001e0 	.word	0x080001e0
                ldr     r5, =__init_array_end__
 80002ac:	080001e0 	.word	0x080001e0
                ldr     r4, =__fini_array_base__
 80002b0:	080001e0 	.word	0x080001e0
                ldr     r5, =__fini_array_end__
 80002b4:	080001e0 	.word	0x080001e0

080002b8 <Reset_Handler>:

        .align      2
        .thumb_func
        .weak       Reset_Handler
Reset_Handler:
         b          _crt0_entry
 80002b8:	e792      	b.n	80001e0 <_crt0_entry>

080002ba <BusFault_Handler>:
        .thumb_func
Vector3F8:
        .thumb_func
Vector3FC:
#endif
        bl          _unhandled_exception
 80002ba:	f000 f800 	bl	80002be <_unhandled_exception>

080002be <_unhandled_exception>:

        .thumb_func
        .weak       _unhandled_exception
_unhandled_exception:
.stay:
        b           .stay
 80002be:	e7fe      	b.n	80002be <_unhandled_exception>

080002c0 <_port_switch>:
 * Performs a context switch between two threads.
 *--------------------------------------------------------------------------*/
                .thumb_func
                .globl  _port_switch
_port_switch:
                push    {r4, r5, r6, r7, r8, r9, r10, r11, lr}
 80002c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if PORT_SWITCHED_REGIONS_NUMBER == 4
                push    {r4, r5, r6, r7, r8, r9, r10, r11}
#endif
#endif

                str     sp, [r1, #CONTEXT_OFFSET]
 80002c4:	f8c1 d00c 	str.w	sp, [r1, #12]
#if (CORTEX_SIMPLIFIED_PRIORITY == FALSE) &&                                \
    ((CORTEX_MODEL == 3) || (CORTEX_MODEL == 4))
                /* Workaround for ARM errata 752419, only applied if
                   condition exists for it to be triggered.*/
                ldr     r3, [r0, #CONTEXT_OFFSET]
 80002c8:	68c3      	ldr	r3, [r0, #12]
                mov     sp, r3
 80002ca:	469d      	mov	sp, r3

#if CORTEX_USE_FPU
                /* Restoring FPU context.*/
                vpop    {s16-s31}
#endif
                pop     {r4, r5, r6, r7, r8, r9, r10, r11, pc}
 80002cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080002d0 <_port_thread_start>:
                bl      _stats_stop_measure_crit_thd
#endif
#if CORTEX_SIMPLIFIED_PRIORITY
                cpsie   i
#else
                movs    r3, #0              /* CORTEX_BASEPRI_DISABLED */
 80002d0:	2300      	movs	r3, #0
                msr     BASEPRI, r3
 80002d2:	f383 8811 	msr	BASEPRI, r3
#endif
                mov     r0, r5
 80002d6:	4628      	mov	r0, r5
                blx     r4
 80002d8:	47a0      	blx	r4
                movs    r0, #0              /* MSG_OK */
 80002da:	2000      	movs	r0, #0
                bl      chThdExit
 80002dc:	f003 fa98 	bl	8003810 <chThdExit>

080002e0 <_zombies>:
_zombies:       b       _zombies
 80002e0:	e7fe      	b.n	80002e0 <_zombies>

080002e2 <_port_switch_from_isr>:
                bl      _stats_start_measure_crit_thd
#endif
#if CH_DBG_SYSTEM_STATE_CHECK
                bl      _dbg_check_lock
#endif
                bl      chSchDoReschedule
 80002e2:	f003 faed 	bl	80038c0 <chSchDoReschedule>

080002e6 <_port_exit_from_isr>:
                movt    r3, #:upper16:SCB_ICSR
                mov     r2, ICSR_PENDSVSET
                str     r2, [r3, #0]
                cpsie   i
#else /* !CORTEX_SIMPLIFIED_PRIORITY */
                svc     #0
 80002e6:	df00      	svc	0
#endif /* !CORTEX_SIMPLIFIED_PRIORITY */
.L1:            b       .L1
 80002e8:	e7fe      	b.n	80002e8 <_port_exit_from_isr+0x2>
	...

080002ec <memcpy>:
 80002ec:	4684      	mov	ip, r0
 80002ee:	ea41 0300 	orr.w	r3, r1, r0
 80002f2:	f013 0303 	ands.w	r3, r3, #3
 80002f6:	d16d      	bne.n	80003d4 <memcpy+0xe8>
 80002f8:	3a40      	subs	r2, #64	; 0x40
 80002fa:	d341      	bcc.n	8000380 <memcpy+0x94>
 80002fc:	f851 3b04 	ldr.w	r3, [r1], #4
 8000300:	f840 3b04 	str.w	r3, [r0], #4
 8000304:	f851 3b04 	ldr.w	r3, [r1], #4
 8000308:	f840 3b04 	str.w	r3, [r0], #4
 800030c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000310:	f840 3b04 	str.w	r3, [r0], #4
 8000314:	f851 3b04 	ldr.w	r3, [r1], #4
 8000318:	f840 3b04 	str.w	r3, [r0], #4
 800031c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000320:	f840 3b04 	str.w	r3, [r0], #4
 8000324:	f851 3b04 	ldr.w	r3, [r1], #4
 8000328:	f840 3b04 	str.w	r3, [r0], #4
 800032c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000330:	f840 3b04 	str.w	r3, [r0], #4
 8000334:	f851 3b04 	ldr.w	r3, [r1], #4
 8000338:	f840 3b04 	str.w	r3, [r0], #4
 800033c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000340:	f840 3b04 	str.w	r3, [r0], #4
 8000344:	f851 3b04 	ldr.w	r3, [r1], #4
 8000348:	f840 3b04 	str.w	r3, [r0], #4
 800034c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000350:	f840 3b04 	str.w	r3, [r0], #4
 8000354:	f851 3b04 	ldr.w	r3, [r1], #4
 8000358:	f840 3b04 	str.w	r3, [r0], #4
 800035c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000360:	f840 3b04 	str.w	r3, [r0], #4
 8000364:	f851 3b04 	ldr.w	r3, [r1], #4
 8000368:	f840 3b04 	str.w	r3, [r0], #4
 800036c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000370:	f840 3b04 	str.w	r3, [r0], #4
 8000374:	f851 3b04 	ldr.w	r3, [r1], #4
 8000378:	f840 3b04 	str.w	r3, [r0], #4
 800037c:	3a40      	subs	r2, #64	; 0x40
 800037e:	d2bd      	bcs.n	80002fc <memcpy+0x10>
 8000380:	3230      	adds	r2, #48	; 0x30
 8000382:	d311      	bcc.n	80003a8 <memcpy+0xbc>
 8000384:	f851 3b04 	ldr.w	r3, [r1], #4
 8000388:	f840 3b04 	str.w	r3, [r0], #4
 800038c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000390:	f840 3b04 	str.w	r3, [r0], #4
 8000394:	f851 3b04 	ldr.w	r3, [r1], #4
 8000398:	f840 3b04 	str.w	r3, [r0], #4
 800039c:	f851 3b04 	ldr.w	r3, [r1], #4
 80003a0:	f840 3b04 	str.w	r3, [r0], #4
 80003a4:	3a10      	subs	r2, #16
 80003a6:	d2ed      	bcs.n	8000384 <memcpy+0x98>
 80003a8:	320c      	adds	r2, #12
 80003aa:	d305      	bcc.n	80003b8 <memcpy+0xcc>
 80003ac:	f851 3b04 	ldr.w	r3, [r1], #4
 80003b0:	f840 3b04 	str.w	r3, [r0], #4
 80003b4:	3a04      	subs	r2, #4
 80003b6:	d2f9      	bcs.n	80003ac <memcpy+0xc0>
 80003b8:	3204      	adds	r2, #4
 80003ba:	d008      	beq.n	80003ce <memcpy+0xe2>
 80003bc:	07d2      	lsls	r2, r2, #31
 80003be:	bf1c      	itt	ne
 80003c0:	f811 3b01 	ldrbne.w	r3, [r1], #1
 80003c4:	f800 3b01 	strbne.w	r3, [r0], #1
 80003c8:	d301      	bcc.n	80003ce <memcpy+0xe2>
 80003ca:	880b      	ldrh	r3, [r1, #0]
 80003cc:	8003      	strh	r3, [r0, #0]
 80003ce:	4660      	mov	r0, ip
 80003d0:	4770      	bx	lr
 80003d2:	bf00      	nop
 80003d4:	2a08      	cmp	r2, #8
 80003d6:	d313      	bcc.n	8000400 <memcpy+0x114>
 80003d8:	078b      	lsls	r3, r1, #30
 80003da:	d08d      	beq.n	80002f8 <memcpy+0xc>
 80003dc:	f010 0303 	ands.w	r3, r0, #3
 80003e0:	d08a      	beq.n	80002f8 <memcpy+0xc>
 80003e2:	f1c3 0304 	rsb	r3, r3, #4
 80003e6:	1ad2      	subs	r2, r2, r3
 80003e8:	07db      	lsls	r3, r3, #31
 80003ea:	bf1c      	itt	ne
 80003ec:	f811 3b01 	ldrbne.w	r3, [r1], #1
 80003f0:	f800 3b01 	strbne.w	r3, [r0], #1
 80003f4:	d380      	bcc.n	80002f8 <memcpy+0xc>
 80003f6:	f831 3b02 	ldrh.w	r3, [r1], #2
 80003fa:	f820 3b02 	strh.w	r3, [r0], #2
 80003fe:	e77b      	b.n	80002f8 <memcpy+0xc>
 8000400:	3a04      	subs	r2, #4
 8000402:	d3d9      	bcc.n	80003b8 <memcpy+0xcc>
 8000404:	3a01      	subs	r2, #1
 8000406:	f811 3b01 	ldrb.w	r3, [r1], #1
 800040a:	f800 3b01 	strb.w	r3, [r0], #1
 800040e:	d2f9      	bcs.n	8000404 <memcpy+0x118>
 8000410:	780b      	ldrb	r3, [r1, #0]
 8000412:	7003      	strb	r3, [r0, #0]
 8000414:	784b      	ldrb	r3, [r1, #1]
 8000416:	7043      	strb	r3, [r0, #1]
 8000418:	788b      	ldrb	r3, [r1, #2]
 800041a:	7083      	strb	r3, [r0, #2]
 800041c:	4660      	mov	r0, ip
 800041e:	4770      	bx	lr

08000420 <_pal_lld_setgroupmode.constprop.0>:
 * @param[in] mask      the group mask
 * @param[in] mode      the mode
 *
 * @notapi
 */
void _pal_lld_setgroupmode(ioportid_t port,
 8000420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
  uint32_t otyper  = (mode & PAL_STM32_OTYPE_MASK) >> 2;
  uint32_t ospeedr = (mode & PAL_STM32_OSPEED_MASK) >> 3;
  uint32_t pupdr   = (mode & PAL_STM32_PUPDR_MASK) >> 5;
  uint32_t altr    = (mode & PAL_STM32_ALTERNATE_MASK) >> 7;
  uint32_t bit     = 0;
 8000424:	2200      	movs	r2, #0

      altrmask = altr << ((bit & 7) * 4);
      m1 = 1 << bit;
      m2 = 3 << (bit * 2);
      m4 = 15 << ((bit & 7) * 4);
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
 8000426:	4c21      	ldr	r4, [pc, #132]	; (80004ac <_pal_lld_setgroupmode.constprop.0+0x8c>)
  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
 8000428:	2502      	movs	r5, #2
      altrmask = altr << ((bit & 7) * 4);
 800042a:	f04f 0807 	mov.w	r8, #7
      m4 = 15 << ((bit & 7) * 4);
 800042e:	f04f 0e0f 	mov.w	lr, #15
      m1 = 1 << bit;
 8000432:	f04f 0c01 	mov.w	ip, #1
      m2 = 3 << (bit * 2);
 8000436:	2703      	movs	r7, #3
 8000438:	e00f      	b.n	800045a <_pal_lld_setgroupmode.constprop.0+0x3a>
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
      if ((mode & PAL_STM32_MODE_MASK) == PAL_STM32_MODE_ALTERNATE) {
        /* If going in alternate mode then the alternate number is set
           before switching mode in order to avoid glitches.*/
        if (bit < 8)
          port->AFRL = (port->AFRL & ~m4) | altrmask;
 800043a:	6a21      	ldr	r1, [r4, #32]
 800043c:	ea21 0303 	bic.w	r3, r1, r3
 8000440:	ea43 0309 	orr.w	r3, r3, r9
 8000444:	6223      	str	r3, [r4, #32]
        else
          port->AFRH = (port->AFRH & ~m4) | altrmask;
        port->MODER   = (port->MODER & ~m2) | moder;
 8000446:	6823      	ldr	r3, [r4, #0]
 8000448:	ea0a 0a03 	and.w	sl, sl, r3
 800044c:	ea4a 0305 	orr.w	r3, sl, r5
 8000450:	6023      	str	r3, [r4, #0]
        else
          port->AFRH = (port->AFRH & ~m4) | altrmask;
      }
    }
    mask >>= 1;
    if (!mask)
 8000452:	0840      	lsrs	r0, r0, #1
 8000454:	d028      	beq.n	80004a8 <_pal_lld_setgroupmode.constprop.0+0x88>
      return;
    otyper <<= 1;
    ospeedr <<= 2;
    pupdr <<= 2;
    moder <<= 2;
 8000456:	00ad      	lsls	r5, r5, #2
    bit++;
 8000458:	3201      	adds	r2, #1
      m2 = 3 << (bit * 2);
 800045a:	0051      	lsls	r1, r2, #1
      altrmask = altr << ((bit & 7) * 4);
 800045c:	f002 0307 	and.w	r3, r2, #7
 8000460:	009b      	lsls	r3, r3, #2
      m2 = 3 << (bit * 2);
 8000462:	fa07 f101 	lsl.w	r1, r7, r1
    if ((mask & 1) != 0) {
 8000466:	f010 0f01 	tst.w	r0, #1
      altrmask = altr << ((bit & 7) * 4);
 800046a:	fa08 f903 	lsl.w	r9, r8, r3
      m1 = 1 << bit;
 800046e:	fa0c f602 	lsl.w	r6, ip, r2
      m4 = 15 << ((bit & 7) * 4);
 8000472:	fa0e f303 	lsl.w	r3, lr, r3
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
 8000476:	ea6f 0a01 	mvn.w	sl, r1
    if ((mask & 1) != 0) {
 800047a:	d0ea      	beq.n	8000452 <_pal_lld_setgroupmode.constprop.0+0x32>
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
 800047c:	f8d4 b004 	ldr.w	fp, [r4, #4]
 8000480:	ea2b 0606 	bic.w	r6, fp, r6
 8000484:	6066      	str	r6, [r4, #4]
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
 8000486:	68a6      	ldr	r6, [r4, #8]
 8000488:	ea26 0601 	bic.w	r6, r6, r1
 800048c:	60a6      	str	r6, [r4, #8]
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
 800048e:	68e6      	ldr	r6, [r4, #12]
        if (bit < 8)
 8000490:	2a07      	cmp	r2, #7
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
 8000492:	ea26 0101 	bic.w	r1, r6, r1
 8000496:	60e1      	str	r1, [r4, #12]
        if (bit < 8)
 8000498:	d9cf      	bls.n	800043a <_pal_lld_setgroupmode.constprop.0+0x1a>
          port->AFRH = (port->AFRH & ~m4) | altrmask;
 800049a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800049c:	ea21 0303 	bic.w	r3, r1, r3
 80004a0:	ea43 0309 	orr.w	r3, r3, r9
 80004a4:	6263      	str	r3, [r4, #36]	; 0x24
 80004a6:	e7ce      	b.n	8000446 <_pal_lld_setgroupmode.constprop.0+0x26>
  }
}
 80004a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80004ac:	40020000 	.word	0x40020000

080004b0 <chMtxTryLock.constprop.0>:
  \details Assigns the given value to the Base Priority register.
  \param [in]    basePri  Base Priority value to set
 */
__STATIC_FORCEINLINE void __set_BASEPRI(uint32_t basePri)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80004b0:	2320      	movs	r3, #32
 80004b2:	f383 8811 	msr	BASEPRI, r3
bool chMtxTryLockS(mutex_t *mp) {

  chDbgCheckClassS();
  chDbgCheck(mp != NULL);

  if (mp->owner != NULL) {
 80004b6:	4b09      	ldr	r3, [pc, #36]	; (80004dc <chMtxTryLock.constprop.0+0x2c>)
 80004b8:	689a      	ldr	r2, [r3, #8]
 80004ba:	b122      	cbz	r2, 80004c6 <chMtxTryLock.constprop.0+0x16>
    if (mp->owner == currp) {
      mp->cnt++;
      return true;
    }
#endif
    return false;
 80004bc:	2000      	movs	r0, #0
 80004be:	2300      	movs	r3, #0
 80004c0:	f383 8811 	msr	BASEPRI, r3
}
 80004c4:	4770      	bx	lr

  chDbgAssert(mp->cnt == (cnt_t)0, "counter is not zero");

  mp->cnt++;
#endif
  mp->owner = currp;
 80004c6:	4a06      	ldr	r2, [pc, #24]	; (80004e0 <chMtxTryLock.constprop.0+0x30>)
 80004c8:	6992      	ldr	r2, [r2, #24]
 80004ca:	609a      	str	r2, [r3, #8]
  mp->next = currp->mtxlist;
 80004cc:	6b91      	ldr	r1, [r2, #56]	; 0x38
 80004ce:	60d9      	str	r1, [r3, #12]
  currp->mtxlist = mp;
 80004d0:	6393      	str	r3, [r2, #56]	; 0x38
 80004d2:	2001      	movs	r0, #1
 80004d4:	2300      	movs	r3, #0
 80004d6:	f383 8811 	msr	BASEPRI, r3
}
 80004da:	4770      	bx	lr
 80004dc:	2000082c 	.word	0x2000082c
 80004e0:	200009b0 	.word	0x200009b0
	...

080004f0 <chEvtGetAndClearEvents.constprop.0>:
 80004f0:	2320      	movs	r3, #32
 80004f2:	f383 8811 	msr	BASEPRI, r3
 * @iclass
 */
eventmask_t chEvtGetAndClearEventsI(eventmask_t events) {
  eventmask_t m;

  m = currp->epending & events;
 80004f6:	4b04      	ldr	r3, [pc, #16]	; (8000508 <chEvtGetAndClearEvents.constprop.0+0x18>)
 80004f8:	699a      	ldr	r2, [r3, #24]
  currp->epending &= ~events;
 80004fa:	2300      	movs	r3, #0
  m = currp->epending & events;
 80004fc:	6b50      	ldr	r0, [r2, #52]	; 0x34
  currp->epending &= ~events;
 80004fe:	6353      	str	r3, [r2, #52]	; 0x34
 8000500:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  m = chEvtGetAndClearEventsI(events);
  chSysUnlock();

  return m;
}
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop
 8000508:	200009b0 	.word	0x200009b0
 800050c:	00000000 	.word	0x00000000

08000510 <_test_assert_time_window.constprop.0>:
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 8000510:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
static inline bool chTimeIsInRangeX(systime_t time,
                                    systime_t start,
                                    systime_t end) {

  return (bool)((systime_t)((systime_t)time - (systime_t)start) <
                (systime_t)((systime_t)end - (systime_t)start));
 8000514:	1a09      	subs	r1, r1, r0
 8000516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  return (bool)((systime_t)((systime_t)time - (systime_t)start) <
 8000518:	1a18      	subs	r0, r3, r0
  return true;
}

bool _test_assert(bool condition, const char *msg) {

  if (!condition)
 800051a:	4288      	cmp	r0, r1
 800051c:	d201      	bcs.n	8000522 <_test_assert_time_window.constprop.0+0x12>
    return _test_fail(msg);
  return false;
 800051e:	2000      	movs	r0, #0
                              systime_t end,
                              const char *msg) {

  return _test_assert(osalTimeIsInRangeX(osalOsGetSystemTimeX(), start, end),
                      msg);
}
 8000520:	4770      	bx	lr
  test_failure_message = msg;
 8000522:	4904      	ldr	r1, [pc, #16]	; (8000534 <_test_assert_time_window.constprop.0+0x24>)
  test_local_fail      = true;
 8000524:	4a04      	ldr	r2, [pc, #16]	; (8000538 <_test_assert_time_window.constprop.0+0x28>)
  test_global_fail     = true;
 8000526:	4b05      	ldr	r3, [pc, #20]	; (800053c <_test_assert_time_window.constprop.0+0x2c>)
  test_failure_message = msg;
 8000528:	4805      	ldr	r0, [pc, #20]	; (8000540 <_test_assert_time_window.constprop.0+0x30>)
 800052a:	6008      	str	r0, [r1, #0]
  test_local_fail      = true;
 800052c:	2001      	movs	r0, #1
 800052e:	7010      	strb	r0, [r2, #0]
  test_global_fail     = true;
 8000530:	7018      	strb	r0, [r3, #0]
 8000532:	4770      	bx	lr
 8000534:	200013f4 	.word	0x200013f4
 8000538:	20001498 	.word	0x20001498
 800053c:	200013f8 	.word	0x200013f8
 8000540:	08009008 	.word	0x08009008
	...

08000550 <chCoreAllocFromTop>:
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @api
 */
void *chCoreAllocFromTop(size_t size, unsigned align, size_t offset) {
 8000550:	b430      	push	{r4, r5}
 8000552:	2320      	movs	r3, #32
 8000554:	f383 8811 	msr	BASEPRI, r3
  p = (uint8_t *)MEM_ALIGN_PREV(ch_memcore.topmem - size, align);
 8000558:	4c0b      	ldr	r4, [pc, #44]	; (8000588 <chCoreAllocFromTop+0x38>)
  if ((prev < ch_memcore.basemem) || (prev > ch_memcore.topmem)) {
 800055a:	e9d4 3500 	ldrd	r3, r5, [r4]
  p = (uint8_t *)MEM_ALIGN_PREV(ch_memcore.topmem - size, align);
 800055e:	4249      	negs	r1, r1
 8000560:	1a28      	subs	r0, r5, r0
 8000562:	4008      	ands	r0, r1
  prev = p - offset;
 8000564:	1a82      	subs	r2, r0, r2
  if ((prev < ch_memcore.basemem) || (prev > ch_memcore.topmem)) {
 8000566:	429a      	cmp	r2, r3
 8000568:	d307      	bcc.n	800057a <chCoreAllocFromTop+0x2a>
 800056a:	4295      	cmp	r5, r2
 800056c:	d305      	bcc.n	800057a <chCoreAllocFromTop+0x2a>
  ch_memcore.topmem = prev;
 800056e:	6062      	str	r2, [r4, #4]
 8000570:	2300      	movs	r3, #0
 8000572:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  p = chCoreAllocFromTopI(size, align, offset);
  chSysUnlock();

  return p;
}
 8000576:	bc30      	pop	{r4, r5}
 8000578:	4770      	bx	lr
    return NULL;
 800057a:	2000      	movs	r0, #0
 800057c:	2300      	movs	r3, #0
 800057e:	f383 8811 	msr	BASEPRI, r3
}
 8000582:	bc30      	pop	{r4, r5}
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop
 8000588:	20000b48 	.word	0x20000b48
 800058c:	00000000 	.word	0x00000000

08000590 <notify2>:

#if STM32_SERIAL_USE_USART2 || defined(__DOXYGEN__)
static void notify2(io_queue_t *qp) {

  (void)qp;
  USART2->CR1 |= USART_CR1_TXEIE | USART_CR1_TCIE;
 8000590:	4a02      	ldr	r2, [pc, #8]	; (800059c <notify2+0xc>)
 8000592:	68d3      	ldr	r3, [r2, #12]
 8000594:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000598:	60d3      	str	r3, [r2, #12]
}
 800059a:	4770      	bx	lr
 800059c:	40004400 	.word	0x40004400

080005a0 <oslib_test_008_001_setup>:
 * @param[in] size      heap size
 *
 * @init
 */
void chHeapObjectInit(memory_heap_t *heapp, void *buf, size_t size) {
  heap_header_t *hp = (heap_header_t *)MEM_ALIGN_NEXT(buf, CH_HEAP_ALIGNMENT);
 80005a0:	4b0b      	ldr	r3, [pc, #44]	; (80005d0 <oslib_test_008_001_setup+0x30>)
  /*lint -save -e9033 [10.8] Required cast operations.*/
  size -= (size_t)((uint8_t *)hp - (uint8_t *)buf);
  /*lint restore*/

  /* Initializing the heap header.*/
  heapp->provider = NULL;
 80005a2:	4a0c      	ldr	r2, [pc, #48]	; (80005d4 <oslib_test_008_001_setup+0x34>)
  heap_header_t *hp = (heap_header_t *)MEM_ALIGN_NEXT(buf, CH_HEAP_ALIGNMENT);
 80005a4:	1dd9      	adds	r1, r3, #7
 80005a6:	f021 0107 	bic.w	r1, r1, #7
  size -= (size_t)((uint8_t *)hp - (uint8_t *)buf);
 80005aa:	1acb      	subs	r3, r1, r3
  H_NEXT(&heapp->header) = hp;
  H_PAGES(&heapp->header) = 0;
  H_NEXT(hp) = NULL;
  H_PAGES(hp) = (size - sizeof (heap_header_t)) / CH_HEAP_ALIGNMENT;
 80005ac:	f1c3 0378 	rsb	r3, r3, #120	; 0x78
 * - [8.1.10] Testing final conditions. The heap geometry must be the
 *   same than the one registered at beginning.
 * .
 */

static void oslib_test_008_001_setup(void) {
 80005b0:	b410      	push	{r4}
  heapp->provider = NULL;
 80005b2:	2000      	movs	r0, #0
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->next = (thread_t *)tqp;
 80005b4:	f102 040c 	add.w	r4, r2, #12
  H_PAGES(hp) = (size - sizeof (heap_header_t)) / CH_HEAP_ALIGNMENT;
 80005b8:	08db      	lsrs	r3, r3, #3
 80005ba:	604b      	str	r3, [r1, #4]
  H_NEXT(&heapp->header) = hp;
 80005bc:	6051      	str	r1, [r2, #4]
  H_NEXT(hp) = NULL;
 80005be:	6008      	str	r0, [r1, #0]
  tqp->prev = (thread_t *)tqp;
 80005c0:	e9c2 4403 	strd	r4, r4, [r2, #12]
  heapp->provider = NULL;
 80005c4:	6010      	str	r0, [r2, #0]
  chHeapObjectInit(&test_heap, test_heap_buffer, sizeof(test_heap_buffer));
}
 80005c6:	bc10      	pop	{r4}
  H_PAGES(&heapp->header) = 0;
 80005c8:	6090      	str	r0, [r2, #8]
  mp->owner = NULL;
 80005ca:	6150      	str	r0, [r2, #20]
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop
 80005d0:	20001418 	.word	0x20001418
 80005d4:	200013fc 	.word	0x200013fc
	...

080005e0 <oslib_test_007_003_setup>:
  chDbgCheck((mp != NULL) &&
             (size >= sizeof(void *)) &&
             (align >= PORT_NATURAL_ALIGN) &&
             MEM_IS_VALID_ALIGNMENT(align));

  mp->next = NULL;
 80005e0:	4b05      	ldr	r3, [pc, #20]	; (80005f8 <oslib_test_007_003_setup+0x18>)
 80005e2:	2200      	movs	r2, #0
  mp->object_size = size;
 80005e4:	2104      	movs	r1, #4
 80005e6:	e9c3 3300 	strd	r3, r3, [r3]
  mp->align = align;
 80005ea:	e9c3 1104 	strd	r1, r1, [r3, #16]
  mp->next = NULL;
 80005ee:	60da      	str	r2, [r3, #12]
  mp->provider = provider;
 80005f0:	619a      	str	r2, [r3, #24]
void chSemObjectInit(semaphore_t *sp, cnt_t n) {

  chDbgCheck((sp != NULL) && (n >= (cnt_t)0));

  queue_init(&sp->queue);
  sp->cnt = n;
 80005f2:	609a      	str	r2, [r3, #8]
 * .
 */

static void oslib_test_007_003_setup(void) {
  chGuardedPoolObjectInit(&gmp1, sizeof (uint32_t));
}
 80005f4:	4770      	bx	lr
 80005f6:	bf00      	nop
 80005f8:	20000810 	.word	0x20000810
 80005fc:	00000000 	.word	0x00000000

08000600 <oslib_test_007_002_setup>:
 8000600:	f7ff bfee 	b.w	80005e0 <oslib_test_007_003_setup>
	...

08000610 <null_provider>:
}
 8000610:	2000      	movs	r0, #0
 8000612:	4770      	bx	lr
	...

08000620 <oslib_test_007_001_setup>:
  mp->next = NULL;
 8000620:	4b03      	ldr	r3, [pc, #12]	; (8000630 <oslib_test_007_001_setup+0x10>)
 8000622:	2100      	movs	r1, #0
  mp->object_size = size;
 8000624:	2204      	movs	r2, #4
  mp->align = align;
 8000626:	e9c3 2201 	strd	r2, r2, [r3, #4]
  mp->next = NULL;
 800062a:	6019      	str	r1, [r3, #0]
  mp->provider = provider;
 800062c:	60d9      	str	r1, [r3, #12]
}
 800062e:	4770      	bx	lr
 8000630:	20000874 	.word	0x20000874
	...

08000640 <__ch_delegate_fn0>:
 *
 * @param[in] argsp     the list of arguments
 * @return              The function return value.
 */
msg_t __ch_delegate_fn0(va_list *argsp) {
  delegate_fn0_t fn0 = (delegate_fn0_t)va_arg(*argsp, delegate_fn0_t);
 8000640:	6803      	ldr	r3, [r0, #0]
 8000642:	1d1a      	adds	r2, r3, #4
 8000644:	6002      	str	r2, [r0, #0]
  return fn0();
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	4718      	bx	r3
 800064a:	bf00      	nop
 800064c:	0000      	movs	r0, r0
	...

08000650 <__ch_delegate_fn1>:
 *
 * @param[in] argsp     the list of arguments
 * @return              The function return value.
 */
msg_t __ch_delegate_fn1(va_list *argsp) {
  delegate_fn1_t fn1 = (delegate_fn1_t)va_arg(*argsp, delegate_fn1_t);
 8000650:	6801      	ldr	r1, [r0, #0]
msg_t __ch_delegate_fn1(va_list *argsp) {
 8000652:	4603      	mov	r3, r0
  delegate_fn1_t fn1 = (delegate_fn1_t)va_arg(*argsp, delegate_fn1_t);
 8000654:	460a      	mov	r2, r1
 8000656:	1d08      	adds	r0, r1, #4
msg_t __ch_delegate_fn1(va_list *argsp) {
 8000658:	b410      	push	{r4}
  delegate_fn1_t fn1 = (delegate_fn1_t)va_arg(*argsp, delegate_fn1_t);
 800065a:	6018      	str	r0, [r3, #0]
 800065c:	f852 4b08 	ldr.w	r4, [r2], #8
  msg_t p1 = (msg_t)va_arg(*argsp, msg_t);
  return fn1(p1);
 8000660:	6848      	ldr	r0, [r1, #4]
  msg_t p1 = (msg_t)va_arg(*argsp, msg_t);
 8000662:	601a      	str	r2, [r3, #0]
  return fn1(p1);
 8000664:	4623      	mov	r3, r4
}
 8000666:	bc10      	pop	{r4}
  return fn1(p1);
 8000668:	4718      	bx	r3
 800066a:	bf00      	nop
 800066c:	0000      	movs	r0, r0
	...

08000670 <__ch_delegate_fn2>:
 *
 * @param[in] argsp     the list of arguments
 * @return              The function return value.
 */
msg_t __ch_delegate_fn2(va_list *argsp) {
  delegate_fn2_t fn2 = (delegate_fn2_t)va_arg(*argsp, delegate_fn2_t);
 8000670:	6802      	ldr	r2, [r0, #0]
msg_t __ch_delegate_fn2(va_list *argsp) {
 8000672:	b430      	push	{r4, r5}
 8000674:	4603      	mov	r3, r0
  delegate_fn2_t fn2 = (delegate_fn2_t)va_arg(*argsp, delegate_fn2_t);
 8000676:	1d11      	adds	r1, r2, #4
  msg_t p1 = (msg_t)va_arg(*argsp, msg_t);
 8000678:	6850      	ldr	r0, [r2, #4]
  delegate_fn2_t fn2 = (delegate_fn2_t)va_arg(*argsp, delegate_fn2_t);
 800067a:	6019      	str	r1, [r3, #0]
 800067c:	6814      	ldr	r4, [r2, #0]
  msg_t p2 = (msg_t)va_arg(*argsp, msg_t);
  return fn2(p1, p2);
 800067e:	6891      	ldr	r1, [r2, #8]
  msg_t p2 = (msg_t)va_arg(*argsp, msg_t);
 8000680:	f102 050c 	add.w	r5, r2, #12
 8000684:	601d      	str	r5, [r3, #0]
  return fn2(p1, p2);
 8000686:	4623      	mov	r3, r4
}
 8000688:	bc30      	pop	{r4, r5}
  return fn2(p1, p2);
 800068a:	4718      	bx	r3
 800068c:	0000      	movs	r0, r0
	...

08000690 <__ch_delegate_fn3>:
 *
 * @param[in] argsp     the list of arguments
 * @return              The function return value.
 */
msg_t __ch_delegate_fn3(va_list *argsp) {
  delegate_fn3_t fn3 = (delegate_fn3_t)va_arg(*argsp, delegate_fn3_t);
 8000690:	6803      	ldr	r3, [r0, #0]
msg_t __ch_delegate_fn3(va_list *argsp) {
 8000692:	b470      	push	{r4, r5, r6}
 8000694:	4604      	mov	r4, r0
  delegate_fn3_t fn3 = (delegate_fn3_t)va_arg(*argsp, delegate_fn3_t);
 8000696:	1d1a      	adds	r2, r3, #4
  msg_t p1 = (msg_t)va_arg(*argsp, msg_t);
  msg_t p2 = (msg_t)va_arg(*argsp, msg_t);
 8000698:	e9d3 0101 	ldrd	r0, r1, [r3, #4]
  delegate_fn3_t fn3 = (delegate_fn3_t)va_arg(*argsp, delegate_fn3_t);
 800069c:	6022      	str	r2, [r4, #0]
 800069e:	681d      	ldr	r5, [r3, #0]
  msg_t p3 = (msg_t)va_arg(*argsp, msg_t);
  return fn3(p1, p2, p3);
 80006a0:	68da      	ldr	r2, [r3, #12]
  msg_t p3 = (msg_t)va_arg(*argsp, msg_t);
 80006a2:	f103 0610 	add.w	r6, r3, #16
 80006a6:	6026      	str	r6, [r4, #0]
  return fn3(p1, p2, p3);
 80006a8:	462b      	mov	r3, r5
}
 80006aa:	bc70      	pop	{r4, r5, r6}
  return fn3(p1, p2, p3);
 80006ac:	4718      	bx	r3
 80006ae:	bf00      	nop

080006b0 <__ch_delegate_fn4>:
 *
 * @param[in] argsp     the list of arguments
 * @return              The function return value.
 */
msg_t __ch_delegate_fn4(va_list *argsp) {
  delegate_fn4_t fn4 = (delegate_fn4_t)va_arg(*argsp, delegate_fn4_t);
 80006b0:	6803      	ldr	r3, [r0, #0]
msg_t __ch_delegate_fn4(va_list *argsp) {
 80006b2:	b470      	push	{r4, r5, r6}
 80006b4:	4604      	mov	r4, r0
  delegate_fn4_t fn4 = (delegate_fn4_t)va_arg(*argsp, delegate_fn4_t);
 80006b6:	1d1d      	adds	r5, r3, #4
  msg_t p1 = (msg_t)va_arg(*argsp, msg_t);
  msg_t p2 = (msg_t)va_arg(*argsp, msg_t);
 80006b8:	e9d3 0101 	ldrd	r0, r1, [r3, #4]
  msg_t p3 = (msg_t)va_arg(*argsp, msg_t);
 80006bc:	68da      	ldr	r2, [r3, #12]
  delegate_fn4_t fn4 = (delegate_fn4_t)va_arg(*argsp, delegate_fn4_t);
 80006be:	6025      	str	r5, [r4, #0]
 80006c0:	681d      	ldr	r5, [r3, #0]
  msg_t p4 = (msg_t)va_arg(*argsp, msg_t);
 80006c2:	f103 0614 	add.w	r6, r3, #20
  return fn4(p1, p2, p3, p4);
 80006c6:	46ac      	mov	ip, r5
 80006c8:	691b      	ldr	r3, [r3, #16]
  msg_t p4 = (msg_t)va_arg(*argsp, msg_t);
 80006ca:	6026      	str	r6, [r4, #0]
}
 80006cc:	bc70      	pop	{r4, r5, r6}
  return fn4(p1, p2, p3, p4);
 80006ce:	4760      	bx	ip

080006d0 <oslib_test_003_002_setup>:
 * - [3.2.1] Reading while pipe is empty.
 * - [3.2.2] Writing a string larger than pipe buffer.
 * .
 */

static void oslib_test_003_002_setup(void) {
 80006d0:	b430      	push	{r4, r5}
 */
void chPipeObjectInit(pipe_t *pp, uint8_t *buf, size_t n) {

  chDbgCheck((pp != NULL) && (buf != NULL) && (n > (size_t)0));

  pp->buffer = buf;
 80006d2:	4b0f      	ldr	r3, [pc, #60]	; (8000710 <oslib_test_003_002_setup+0x40>)
 80006d4:	4a0f      	ldr	r2, [pc, #60]	; (8000714 <oslib_test_003_002_setup+0x44>)
 80006d6:	601a      	str	r2, [r3, #0]
  pp->rdptr  = buf;
  pp->wrptr  = buf;
  pp->top    = &buf[n];
 80006d8:	f102 0508 	add.w	r5, r2, #8
  tqp->next = (thread_t *)tqp;
 80006dc:	f103 0420 	add.w	r4, r3, #32
  pp->wrptr  = buf;
 80006e0:	e9c3 2202 	strd	r2, r2, [r3, #8]
 80006e4:	f103 0030 	add.w	r0, r3, #48	; 0x30
  pp->cnt    = (size_t)0;
 80006e8:	2200      	movs	r2, #0
 80006ea:	f103 0140 	add.w	r1, r3, #64	; 0x40
  tqp->prev = (thread_t *)tqp;
 80006ee:	e9c3 4408 	strd	r4, r4, [r3, #32]
  pp->top    = &buf[n];
 80006f2:	605d      	str	r5, [r3, #4]
 80006f4:	e9c3 000c 	strd	r0, r0, [r3, #48]	; 0x30
  chPipeObjectInit(&pipe1, buffer, PIPE_SIZE / 2);
}
 80006f8:	bc30      	pop	{r4, r5}
 80006fa:	e9c3 1110 	strd	r1, r1, [r3, #64]	; 0x40
  pp->reset  = false;
  pp->wtr    = NULL;
  pp->rtr    = NULL;
 80006fe:	e9c3 2206 	strd	r2, r2, [r3, #24]
  pp->cnt    = (size_t)0;
 8000702:	611a      	str	r2, [r3, #16]
  pp->reset  = false;
 8000704:	751a      	strb	r2, [r3, #20]
 8000706:	629a      	str	r2, [r3, #40]	; 0x28
 8000708:	639a      	str	r2, [r3, #56]	; 0x38
 800070a:	649a      	str	r2, [r3, #72]	; 0x48
 800070c:	4770      	bx	lr
 800070e:	bf00      	nop
 8000710:	2000088c 	.word	0x2000088c
 8000714:	2000095c 	.word	0x2000095c
	...

08000720 <oslib_test_003_001_setup>:
static void oslib_test_003_001_setup(void) {
 8000720:	b430      	push	{r4, r5}
  pp->buffer = buf;
 8000722:	4b0f      	ldr	r3, [pc, #60]	; (8000760 <oslib_test_003_001_setup+0x40>)
 8000724:	4a0f      	ldr	r2, [pc, #60]	; (8000764 <oslib_test_003_001_setup+0x44>)
 8000726:	601a      	str	r2, [r3, #0]
  pp->top    = &buf[n];
 8000728:	f102 0510 	add.w	r5, r2, #16
  tqp->next = (thread_t *)tqp;
 800072c:	f103 0420 	add.w	r4, r3, #32
  pp->wrptr  = buf;
 8000730:	e9c3 2202 	strd	r2, r2, [r3, #8]
 8000734:	f103 0030 	add.w	r0, r3, #48	; 0x30
  pp->cnt    = (size_t)0;
 8000738:	2200      	movs	r2, #0
 800073a:	f103 0140 	add.w	r1, r3, #64	; 0x40
  tqp->prev = (thread_t *)tqp;
 800073e:	e9c3 4408 	strd	r4, r4, [r3, #32]
  pp->top    = &buf[n];
 8000742:	605d      	str	r5, [r3, #4]
 8000744:	e9c3 000c 	strd	r0, r0, [r3, #48]	; 0x30
}
 8000748:	bc30      	pop	{r4, r5}
 800074a:	e9c3 1110 	strd	r1, r1, [r3, #64]	; 0x40
  pp->rtr    = NULL;
 800074e:	e9c3 2206 	strd	r2, r2, [r3, #24]
  pp->cnt    = (size_t)0;
 8000752:	611a      	str	r2, [r3, #16]
  pp->reset  = false;
 8000754:	751a      	strb	r2, [r3, #20]
 8000756:	629a      	str	r2, [r3, #40]	; 0x28
 8000758:	639a      	str	r2, [r3, #56]	; 0x38
 800075a:	649a      	str	r2, [r3, #72]	; 0x48
 800075c:	4770      	bx	lr
 800075e:	bf00      	nop
 8000760:	2000088c 	.word	0x2000088c
 8000764:	2000095c 	.word	0x2000095c
	...

08000770 <oslib_test_002_003_setup>:
 *   active state.
 * - [2.3.4] Testing chMBFetchTimeout() and chMBFetchI() timeout.
 * .
 */

static void oslib_test_002_003_setup(void) {
 8000770:	b430      	push	{r4, r5}
 */
void chMBObjectInit(mailbox_t *mbp, msg_t *buf, size_t n) {

  chDbgCheck((mbp != NULL) && (buf != NULL) && (n > (size_t)0));

  mbp->buffer = buf;
 8000772:	4b0a      	ldr	r3, [pc, #40]	; (800079c <oslib_test_002_003_setup+0x2c>)
 8000774:	4a0a      	ldr	r2, [pc, #40]	; (80007a0 <oslib_test_002_003_setup+0x30>)
 8000776:	601a      	str	r2, [r3, #0]
  mbp->rdptr  = buf;
  mbp->wrptr  = buf;
  mbp->top    = &buf[n];
 8000778:	f102 0510 	add.w	r5, r2, #16
  tqp->next = (thread_t *)tqp;
 800077c:	f103 0418 	add.w	r4, r3, #24
  mbp->cnt    = (size_t)0;
 8000780:	2100      	movs	r1, #0
 8000782:	f103 0020 	add.w	r0, r3, #32
  tqp->prev = (thread_t *)tqp;
 8000786:	e9c3 4406 	strd	r4, r4, [r3, #24]
  mbp->top    = &buf[n];
 800078a:	605d      	str	r5, [r3, #4]
  mbp->wrptr  = buf;
 800078c:	e9c3 2202 	strd	r2, r2, [r3, #8]
  chMBObjectInit(&mb1, mb_buffer, MB_SIZE);
}
 8000790:	bc30      	pop	{r4, r5}
 8000792:	e9c3 0008 	strd	r0, r0, [r3, #32]
  mbp->cnt    = (size_t)0;
 8000796:	6119      	str	r1, [r3, #16]
  mbp->reset  = false;
 8000798:	7519      	strb	r1, [r3, #20]
 800079a:	4770      	bx	lr
 800079c:	2000084c 	.word	0x2000084c
 80007a0:	20000c30 	.word	0x20000c30
	...

080007b0 <oslib_test_002_002_setup>:
 80007b0:	f7ff bfde 	b.w	8000770 <oslib_test_002_003_setup>
	...

080007c0 <oslib_test_002_001_setup>:
 80007c0:	f7ff bfd6 	b.w	8000770 <oslib_test_002_003_setup>
	...

080007d0 <rt_test_011_011_setup>:
  tqp->next = (thread_t *)tqp;
 80007d0:	4b02      	ldr	r3, [pc, #8]	; (80007dc <rt_test_011_011_setup+0xc>)
 80007d2:	2200      	movs	r2, #0
  tqp->prev = (thread_t *)tqp;
 80007d4:	e9c3 3300 	strd	r3, r3, [r3]
 80007d8:	609a      	str	r2, [r3, #8]
 * .
 */

static void rt_test_011_011_setup(void) {
  chMtxObjectInit(&mtx1);
}
 80007da:	4770      	bx	lr
 80007dc:	20000c60 	.word	0x20000c60

080007e0 <rt_test_011_010_setup>:
  tqp->next = (thread_t *)tqp;
 80007e0:	4b02      	ldr	r3, [pc, #8]	; (80007ec <rt_test_011_010_setup+0xc>)
 80007e2:	2201      	movs	r2, #1
  tqp->prev = (thread_t *)tqp;
 80007e4:	e9c3 3300 	strd	r3, r3, [r3]
 80007e8:	609a      	str	r2, [r3, #8]
}
 80007ea:	4770      	bx	lr
 80007ec:	20000d7c 	.word	0x20000d7c

080007f0 <tmo>:
static void tmo(void *param) {(void)param;}
 80007f0:	4770      	bx	lr
 80007f2:	bf00      	nop
	...

08000800 <rt_test_011_007_setup>:
  tqp->next = (thread_t *)tqp;
 8000800:	4b02      	ldr	r3, [pc, #8]	; (800080c <rt_test_011_007_setup+0xc>)
 8000802:	2200      	movs	r2, #0
  tqp->prev = (thread_t *)tqp;
 8000804:	e9c3 3300 	strd	r3, r3, [r3]
 8000808:	609a      	str	r2, [r3, #8]
}
 800080a:	4770      	bx	lr
 800080c:	20000d7c 	.word	0x20000d7c

08000810 <rt_test_010_002_setup>:
  mp->next = NULL;
 8000810:	4b04      	ldr	r3, [pc, #16]	; (8000824 <rt_test_010_002_setup+0x14>)
 8000812:	2200      	movs	r2, #0
  mp->object_size = size;
 8000814:	f44f 70a4 	mov.w	r0, #328	; 0x148
  mp->align = align;
 8000818:	2104      	movs	r1, #4
 800081a:	e9c3 0101 	strd	r0, r1, [r3, #4]
  mp->next = NULL;
 800081e:	601a      	str	r2, [r3, #0]
  mp->provider = provider;
 8000820:	60da      	str	r2, [r3, #12]
 * .
 */

static void rt_test_010_002_setup(void) {
  chPoolObjectInit(&mp1, THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE), NULL);
}
 8000822:	4770      	bx	lr
 8000824:	20000c40 	.word	0x20000c40
	...

08000830 <rt_test_010_001_setup>:
  heap_header_t *hp = (heap_header_t *)MEM_ALIGN_NEXT(buf, CH_HEAP_ALIGNMENT);
 8000830:	4b0b      	ldr	r3, [pc, #44]	; (8000860 <rt_test_010_001_setup+0x30>)
  heapp->provider = NULL;
 8000832:	4a0c      	ldr	r2, [pc, #48]	; (8000864 <rt_test_010_001_setup+0x34>)
  heap_header_t *hp = (heap_header_t *)MEM_ALIGN_NEXT(buf, CH_HEAP_ALIGNMENT);
 8000834:	1dd9      	adds	r1, r3, #7
 8000836:	f021 0107 	bic.w	r1, r1, #7
  size -= (size_t)((uint8_t *)hp - (uint8_t *)buf);
 800083a:	1acb      	subs	r3, r1, r3
  H_PAGES(hp) = (size - sizeof (heap_header_t)) / CH_HEAP_ALIGNMENT;
 800083c:	f5c3 63cc 	rsb	r3, r3, #1632	; 0x660
static void rt_test_010_001_setup(void) {
 8000840:	b410      	push	{r4}
  heapp->provider = NULL;
 8000842:	2000      	movs	r0, #0
  tqp->next = (thread_t *)tqp;
 8000844:	f102 040c 	add.w	r4, r2, #12
  H_PAGES(hp) = (size - sizeof (heap_header_t)) / CH_HEAP_ALIGNMENT;
 8000848:	08db      	lsrs	r3, r3, #3
 800084a:	604b      	str	r3, [r1, #4]
  H_NEXT(&heapp->header) = hp;
 800084c:	6051      	str	r1, [r2, #4]
  H_NEXT(hp) = NULL;
 800084e:	6008      	str	r0, [r1, #0]
  tqp->prev = (thread_t *)tqp;
 8000850:	e9c2 4403 	strd	r4, r4, [r2, #12]
  heapp->provider = NULL;
 8000854:	6010      	str	r0, [r2, #0]
}
 8000856:	bc10      	pop	{r4}
  H_PAGES(&heapp->header) = 0;
 8000858:	6090      	str	r0, [r2, #8]
 800085a:	6150      	str	r0, [r2, #20]
 800085c:	4770      	bx	lr
 800085e:	bf00      	nop
 8000860:	20000d88 	.word	0x20000d88
 8000864:	20000bb0 	.word	0x20000bb0
	...

08000870 <rt_test_009_007_setup>:
 *   has been emptied.
 * - [9.7.4] Unregistering from the Event Sources.
 * .
 */

static void rt_test_009_007_setup(void) {
 8000870:	b508      	push	{r3, lr}
  chEvtGetAndClearEvents(ALL_EVENTS);
 8000872:	f7ff fe3d 	bl	80004f0 <chEvtGetAndClearEvents.constprop.0>
 *
 * @init
 */
static inline void chEvtObjectInit(event_source_t *esp) {

  esp->next = (event_listener_t *)esp;
 8000876:	4a02      	ldr	r2, [pc, #8]	; (8000880 <rt_test_009_007_setup+0x10>)
 8000878:	4b02      	ldr	r3, [pc, #8]	; (8000884 <rt_test_009_007_setup+0x14>)
 800087a:	6012      	str	r2, [r2, #0]
 800087c:	601b      	str	r3, [r3, #0]
  chEvtObjectInit(&es1);
  chEvtObjectInit(&es2);
}
 800087e:	bd08      	pop	{r3, pc}
 8000880:	20000808 	.word	0x20000808
 8000884:	2000080c 	.word	0x2000080c
	...

08000890 <rt_test_009_006_setup>:
  chEvtGetAndClearEvents(ALL_EVENTS);
 8000890:	f7ff be2e 	b.w	80004f0 <chEvtGetAndClearEvents.constprop.0>
	...

080008a0 <rt_test_009_005_setup>:
 80008a0:	f7ff bff6 	b.w	8000890 <rt_test_009_006_setup>
	...

080008b0 <rt_test_009_004_setup>:
 80008b0:	f7ff bfee 	b.w	8000890 <rt_test_009_006_setup>
	...

080008c0 <rt_test_009_003_setup>:
 80008c0:	f7ff bfe6 	b.w	8000890 <rt_test_009_006_setup>
	...

080008d0 <rt_test_009_002_setup>:
 80008d0:	f7ff bfde 	b.w	8000890 <rt_test_009_006_setup>
	...

080008e0 <rt_test_007_009_setup>:
  tqp->next = (thread_t *)tqp;
 80008e0:	4906      	ldr	r1, [pc, #24]	; (80008fc <rt_test_007_009_setup+0x1c>)
 80008e2:	4a07      	ldr	r2, [pc, #28]	; (8000900 <rt_test_007_009_setup+0x20>)
 80008e4:	4b07      	ldr	r3, [pc, #28]	; (8000904 <rt_test_007_009_setup+0x24>)
 80008e6:	6009      	str	r1, [r1, #0]
 80008e8:	2000      	movs	r0, #0
  tqp->prev = (thread_t *)tqp;
 80008ea:	e9c2 2200 	strd	r2, r2, [r2]
 80008ee:	e9c3 3300 	strd	r3, r3, [r3]
 80008f2:	6049      	str	r1, [r1, #4]
 80008f4:	6090      	str	r0, [r2, #8]
 80008f6:	6098      	str	r0, [r3, #8]

static void rt_test_007_009_setup(void) {
  chCondObjectInit(&c1);
  chMtxObjectInit(&m1);
  chMtxObjectInit(&m2);
}
 80008f8:	4770      	bx	lr
 80008fa:	bf00      	nop
 80008fc:	20000800 	.word	0x20000800
 8000900:	2000082c 	.word	0x2000082c
 8000904:	2000083c 	.word	0x2000083c
	...

08000910 <rt_test_007_008_setup>:
  tqp->next = (thread_t *)tqp;
 8000910:	4a04      	ldr	r2, [pc, #16]	; (8000924 <rt_test_007_008_setup+0x14>)
 8000912:	4b05      	ldr	r3, [pc, #20]	; (8000928 <rt_test_007_008_setup+0x18>)
 8000914:	6012      	str	r2, [r2, #0]
 8000916:	2100      	movs	r1, #0
  tqp->prev = (thread_t *)tqp;
 8000918:	e9c3 3300 	strd	r3, r3, [r3]
 800091c:	6052      	str	r2, [r2, #4]
 800091e:	6099      	str	r1, [r3, #8]
}
 8000920:	4770      	bx	lr
 8000922:	bf00      	nop
 8000924:	20000800 	.word	0x20000800
 8000928:	2000082c 	.word	0x2000082c
 800092c:	00000000 	.word	0x00000000

08000930 <rt_test_007_007_setup>:
 8000930:	f7ff bfee 	b.w	8000910 <rt_test_007_008_setup>
	...

08000940 <rt_test_007_005_setup>:
  tqp->next = (thread_t *)tqp;
 8000940:	4b02      	ldr	r3, [pc, #8]	; (800094c <rt_test_007_005_setup+0xc>)
 8000942:	2200      	movs	r2, #0
  tqp->prev = (thread_t *)tqp;
 8000944:	e9c3 3300 	strd	r3, r3, [r3]
 8000948:	609a      	str	r2, [r3, #8]
}
 800094a:	4770      	bx	lr
 800094c:	2000082c 	.word	0x2000082c

08000950 <rt_test_007_004_setup>:
  tqp->next = (thread_t *)tqp;
 8000950:	4a04      	ldr	r2, [pc, #16]	; (8000964 <rt_test_007_004_setup+0x14>)
 8000952:	4b05      	ldr	r3, [pc, #20]	; (8000968 <rt_test_007_004_setup+0x18>)
 8000954:	6012      	str	r2, [r2, #0]
 8000956:	2100      	movs	r1, #0
 8000958:	e9c2 2101 	strd	r2, r1, [r2, #4]
  tqp->prev = (thread_t *)tqp;
 800095c:	e9c3 3300 	strd	r3, r3, [r3]
 8000960:	6099      	str	r1, [r3, #8]
}
 8000962:	4770      	bx	lr
 8000964:	2000082c 	.word	0x2000082c
 8000968:	2000083c 	.word	0x2000083c
 800096c:	00000000 	.word	0x00000000

08000970 <rt_test_007_001_setup>:
 8000970:	f7ff bfe6 	b.w	8000940 <rt_test_007_005_setup>
	...

08000980 <rt_test_006_005_setup>:
  tqp->next = (thread_t *)tqp;
 8000980:	4b02      	ldr	r3, [pc, #8]	; (800098c <rt_test_006_005_setup+0xc>)
 8000982:	2200      	movs	r2, #0
  tqp->prev = (thread_t *)tqp;
 8000984:	e9c3 3300 	strd	r3, r3, [r3]
 8000988:	609a      	str	r2, [r3, #8]
 * .
 */

static void rt_test_006_005_setup(void) {
  chSemObjectInit(&sem1, 0);
}
 800098a:	4770      	bx	lr
 800098c:	20000d70 	.word	0x20000d70

08000990 <rt_test_006_004_setup>:
 8000990:	f7ff bff6 	b.w	8000980 <rt_test_006_005_setup>
	...

080009a0 <rt_test_006_003_setup>:
 80009a0:	f7ff bfee 	b.w	8000980 <rt_test_006_005_setup>
	...

080009b0 <rt_test_006_002_setup>:
 80009b0:	f7ff bfe6 	b.w	8000980 <rt_test_006_005_setup>
	...

080009c0 <rt_test_006_001_setup>:
  tqp->next = (thread_t *)tqp;
 80009c0:	4b02      	ldr	r3, [pc, #8]	; (80009cc <rt_test_006_001_setup+0xc>)
 80009c2:	2201      	movs	r2, #1
  tqp->prev = (thread_t *)tqp;
 80009c4:	e9c3 3300 	strd	r3, r3, [r3]
 80009c8:	609a      	str	r2, [r3, #8]
}
 80009ca:	4770      	bx	lr
 80009cc:	20000d70 	.word	0x20000d70

080009d0 <rt_test_005_001_setup>:
 *   the state of the reference are tested.
 * .
 */

static void rt_test_005_001_setup(void) {
  tr1 = NULL;
 80009d0:	4b01      	ldr	r3, [pc, #4]	; (80009d8 <rt_test_005_001_setup+0x8>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	601a      	str	r2, [r3, #0]
}
 80009d6:	4770      	bx	lr
 80009d8:	200014c8 	.word	0x200014c8
 80009dc:	00000000 	.word	0x00000000

080009e0 <_test_assert>:
  if (!condition)
 80009e0:	b108      	cbz	r0, 80009e6 <_test_assert+0x6>
  return false;
 80009e2:	2000      	movs	r0, #0
}
 80009e4:	4770      	bx	lr
bool _test_assert(bool condition, const char *msg) {
 80009e6:	b410      	push	{r4}
  test_global_fail     = true;
 80009e8:	4a04      	ldr	r2, [pc, #16]	; (80009fc <_test_assert+0x1c>)
  test_local_fail      = true;
 80009ea:	4c05      	ldr	r4, [pc, #20]	; (8000a00 <_test_assert+0x20>)
  test_failure_message = msg;
 80009ec:	4b05      	ldr	r3, [pc, #20]	; (8000a04 <_test_assert+0x24>)
  test_local_fail      = true;
 80009ee:	2001      	movs	r0, #1
 80009f0:	7020      	strb	r0, [r4, #0]
  test_global_fail     = true;
 80009f2:	7010      	strb	r0, [r2, #0]
}
 80009f4:	bc10      	pop	{r4}
  test_failure_message = msg;
 80009f6:	6019      	str	r1, [r3, #0]
}
 80009f8:	4770      	bx	lr
 80009fa:	bf00      	nop
 80009fc:	200013f8 	.word	0x200013f8
 8000a00:	20001498 	.word	0x20001498
 8000a04:	200013f4 	.word	0x200013f4
	...

08000a10 <rt_test_003_002_execute>:
    test_assert(b == false, "in range");
  }
  test_end_step(2);

  /* [3.2.3] Checking boundaries for start > end.*/
  test_set_step(3);
 8000a10:	4b01      	ldr	r3, [pc, #4]	; (8000a18 <rt_test_003_002_execute+0x8>)
 8000a12:	2203      	movs	r2, #3
 8000a14:	601a      	str	r2, [r3, #0]
    test_assert(b == true, "not in range");
    b = chTimeIsInRangeX((systime_t)10, (systime_t)100, (systime_t)10);
    test_assert(b == false, "in range");
  }
  test_end_step(3);
}
 8000a16:	4770      	bx	lr
 8000a18:	2000149c 	.word	0x2000149c
 8000a1c:	00000000 	.word	0x00000000

08000a20 <rt_test_003_001_execute>:
  test_set_step(1);
 8000a20:	4b04      	ldr	r3, [pc, #16]	; (8000a34 <rt_test_003_001_execute+0x14>)
 8000a22:	2101      	movs	r1, #1
 8000a24:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a28:	6019      	str	r1, [r3, #0]
 8000a2a:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8000a2c:	6a53      	ldr	r3, [r2, #36]	; 0x24
    while (time == chVTGetSystemTimeX()) {
 8000a2e:	4299      	cmp	r1, r3
 8000a30:	d0fc      	beq.n	8000a2c <rt_test_003_001_execute+0xc>
}
 8000a32:	4770      	bx	lr
 8000a34:	2000149c 	.word	0x2000149c
	...

08000a40 <rt_test_002_003_execute>:

static void rt_test_002_003_execute(void) {

  /* [2.3.1] Testing chSysSuspend(), chSysDisable() and
     chSysEnable().*/
  test_set_step(1);
 8000a40:	4b07      	ldr	r3, [pc, #28]	; (8000a60 <rt_test_002_003_execute+0x20>)
 8000a42:	2201      	movs	r2, #1
 8000a44:	601a      	str	r2, [r3, #0]
 8000a46:	2320      	movs	r3, #32
 8000a48:	f383 8811 	msr	BASEPRI, r3
  __ASM volatile ("cpsie i" : : : "memory");
 8000a4c:	b662      	cpsie	i
  __ASM volatile ("cpsid i" : : : "memory");
 8000a4e:	b672      	cpsid	i
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8000a50:	f383 8811 	msr	BASEPRI, r3
  __ASM volatile ("cpsie i" : : : "memory");
 8000a54:	b662      	cpsie	i
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8000a56:	2300      	movs	r3, #0
 8000a58:	f383 8811 	msr	BASEPRI, r3
  __ASM volatile ("cpsie i" : : : "memory");
 8000a5c:	b662      	cpsie	i
    chSysDisable();
    chSysSuspend();
    chSysEnable();
  }
  test_end_step(1);
}
 8000a5e:	4770      	bx	lr
 8000a60:	2000149c 	.word	0x2000149c
	...

08000a70 <test_terminate_threads>:
 * Sets a termination request in all the test-spawned threads.
 */
void test_terminate_threads(void) {
  unsigned i;

  for (i = 0; i < MAX_THREADS; i++)
 8000a70:	4b0b      	ldr	r3, [pc, #44]	; (8000aa0 <test_terminate_threads+0x30>)
void test_terminate_threads(void) {
 8000a72:	b430      	push	{r4, r5}
 8000a74:	f103 0014 	add.w	r0, r3, #20
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8000a78:	2520      	movs	r5, #32
 8000a7a:	2400      	movs	r4, #0
    if (threads[i])
 8000a7c:	f853 2b04 	ldr.w	r2, [r3], #4
 8000a80:	b14a      	cbz	r2, 8000a96 <test_terminate_threads+0x26>
 8000a82:	f385 8811 	msr	BASEPRI, r5
 * @api
 */
void chThdTerminate(thread_t *tp) {

  chSysLock();
  tp->flags |= CH_FLAG_TERMINATE;
 8000a86:	f892 1021 	ldrb.w	r1, [r2, #33]	; 0x21
 8000a8a:	f041 0104 	orr.w	r1, r1, #4
 8000a8e:	f882 1021 	strb.w	r1, [r2, #33]	; 0x21
 8000a92:	f384 8811 	msr	BASEPRI, r4
  for (i = 0; i < MAX_THREADS; i++)
 8000a96:	4283      	cmp	r3, r0
 8000a98:	d1f0      	bne.n	8000a7c <test_terminate_threads+0xc>
      chThdTerminate(threads[i]);
}
 8000a9a:	bc30      	pop	{r4, r5}
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop
 8000aa0:	200014b4 	.word	0x200014b4
	...

08000ab0 <test_printn.part.0>:

  if (!n)
    streamPut(test_chp, '0');
  else {
    p = buf;
    while (n)
 8000ab0:	b310      	cbz	r0, 8000af8 <test_printn.part.0+0x48>
void test_printn(uint32_t n) {
 8000ab2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ab4:	b085      	sub	sp, #20
    p = buf;
 8000ab6:	466c      	mov	r4, sp
      *p++ = (n % 10) + '0', n /= 10;
 8000ab8:	4f10      	ldr	r7, [pc, #64]	; (8000afc <test_printn.part.0+0x4c>)
    p = buf;
 8000aba:	4622      	mov	r2, r4
      *p++ = (n % 10) + '0', n /= 10;
 8000abc:	fba7 1300 	umull	r1, r3, r7, r0
 8000ac0:	08db      	lsrs	r3, r3, #3
 8000ac2:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8000ac6:	eba0 0141 	sub.w	r1, r0, r1, lsl #1
 8000aca:	4606      	mov	r6, r0
 8000acc:	3130      	adds	r1, #48	; 0x30
 8000ace:	b2c9      	uxtb	r1, r1
    while (n)
 8000ad0:	2e09      	cmp	r6, #9
 8000ad2:	4615      	mov	r5, r2
      *p++ = (n % 10) + '0', n /= 10;
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f802 1b01 	strb.w	r1, [r2], #1
    while (n)
 8000ada:	d8ef      	bhi.n	8000abc <test_printn.part.0+0xc>
    while (p > buf)
 8000adc:	42a2      	cmp	r2, r4
 8000ade:	d909      	bls.n	8000af4 <test_printn.part.0+0x44>
 8000ae0:	4e07      	ldr	r6, [pc, #28]	; (8000b00 <test_printn.part.0+0x50>)
 8000ae2:	e001      	b.n	8000ae8 <test_printn.part.0+0x38>
 8000ae4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
      streamPut(test_chp, *--p);
 8000ae8:	6830      	ldr	r0, [r6, #0]
 8000aea:	6803      	ldr	r3, [r0, #0]
 8000aec:	68db      	ldr	r3, [r3, #12]
 8000aee:	4798      	blx	r3
    while (p > buf)
 8000af0:	42ac      	cmp	r4, r5
 8000af2:	d1f7      	bne.n	8000ae4 <test_printn.part.0+0x34>
  }
}
 8000af4:	b005      	add	sp, #20
 8000af6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop
 8000afc:	cccccccd 	.word	0xcccccccd
 8000b00:	200013f0 	.word	0x200013f0
	...

08000b10 <test_printn>:
  if (!n)
 8000b10:	b928      	cbnz	r0, 8000b1e <test_printn+0xe>
    streamPut(test_chp, '0');
 8000b12:	4b04      	ldr	r3, [pc, #16]	; (8000b24 <test_printn+0x14>)
 8000b14:	6818      	ldr	r0, [r3, #0]
 8000b16:	6803      	ldr	r3, [r0, #0]
 8000b18:	2130      	movs	r1, #48	; 0x30
 8000b1a:	68db      	ldr	r3, [r3, #12]
 8000b1c:	4718      	bx	r3
 8000b1e:	f7ff bfc7 	b.w	8000ab0 <test_printn.part.0>
 8000b22:	bf00      	nop
 8000b24:	200013f0 	.word	0x200013f0
	...

08000b30 <test_emit_token>:
 8000b30:	2320      	movs	r3, #32
 8000b32:	f383 8811 	msr	BASEPRI, r3
 * @api
 */
void test_emit_token(char token) {

  osalSysLock();
  if (test_tokp < &test_tokens_buffer[TEST_CFG_MAX_TOKENS])
 8000b36:	4a06      	ldr	r2, [pc, #24]	; (8000b50 <test_emit_token+0x20>)
 8000b38:	4906      	ldr	r1, [pc, #24]	; (8000b54 <test_emit_token+0x24>)
 8000b3a:	6813      	ldr	r3, [r2, #0]
 8000b3c:	428b      	cmp	r3, r1
 8000b3e:	d202      	bcs.n	8000b46 <test_emit_token+0x16>
    *test_tokp++ = token;
 8000b40:	1c59      	adds	r1, r3, #1
 8000b42:	7018      	strb	r0, [r3, #0]
 8000b44:	6011      	str	r1, [r2, #0]
 8000b46:	2300      	movs	r3, #0
 8000b48:	f383 8811 	msr	BASEPRI, r3
  osalSysUnlock();
}
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop
 8000b50:	200014b0 	.word	0x200014b0
 8000b54:	200014b0 	.word	0x200014b0
	...

08000b60 <obj_write>:
  return false;
}

static bool obj_write(objects_cache_t *ocp,
                      oc_object_t *objp,
                      bool async) {
 8000b60:	b508      	push	{r3, lr}
  (void)ocp;
  (void)async;

  test_emit_token('A' + objp->obj_key);
 8000b62:	6948      	ldr	r0, [r1, #20]
 8000b64:	3041      	adds	r0, #65	; 0x41
 8000b66:	b2c0      	uxtb	r0, r0
 8000b68:	f7ff ffe2 	bl	8000b30 <test_emit_token>

  return false;
}
 8000b6c:	2000      	movs	r0, #0
 8000b6e:	bd08      	pop	{r3, pc}

08000b70 <dis_func0>:
 * Shared code.
 ****************************************************************************/

static bool exit_flag;

static int dis_func0(void) {
 8000b70:	b508      	push	{r3, lr}

  test_emit_token('0');
 8000b72:	2030      	movs	r0, #48	; 0x30
 8000b74:	f7ff ffdc 	bl	8000b30 <test_emit_token>

  return (msg_t)0x55AA;
}
 8000b78:	f245 50aa 	movw	r0, #21930	; 0x55aa
 8000b7c:	bd08      	pop	{r3, pc}
 8000b7e:	bf00      	nop

08000b80 <dis_func1>:

static msg_t dis_func1(msg_t a) {
 8000b80:	b510      	push	{r4, lr}
 8000b82:	4604      	mov	r4, r0

  test_emit_token((char)a);
 8000b84:	b2c0      	uxtb	r0, r0
 8000b86:	f7ff ffd3 	bl	8000b30 <test_emit_token>

  return (msg_t)a;
}
 8000b8a:	4620      	mov	r0, r4
 8000b8c:	bd10      	pop	{r4, pc}
 8000b8e:	bf00      	nop

08000b90 <dis_func2>:

static msg_t dis_func2(msg_t a, msg_t b) {
 8000b90:	b538      	push	{r3, r4, r5, lr}
 8000b92:	460d      	mov	r5, r1
 8000b94:	4604      	mov	r4, r0

  test_emit_token((char)a);
 8000b96:	b2c0      	uxtb	r0, r0
 8000b98:	f7ff ffca 	bl	8000b30 <test_emit_token>
  test_emit_token((char)b);
 8000b9c:	b2e8      	uxtb	r0, r5
 8000b9e:	f7ff ffc7 	bl	8000b30 <test_emit_token>

  return (msg_t)a;
}
 8000ba2:	4620      	mov	r0, r4
 8000ba4:	bd38      	pop	{r3, r4, r5, pc}
 8000ba6:	bf00      	nop
	...

08000bb0 <dis_func3>:

static msg_t dis_func3(msg_t a, msg_t b, msg_t c) {
 8000bb0:	b570      	push	{r4, r5, r6, lr}
 8000bb2:	460e      	mov	r6, r1
 8000bb4:	4604      	mov	r4, r0

  test_emit_token((char)a);
 8000bb6:	b2c0      	uxtb	r0, r0
static msg_t dis_func3(msg_t a, msg_t b, msg_t c) {
 8000bb8:	4615      	mov	r5, r2
  test_emit_token((char)a);
 8000bba:	f7ff ffb9 	bl	8000b30 <test_emit_token>
  test_emit_token((char)b);
 8000bbe:	b2f0      	uxtb	r0, r6
 8000bc0:	f7ff ffb6 	bl	8000b30 <test_emit_token>
  test_emit_token((char)c);
 8000bc4:	b2e8      	uxtb	r0, r5
 8000bc6:	f7ff ffb3 	bl	8000b30 <test_emit_token>

  return (msg_t)a;
}
 8000bca:	4620      	mov	r0, r4
 8000bcc:	bd70      	pop	{r4, r5, r6, pc}
 8000bce:	bf00      	nop

08000bd0 <dis_func4>:

static msg_t dis_func4(msg_t a, msg_t b, msg_t c, msg_t d) {
 8000bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bd2:	460f      	mov	r7, r1
 8000bd4:	4604      	mov	r4, r0

  test_emit_token((char)a);
 8000bd6:	b2c0      	uxtb	r0, r0
static msg_t dis_func4(msg_t a, msg_t b, msg_t c, msg_t d) {
 8000bd8:	4616      	mov	r6, r2
 8000bda:	461d      	mov	r5, r3
  test_emit_token((char)a);
 8000bdc:	f7ff ffa8 	bl	8000b30 <test_emit_token>
  test_emit_token((char)b);
 8000be0:	b2f8      	uxtb	r0, r7
 8000be2:	f7ff ffa5 	bl	8000b30 <test_emit_token>
  test_emit_token((char)c);
 8000be6:	b2f0      	uxtb	r0, r6
 8000be8:	f7ff ffa2 	bl	8000b30 <test_emit_token>
  test_emit_token((char)d);
 8000bec:	b2e8      	uxtb	r0, r5
 8000bee:	f7ff ff9f 	bl	8000b30 <test_emit_token>

  return (msg_t)a;
}
 8000bf2:	4620      	mov	r0, r4
 8000bf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000bf6:	bf00      	nop
	...

08000c00 <dis_func_end>:

static int dis_func_end(void) {
 8000c00:	b508      	push	{r3, lr}

  test_emit_token('Z');
 8000c02:	205a      	movs	r0, #90	; 0x5a
 8000c04:	f7ff ff94 	bl	8000b30 <test_emit_token>
  exit_flag = true;
 8000c08:	4b02      	ldr	r3, [pc, #8]	; (8000c14 <dis_func_end+0x14>)
 8000c0a:	2201      	movs	r2, #1
 8000c0c:	701a      	strb	r2, [r3, #0]

  return (msg_t)0xAA55;
}
 8000c0e:	f64a 2055 	movw	r0, #43605	; 0xaa55
 8000c12:	bd08      	pop	{r3, pc}
 8000c14:	20000b6c 	.word	0x20000b6c
	...

08000c20 <h3>:
static void h3(eventid_t id) {(void)id;test_emit_token('C');}
 8000c20:	2043      	movs	r0, #67	; 0x43
 8000c22:	f7ff bf85 	b.w	8000b30 <test_emit_token>
 8000c26:	bf00      	nop
	...

08000c30 <h2>:
static void h2(eventid_t id) {(void)id;test_emit_token('B');}
 8000c30:	2042      	movs	r0, #66	; 0x42
 8000c32:	f7ff bf7d 	b.w	8000b30 <test_emit_token>
 8000c36:	bf00      	nop
	...

08000c40 <h1>:
static void h1(eventid_t id) {(void)id;test_emit_token('A');}
 8000c40:	2041      	movs	r0, #65	; 0x41
 8000c42:	f7ff bf75 	b.w	8000b30 <test_emit_token>
 8000c46:	bf00      	nop
	...

08000c50 <thread>:
 * Shared code.
 ****************************************************************************/

static THD_FUNCTION(thread, p) {

  test_emit_token(*(char *)p);
 8000c50:	7800      	ldrb	r0, [r0, #0]
 8000c52:	f7ff bf6d 	b.w	8000b30 <test_emit_token>
 8000c56:	bf00      	nop
	...

08000c60 <dyn_thread1>:
 8000c60:	f7ff bff6 	b.w	8000c50 <thread>
	...

08000c70 <test_println>:
void test_println(const char *msgp) {
 8000c70:	b570      	push	{r4, r5, r6, lr}
  while (*msgp)
 8000c72:	7801      	ldrb	r1, [r0, #0]
 8000c74:	b189      	cbz	r1, 8000c9a <test_println+0x2a>
 8000c76:	4d0a      	ldr	r5, [pc, #40]	; (8000ca0 <test_println+0x30>)
 8000c78:	4604      	mov	r4, r0
    streamPut(test_chp, *msgp++);
 8000c7a:	6828      	ldr	r0, [r5, #0]
 8000c7c:	6803      	ldr	r3, [r0, #0]
 8000c7e:	68db      	ldr	r3, [r3, #12]
 8000c80:	4798      	blx	r3
  while (*msgp)
 8000c82:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8000c86:	2900      	cmp	r1, #0
 8000c88:	d1f7      	bne.n	8000c7a <test_println+0xa>
  streamWrite(test_chp, (const uint8_t *)"\r\n", 2);
 8000c8a:	6828      	ldr	r0, [r5, #0]
 8000c8c:	4905      	ldr	r1, [pc, #20]	; (8000ca4 <test_println+0x34>)
 8000c8e:	6803      	ldr	r3, [r0, #0]
}
 8000c90:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  streamWrite(test_chp, (const uint8_t *)"\r\n", 2);
 8000c94:	685b      	ldr	r3, [r3, #4]
 8000c96:	2202      	movs	r2, #2
 8000c98:	4718      	bx	r3
 8000c9a:	4d01      	ldr	r5, [pc, #4]	; (8000ca0 <test_println+0x30>)
 8000c9c:	e7f5      	b.n	8000c8a <test_println+0x1a>
 8000c9e:	bf00      	nop
 8000ca0:	200013f0 	.word	0x200013f0
 8000ca4:	0800901c 	.word	0x0800901c
	...

08000cb0 <test_print>:
  while (*msgp)
 8000cb0:	7801      	ldrb	r1, [r0, #0]
 8000cb2:	b159      	cbz	r1, 8000ccc <test_print+0x1c>
void test_print(const char *msgp) {
 8000cb4:	b538      	push	{r3, r4, r5, lr}
 8000cb6:	4d06      	ldr	r5, [pc, #24]	; (8000cd0 <test_print+0x20>)
 8000cb8:	4604      	mov	r4, r0
    streamPut(test_chp, *msgp++);
 8000cba:	6828      	ldr	r0, [r5, #0]
 8000cbc:	6803      	ldr	r3, [r0, #0]
 8000cbe:	68db      	ldr	r3, [r3, #12]
 8000cc0:	4798      	blx	r3
  while (*msgp)
 8000cc2:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8000cc6:	2900      	cmp	r1, #0
 8000cc8:	d1f7      	bne.n	8000cba <test_print+0xa>
}
 8000cca:	bd38      	pop	{r3, r4, r5, pc}
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop
 8000cd0:	200013f0 	.word	0x200013f0
	...

08000ce0 <_test_assert_sequence>:
bool _test_assert_sequence(char *expected, const char *msg) {
 8000ce0:	b4f0      	push	{r4, r5, r6, r7}
  while (cp < test_tokp) {
 8000ce2:	4e0d      	ldr	r6, [pc, #52]	; (8000d18 <_test_assert_sequence+0x38>)
  char *cp = test_tokens_buffer;
 8000ce4:	4f0d      	ldr	r7, [pc, #52]	; (8000d1c <_test_assert_sequence+0x3c>)
  while (cp < test_tokp) {
 8000ce6:	6835      	ldr	r5, [r6, #0]
  char *cp = test_tokens_buffer;
 8000ce8:	463b      	mov	r3, r7
 8000cea:	e005      	b.n	8000cf8 <_test_assert_sequence+0x18>
    if (*cp++ != *expected++)
 8000cec:	f813 4b01 	ldrb.w	r4, [r3], #1
 8000cf0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000cf4:	4294      	cmp	r4, r2
 8000cf6:	d106      	bne.n	8000d06 <_test_assert_sequence+0x26>
  while (cp < test_tokp) {
 8000cf8:	429d      	cmp	r5, r3
 8000cfa:	d8f7      	bhi.n	8000cec <_test_assert_sequence+0xc>
  if (*expected)
 8000cfc:	7800      	ldrb	r0, [r0, #0]
 8000cfe:	b910      	cbnz	r0, 8000d06 <_test_assert_sequence+0x26>
  test_tokp = test_tokens_buffer;
 8000d00:	6037      	str	r7, [r6, #0]
}
 8000d02:	bcf0      	pop	{r4, r5, r6, r7}
 8000d04:	4770      	bx	lr
  test_local_fail      = true;
 8000d06:	4c06      	ldr	r4, [pc, #24]	; (8000d20 <_test_assert_sequence+0x40>)
  test_global_fail     = true;
 8000d08:	4a06      	ldr	r2, [pc, #24]	; (8000d24 <_test_assert_sequence+0x44>)
  test_failure_message = msg;
 8000d0a:	4b07      	ldr	r3, [pc, #28]	; (8000d28 <_test_assert_sequence+0x48>)
  test_local_fail      = true;
 8000d0c:	2001      	movs	r0, #1
 8000d0e:	7020      	strb	r0, [r4, #0]
  test_global_fail     = true;
 8000d10:	7010      	strb	r0, [r2, #0]
}
 8000d12:	bcf0      	pop	{r4, r5, r6, r7}
  test_failure_message = msg;
 8000d14:	6019      	str	r1, [r3, #0]
}
 8000d16:	4770      	bx	lr
 8000d18:	200014b0 	.word	0x200014b0
 8000d1c:	200014a0 	.word	0x200014a0
 8000d20:	20001498 	.word	0x20001498
 8000d24:	200013f8 	.word	0x200013f8
 8000d28:	200013f4 	.word	0x200013f4
 8000d2c:	00000000 	.word	0x00000000

08000d30 <rt_test_009_002_execute>:
  test_set_step(1);
 8000d30:	4a0f      	ldr	r2, [pc, #60]	; (8000d70 <rt_test_009_002_execute+0x40>)
static void rt_test_009_002_execute(void) {
 8000d32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  test_set_step(1);
 8000d34:	2601      	movs	r6, #1
 8000d36:	4f0f      	ldr	r7, [pc, #60]	; (8000d74 <rt_test_009_002_execute+0x44>)
 8000d38:	6016      	str	r6, [r2, #0]
 8000d3a:	2507      	movs	r5, #7
void chEvtDispatch(const evhandler_t *handlers, eventmask_t events) {
  eventid_t eid;

  chDbgCheck(handlers != NULL);

  eid = (eventid_t)0;
 8000d3c:	2400      	movs	r4, #0
  while (events != (eventmask_t)0) {
    if ((events & EVENT_MASK(eid)) != (eventmask_t)0) {
 8000d3e:	fa25 f304 	lsr.w	r3, r5, r4
 8000d42:	f013 0f01 	tst.w	r3, #1
      chDbgAssert(handlers[eid] != NULL, "null handler");
      events &= ~EVENT_MASK(eid);
 8000d46:	fa06 f204 	lsl.w	r2, r6, r4
      handlers[eid](eid);
 8000d4a:	4620      	mov	r0, r4
    if ((events & EVENT_MASK(eid)) != (eventmask_t)0) {
 8000d4c:	d00d      	beq.n	8000d6a <rt_test_009_002_execute+0x3a>
      handlers[eid](eid);
 8000d4e:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
      events &= ~EVENT_MASK(eid);
 8000d52:	ea25 0502 	bic.w	r5, r5, r2
    }
    eid++;
 8000d56:	3401      	adds	r4, #1
      handlers[eid](eid);
 8000d58:	4798      	blx	r3
  while (events != (eventmask_t)0) {
 8000d5a:	2d00      	cmp	r5, #0
 8000d5c:	d1ef      	bne.n	8000d3e <rt_test_009_002_execute+0xe>
}
 8000d5e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    test_assert_sequence("ABC", "invalid sequence");
 8000d62:	4905      	ldr	r1, [pc, #20]	; (8000d78 <rt_test_009_002_execute+0x48>)
 8000d64:	4805      	ldr	r0, [pc, #20]	; (8000d7c <rt_test_009_002_execute+0x4c>)
 8000d66:	f7ff bfbb 	b.w	8000ce0 <_test_assert_sequence>
    eid++;
 8000d6a:	3401      	adds	r4, #1
 8000d6c:	e7e7      	b.n	8000d3e <rt_test_009_002_execute+0xe>
 8000d6e:	bf00      	nop
 8000d70:	2000149c 	.word	0x2000149c
 8000d74:	0800aed8 	.word	0x0800aed8
 8000d78:	08009020 	.word	0x08009020
 8000d7c:	08009034 	.word	0x08009034

08000d80 <print_line>:
static void print_line(void) {
 8000d80:	b570      	push	{r4, r5, r6, lr}
 8000d82:	4d08      	ldr	r5, [pc, #32]	; (8000da4 <print_line+0x24>)
 8000d84:	244c      	movs	r4, #76	; 0x4c
    streamPut(test_chp, '-');
 8000d86:	6828      	ldr	r0, [r5, #0]
 8000d88:	6803      	ldr	r3, [r0, #0]
 8000d8a:	212d      	movs	r1, #45	; 0x2d
 8000d8c:	68db      	ldr	r3, [r3, #12]
 8000d8e:	4798      	blx	r3
  for (i = 0; i < 76; i++)
 8000d90:	3c01      	subs	r4, #1
 8000d92:	d1f8      	bne.n	8000d86 <print_line+0x6>
  streamWrite(test_chp, (const uint8_t *)"\r\n", 2);
 8000d94:	6828      	ldr	r0, [r5, #0]
 8000d96:	4904      	ldr	r1, [pc, #16]	; (8000da8 <print_line+0x28>)
 8000d98:	6803      	ldr	r3, [r0, #0]
}
 8000d9a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  streamWrite(test_chp, (const uint8_t *)"\r\n", 2);
 8000d9e:	685b      	ldr	r3, [r3, #4]
 8000da0:	2202      	movs	r2, #2
 8000da2:	4718      	bx	r3
 8000da4:	200013f0 	.word	0x200013f0
 8000da8:	0800901c 	.word	0x0800901c
 8000dac:	00000000 	.word	0x00000000

08000db0 <_port_irq_epilogue>:
 8000db0:	2320      	movs	r3, #32
 8000db2:	f383 8811 	msr	BASEPRI, r3
 * @brief   Exception exit redirection to _port_switch_from_isr().
 */
void _port_irq_epilogue(void) {

  port_lock_from_isr();
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 8000db6:	4b0d      	ldr	r3, [pc, #52]	; (8000dec <_port_irq_epilogue+0x3c>)
 8000db8:	685b      	ldr	r3, [r3, #4]
 8000dba:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 8000dbe:	d102      	bne.n	8000dc6 <_port_irq_epilogue+0x16>
 8000dc0:	f383 8811 	msr	BASEPRI, r3
    /* Note, returning without unlocking is intentional, this is done in
       order to keep the rest of the context switch atomic.*/
    return;
  }
  port_unlock_from_isr();
}
 8000dc4:	4770      	bx	lr
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8000dc6:	f3ef 8309 	mrs	r3, PSP
    s_psp -= sizeof (struct port_extctx);
 8000dca:	3b20      	subs	r3, #32
    ectxp->xpsr = 0x01000000U;
 8000dcc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000dd0:	61da      	str	r2, [r3, #28]
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8000dd2:	f383 8809 	msr	PSP, r3
 * @retval false        if preemption is not required.
 *
 * @special
 */
bool chSchIsPreemptionRequired(void) {
  tprio_t p1 = firstprio(&ch.rlist.queue);
 8000dd6:	4a06      	ldr	r2, [pc, #24]	; (8000df0 <_port_irq_epilogue+0x40>)
 8000dd8:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = currp->prio;
 8000dda:	6992      	ldr	r2, [r2, #24]
    if (chSchIsPreemptionRequired()) {
 8000ddc:	6889      	ldr	r1, [r1, #8]
 8000dde:	6892      	ldr	r2, [r2, #8]
 8000de0:	4291      	cmp	r1, r2
      ectxp->pc = (uint32_t)_port_switch_from_isr;
 8000de2:	bf8c      	ite	hi
 8000de4:	4a03      	ldrhi	r2, [pc, #12]	; (8000df4 <_port_irq_epilogue+0x44>)
      ectxp->pc = (uint32_t)_port_exit_from_isr;
 8000de6:	4a04      	ldrls	r2, [pc, #16]	; (8000df8 <_port_irq_epilogue+0x48>)
 8000de8:	619a      	str	r2, [r3, #24]
 8000dea:	4770      	bx	lr
 8000dec:	e000ed00 	.word	0xe000ed00
 8000df0:	200009b0 	.word	0x200009b0
 8000df4:	080002e3 	.word	0x080002e3
 8000df8:	080002e6 	.word	0x080002e6
 8000dfc:	00000000 	.word	0x00000000

08000e00 <chCoreAllocAlignedI>:
  p = (uint8_t *)MEM_ALIGN_PREV(ch_memcore.topmem - size, align);
 8000e00:	4a08      	ldr	r2, [pc, #32]	; (8000e24 <chCoreAllocAlignedI+0x24>)
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @iclass
 */
static inline void *chCoreAllocAlignedI(size_t size, unsigned align) {
 8000e02:	b410      	push	{r4}
  if ((prev < ch_memcore.basemem) || (prev > ch_memcore.topmem)) {
 8000e04:	e9d2 3400 	ldrd	r3, r4, [r2]
  p = (uint8_t *)MEM_ALIGN_PREV(ch_memcore.topmem - size, align);
 8000e08:	4249      	negs	r1, r1
 8000e0a:	1a20      	subs	r0, r4, r0
 8000e0c:	4008      	ands	r0, r1
  if ((prev < ch_memcore.basemem) || (prev > ch_memcore.topmem)) {
 8000e0e:	4298      	cmp	r0, r3
 8000e10:	d304      	bcc.n	8000e1c <chCoreAllocAlignedI+0x1c>
 8000e12:	4284      	cmp	r4, r0
 8000e14:	d302      	bcc.n	8000e1c <chCoreAllocAlignedI+0x1c>

  return chCoreAllocAlignedWithOffsetI(size, align, 0U);
}
 8000e16:	bc10      	pop	{r4}
  ch_memcore.topmem = prev;
 8000e18:	6050      	str	r0, [r2, #4]
 8000e1a:	4770      	bx	lr
    return NULL;
 8000e1c:	2000      	movs	r0, #0
 8000e1e:	bc10      	pop	{r4}
 8000e20:	4770      	bx	lr
 8000e22:	bf00      	nop
 8000e24:	20000b48 	.word	0x20000b48
	...

08000e30 <chPoolAlloc>:
 * @return              The pointer to the allocated object.
 * @retval NULL         if pool is empty.
 *
 * @api
 */
void *chPoolAlloc(memory_pool_t *mp) {
 8000e30:	b508      	push	{r3, lr}
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8000e32:	2220      	movs	r2, #32
 8000e34:	4603      	mov	r3, r0
 8000e36:	f382 8811 	msr	BASEPRI, r2
  objp = mp->next;
 8000e3a:	6800      	ldr	r0, [r0, #0]
  if (objp != NULL) {
 8000e3c:	b128      	cbz	r0, 8000e4a <chPoolAlloc+0x1a>
    mp->next = mp->next->next;
 8000e3e:	6802      	ldr	r2, [r0, #0]
 8000e40:	601a      	str	r2, [r3, #0]
 8000e42:	2300      	movs	r3, #0
 8000e44:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  objp = chPoolAllocI(mp);
  chSysUnlock();

  return objp;
}
 8000e48:	bd08      	pop	{r3, pc}
  else if (mp->provider != NULL) {
 8000e4a:	68da      	ldr	r2, [r3, #12]
 8000e4c:	2a00      	cmp	r2, #0
 8000e4e:	d0f8      	beq.n	8000e42 <chPoolAlloc+0x12>
    objp = mp->provider(mp->object_size, mp->align);
 8000e50:	e9d3 0101 	ldrd	r0, r1, [r3, #4]
 8000e54:	4790      	blx	r2
 8000e56:	2300      	movs	r3, #0
 8000e58:	f383 8811 	msr	BASEPRI, r3
}
 8000e5c:	bd08      	pop	{r3, pc}
 8000e5e:	bf00      	nop

08000e60 <oslib_test_007_001_execute>:
static void oslib_test_007_001_execute(void) {
 8000e60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  test_set_step(1);
 8000e64:	4e3b      	ldr	r6, [pc, #236]	; (8000f54 <oslib_test_007_001_execute+0xf4>)
 8000e66:	4b3c      	ldr	r3, [pc, #240]	; (8000f58 <oslib_test_007_001_execute+0xf8>)
 8000e68:	4c3c      	ldr	r4, [pc, #240]	; (8000f5c <oslib_test_007_001_execute+0xfc>)
 8000e6a:	2201      	movs	r2, #1
 8000e6c:	6032      	str	r2, [r6, #0]
 8000e6e:	2520      	movs	r5, #32
 8000e70:	2204      	movs	r2, #4
 8000e72:	2000      	movs	r0, #0
 8000e74:	f385 8811 	msr	BASEPRI, r5
  chDbgCheckClassI();
  chDbgCheck((mp != NULL) &&
             (objp != NULL) &&
             MEM_IS_ALIGNED(objp, mp->align));

  php->next = mp->next;
 8000e78:	6821      	ldr	r1, [r4, #0]
 8000e7a:	6019      	str	r1, [r3, #0]
  mp->next = php;
 8000e7c:	6023      	str	r3, [r4, #0]
 8000e7e:	f380 8811 	msr	BASEPRI, r0
    p = (void *)(((uint8_t *)p) + mp->object_size);
 8000e82:	6861      	ldr	r1, [r4, #4]
  while (n != 0U) {
 8000e84:	3a01      	subs	r2, #1
    p = (void *)(((uint8_t *)p) + mp->object_size);
 8000e86:	440b      	add	r3, r1
  while (n != 0U) {
 8000e88:	d1f4      	bne.n	8000e74 <oslib_test_007_001_execute+0x14>
  test_set_step(2);
 8000e8a:	2302      	movs	r3, #2
      test_assert(chPoolAlloc(&mp1) != NULL, "list empty");
 8000e8c:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 8000f5c <oslib_test_007_001_execute+0xfc>
 8000e90:	4f33      	ldr	r7, [pc, #204]	; (8000f60 <oslib_test_007_001_execute+0x100>)
  test_set_step(2);
 8000e92:	6033      	str	r3, [r6, #0]
 8000e94:	2504      	movs	r5, #4
      test_assert(chPoolAlloc(&mp1) != NULL, "list empty");
 8000e96:	4640      	mov	r0, r8
 8000e98:	f7ff ffca 	bl	8000e30 <chPoolAlloc>
 8000e9c:	3800      	subs	r0, #0
 8000e9e:	bf18      	it	ne
 8000ea0:	2001      	movne	r0, #1
 8000ea2:	4639      	mov	r1, r7
 8000ea4:	f7ff fd9c 	bl	80009e0 <_test_assert>
 8000ea8:	2800      	cmp	r0, #0
 8000eaa:	d150      	bne.n	8000f4e <oslib_test_007_001_execute+0xee>
    for (i = 0; i < MEMORY_POOL_SIZE; i++)
 8000eac:	3d01      	subs	r5, #1
 8000eae:	d1f2      	bne.n	8000e96 <oslib_test_007_001_execute+0x36>
  test_set_step(3);
 8000eb0:	2303      	movs	r3, #3
    test_assert(chPoolAlloc(&mp1) == NULL, "list not empty");
 8000eb2:	482a      	ldr	r0, [pc, #168]	; (8000f5c <oslib_test_007_001_execute+0xfc>)
  test_set_step(3);
 8000eb4:	6033      	str	r3, [r6, #0]
    test_assert(chPoolAlloc(&mp1) == NULL, "list not empty");
 8000eb6:	f7ff ffbb 	bl	8000e30 <chPoolAlloc>
 8000eba:	fab0 f080 	clz	r0, r0
 8000ebe:	4929      	ldr	r1, [pc, #164]	; (8000f64 <oslib_test_007_001_execute+0x104>)
 8000ec0:	0940      	lsrs	r0, r0, #5
 8000ec2:	f7ff fd8d 	bl	80009e0 <_test_assert>
 8000ec6:	2800      	cmp	r0, #0
 8000ec8:	d141      	bne.n	8000f4e <oslib_test_007_001_execute+0xee>
  test_set_step(4);
 8000eca:	4b23      	ldr	r3, [pc, #140]	; (8000f58 <oslib_test_007_001_execute+0xf8>)
 8000ecc:	2204      	movs	r2, #4
 8000ece:	f103 0710 	add.w	r7, r3, #16
 8000ed2:	6032      	str	r2, [r6, #0]
 8000ed4:	2020      	movs	r0, #32
      chPoolFree(&mp1, &objects[i]);
 8000ed6:	461a      	mov	r2, r3
 8000ed8:	f380 8811 	msr	BASEPRI, r0
  php->next = mp->next;
 8000edc:	6821      	ldr	r1, [r4, #0]
 8000ede:	f843 1b04 	str.w	r1, [r3], #4
  mp->next = php;
 8000ee2:	6022      	str	r2, [r4, #0]
 8000ee4:	f385 8811 	msr	BASEPRI, r5
    for (i = 0; i < MEMORY_POOL_SIZE; i++)
 8000ee8:	42bb      	cmp	r3, r7
 8000eea:	d1f4      	bne.n	8000ed6 <oslib_test_007_001_execute+0x76>
  test_set_step(5);
 8000eec:	2305      	movs	r3, #5
      test_assert(chPoolAlloc(&mp1) != NULL, "list empty");
 8000eee:	f8df 806c 	ldr.w	r8, [pc, #108]	; 8000f5c <oslib_test_007_001_execute+0xfc>
 8000ef2:	4f1b      	ldr	r7, [pc, #108]	; (8000f60 <oslib_test_007_001_execute+0x100>)
  test_set_step(5);
 8000ef4:	6033      	str	r3, [r6, #0]
 8000ef6:	2504      	movs	r5, #4
      test_assert(chPoolAlloc(&mp1) != NULL, "list empty");
 8000ef8:	4640      	mov	r0, r8
 8000efa:	f7ff ff99 	bl	8000e30 <chPoolAlloc>
 8000efe:	3800      	subs	r0, #0
 8000f00:	bf18      	it	ne
 8000f02:	2001      	movne	r0, #1
 8000f04:	4639      	mov	r1, r7
 8000f06:	f7ff fd6b 	bl	80009e0 <_test_assert>
 8000f0a:	bb00      	cbnz	r0, 8000f4e <oslib_test_007_001_execute+0xee>
    for (i = 0; i < MEMORY_POOL_SIZE; i++)
 8000f0c:	3d01      	subs	r5, #1
 8000f0e:	d1f3      	bne.n	8000ef8 <oslib_test_007_001_execute+0x98>
  test_set_step(6);
 8000f10:	2306      	movs	r3, #6
    test_assert(chPoolAlloc(&mp1) == NULL, "list not empty");
 8000f12:	4812      	ldr	r0, [pc, #72]	; (8000f5c <oslib_test_007_001_execute+0xfc>)
  test_set_step(6);
 8000f14:	6033      	str	r3, [r6, #0]
    test_assert(chPoolAlloc(&mp1) == NULL, "list not empty");
 8000f16:	f7ff ff8b 	bl	8000e30 <chPoolAlloc>
 8000f1a:	fab0 f080 	clz	r0, r0
 8000f1e:	4911      	ldr	r1, [pc, #68]	; (8000f64 <oslib_test_007_001_execute+0x104>)
 8000f20:	0940      	lsrs	r0, r0, #5
 8000f22:	f7ff fd5d 	bl	80009e0 <_test_assert>
 8000f26:	b990      	cbnz	r0, 8000f4e <oslib_test_007_001_execute+0xee>
  test_set_step(7);
 8000f28:	2107      	movs	r1, #7
  mp->provider = provider;
 8000f2a:	4a0f      	ldr	r2, [pc, #60]	; (8000f68 <oslib_test_007_001_execute+0x108>)
    test_assert(chPoolAlloc(&mp1) == NULL, "provider returned memory");
 8000f2c:	480b      	ldr	r0, [pc, #44]	; (8000f5c <oslib_test_007_001_execute+0xfc>)
  test_set_step(7);
 8000f2e:	6031      	str	r1, [r6, #0]
  mp->object_size = size;
 8000f30:	2304      	movs	r3, #4
  mp->align = align;
 8000f32:	e9c4 3301 	strd	r3, r3, [r4, #4]
  mp->next = NULL;
 8000f36:	6025      	str	r5, [r4, #0]
  mp->provider = provider;
 8000f38:	60e2      	str	r2, [r4, #12]
    test_assert(chPoolAlloc(&mp1) == NULL, "provider returned memory");
 8000f3a:	f7ff ff79 	bl	8000e30 <chPoolAlloc>
 8000f3e:	fab0 f080 	clz	r0, r0
}
 8000f42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    test_assert(chPoolAlloc(&mp1) == NULL, "provider returned memory");
 8000f46:	4909      	ldr	r1, [pc, #36]	; (8000f6c <oslib_test_007_001_execute+0x10c>)
 8000f48:	0940      	lsrs	r0, r0, #5
 8000f4a:	f7ff bd49 	b.w	80009e0 <_test_assert>
}
 8000f4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000f52:	bf00      	nop
 8000f54:	2000149c 	.word	0x2000149c
 8000f58:	20000d60 	.word	0x20000d60
 8000f5c:	20000874 	.word	0x20000874
 8000f60:	08009038 	.word	0x08009038
 8000f64:	08009044 	.word	0x08009044
 8000f68:	08000611 	.word	0x08000611
 8000f6c:	08009054 	.word	0x08009054

08000f70 <chEvtAddEvents>:
 8000f70:	2320      	movs	r3, #32
 8000f72:	f383 8811 	msr	BASEPRI, r3
 *
 * @iclass
 */
static inline eventmask_t chEvtAddEventsI(eventmask_t events) {

  return currp->epending |= events;
 8000f76:	4b04      	ldr	r3, [pc, #16]	; (8000f88 <chEvtAddEvents+0x18>)
 8000f78:	699b      	ldr	r3, [r3, #24]
 8000f7a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f7c:	4310      	orrs	r0, r2
 8000f7e:	6358      	str	r0, [r3, #52]	; 0x34
 8000f80:	2300      	movs	r3, #0
 8000f82:	f383 8811 	msr	BASEPRI, r3
}
 8000f86:	4770      	bx	lr
 8000f88:	200009b0 	.word	0x200009b0
 8000f8c:	00000000 	.word	0x00000000

08000f90 <chEvtUnregister>:
 8000f90:	2320      	movs	r3, #32
 8000f92:	f383 8811 	msr	BASEPRI, r3
  p = (event_listener_t *)esp;
 8000f96:	4603      	mov	r3, r0
 8000f98:	e001      	b.n	8000f9e <chEvtUnregister+0xe>
    if (p->next == elp) {
 8000f9a:	428b      	cmp	r3, r1
 8000f9c:	d007      	beq.n	8000fae <chEvtUnregister+0x1e>
  while (p->next != (event_listener_t *)esp) {
 8000f9e:	461a      	mov	r2, r3
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	4283      	cmp	r3, r0
 8000fa4:	d1f9      	bne.n	8000f9a <chEvtUnregister+0xa>
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	f383 8811 	msr	BASEPRI, r3
}
 8000fac:	4770      	bx	lr
      p->next = elp->next;
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	6013      	str	r3, [r2, #0]
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	f383 8811 	msr	BASEPRI, r3
}
 8000fb8:	4770      	bx	lr
 8000fba:	bf00      	nop
 8000fbc:	0000      	movs	r0, r0
	...

08000fc0 <rt_test_009_001_execute>:
static void rt_test_009_001_execute(void) {
 8000fc0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  esp->next = (event_listener_t *)esp;
 8000fc4:	4c36      	ldr	r4, [pc, #216]	; (80010a0 <rt_test_009_001_execute+0xe0>)
  test_set_step(2);
 8000fc6:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 80010b0 <rt_test_009_001_execute+0xf0>
 8000fca:	6024      	str	r4, [r4, #0]
 8000fcc:	2202      	movs	r2, #2
static void rt_test_009_001_execute(void) {
 8000fce:	b08b      	sub	sp, #44	; 0x2c
  test_set_step(2);
 8000fd0:	f8c8 2000 	str.w	r2, [r8]
 8000fd4:	2720      	movs	r7, #32
 8000fd6:	f387 8811 	msr	BASEPRI, r7
  elp->listener = currp;
 8000fda:	4932      	ldr	r1, [pc, #200]	; (80010a4 <rt_test_009_001_execute+0xe4>)
  elp->next     = esp->next;
 8000fdc:	6820      	ldr	r0, [r4, #0]
  elp->listener = currp;
 8000fde:	698b      	ldr	r3, [r1, #24]
  elp->next     = esp->next;
 8000fe0:	9005      	str	r0, [sp, #20]
  esp->next     = elp;
 8000fe2:	f10d 0914 	add.w	r9, sp, #20
  elp->events   = events;
 8000fe6:	2001      	movs	r0, #1
  elp->flags    = (eventflags_t)0;
 8000fe8:	2500      	movs	r5, #0
  elp->listener = currp;
 8000fea:	9306      	str	r3, [sp, #24]
  elp->wflags   = wflags;
 8000fec:	f04f 33ff 	mov.w	r3, #4294967295
 8000ff0:	e9cd 5308 	strd	r5, r3, [sp, #32]
  elp->events   = events;
 8000ff4:	9007      	str	r0, [sp, #28]
  esp->next     = elp;
 8000ff6:	f8c4 9000 	str.w	r9, [r4]
 8000ffa:	f385 8811 	msr	BASEPRI, r5
 8000ffe:	f387 8811 	msr	BASEPRI, r7
  elp->listener = currp;
 8001002:	6988      	ldr	r0, [r1, #24]
  elp->next     = esp->next;
 8001004:	6821      	ldr	r1, [r4, #0]
 8001006:	9100      	str	r1, [sp, #0]
  elp->events   = events;
 8001008:	e9cd 0201 	strd	r0, r2, [sp, #4]
  elp->wflags   = wflags;
 800100c:	e9cd 5303 	strd	r5, r3, [sp, #12]
  esp->next     = elp;
 8001010:	f8c4 d000 	str.w	sp, [r4]
 8001014:	f385 8811 	msr	BASEPRI, r5
 8001018:	f387 8811 	msr	BASEPRI, r7
  return (bool)(esp != (event_source_t *)esp->next);
 800101c:	6820      	ldr	r0, [r4, #0]
    test_assert_lock(chEvtIsListeningI(&es1), "no listener");
 800101e:	4922      	ldr	r1, [pc, #136]	; (80010a8 <rt_test_009_001_execute+0xe8>)
 8001020:	1b00      	subs	r0, r0, r4
 8001022:	bf18      	it	ne
 8001024:	2001      	movne	r0, #1
 8001026:	f7ff fcdb 	bl	80009e0 <_test_assert>
 800102a:	b120      	cbz	r0, 8001036 <rt_test_009_001_execute+0x76>
 800102c:	f385 8811 	msr	BASEPRI, r5
}
 8001030:	b00b      	add	sp, #44	; 0x2c
 8001032:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001036:	4606      	mov	r6, r0
 8001038:	f380 8811 	msr	BASEPRI, r0
  test_set_step(3);
 800103c:	2303      	movs	r3, #3
    chEvtUnregister(&es1, &el1);
 800103e:	4649      	mov	r1, r9
 8001040:	4620      	mov	r0, r4
  test_set_step(3);
 8001042:	f8c8 3000 	str.w	r3, [r8]
    chEvtUnregister(&es1, &el1);
 8001046:	f7ff ffa3 	bl	8000f90 <chEvtUnregister>
 800104a:	f387 8811 	msr	BASEPRI, r7
 800104e:	6820      	ldr	r0, [r4, #0]
    test_assert_lock(chEvtIsListeningI(&es1), "no listener");
 8001050:	4915      	ldr	r1, [pc, #84]	; (80010a8 <rt_test_009_001_execute+0xe8>)
 8001052:	1b00      	subs	r0, r0, r4
 8001054:	bf18      	it	ne
 8001056:	2001      	movne	r0, #1
 8001058:	f7ff fcc2 	bl	80009e0 <_test_assert>
 800105c:	4605      	mov	r5, r0
 800105e:	b120      	cbz	r0, 800106a <rt_test_009_001_execute+0xaa>
 8001060:	f386 8811 	msr	BASEPRI, r6
}
 8001064:	b00b      	add	sp, #44	; 0x2c
 8001066:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800106a:	f380 8811 	msr	BASEPRI, r0
  test_set_step(4);
 800106e:	2304      	movs	r3, #4
    chEvtUnregister(&es1, &el2);
 8001070:	4669      	mov	r1, sp
 8001072:	4620      	mov	r0, r4
  test_set_step(4);
 8001074:	f8c8 3000 	str.w	r3, [r8]
    chEvtUnregister(&es1, &el2);
 8001078:	f7ff ff8a 	bl	8000f90 <chEvtUnregister>
 800107c:	f387 8811 	msr	BASEPRI, r7
    test_assert_lock(!chEvtIsListeningI(&es1), "stuck listener");
 8001080:	6820      	ldr	r0, [r4, #0]
 8001082:	490a      	ldr	r1, [pc, #40]	; (80010ac <rt_test_009_001_execute+0xec>)
 8001084:	1b00      	subs	r0, r0, r4
 8001086:	fab0 f080 	clz	r0, r0
 800108a:	0940      	lsrs	r0, r0, #5
 800108c:	f7ff fca8 	bl	80009e0 <_test_assert>
 8001090:	2800      	cmp	r0, #0
 8001092:	d1cb      	bne.n	800102c <rt_test_009_001_execute+0x6c>
 8001094:	f380 8811 	msr	BASEPRI, r0
}
 8001098:	b00b      	add	sp, #44	; 0x2c
 800109a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800109e:	bf00      	nop
 80010a0:	20000808 	.word	0x20000808
 80010a4:	200009b0 	.word	0x200009b0
 80010a8:	08009070 	.word	0x08009070
 80010ac:	0800907c 	.word	0x0800907c
 80010b0:	2000149c 	.word	0x2000149c
	...

080010c0 <chTMStopMeasurementX>:
 *
 * @return              The realtime counter value.
 */
__STATIC_FORCEINLINE rtcnt_t port_rt_get_counter_value(void) {

  return DWT->CYCCNT;
 80010c0:	4a0e      	ldr	r2, [pc, #56]	; (80010fc <chTMStopMeasurementX+0x3c>)
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 80010c2:	4b0f      	ldr	r3, [pc, #60]	; (8001100 <chTMStopMeasurementX+0x40>)
 80010c4:	6852      	ldr	r2, [r2, #4]
 80010c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  tmp->last = (now - tmp->last) - offset;
 80010c8:	6881      	ldr	r1, [r0, #8]
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {
 80010ca:	b430      	push	{r4, r5}
  tmp->last = (now - tmp->last) - offset;
 80010cc:	1ad3      	subs	r3, r2, r3
  tmp->cumulative += (rttime_t)tmp->last;
 80010ce:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
  tmp->n++;
 80010d2:	68c2      	ldr	r2, [r0, #12]
  tmp->last = (now - tmp->last) - offset;
 80010d4:	1a5b      	subs	r3, r3, r1
  tmp->n++;
 80010d6:	3201      	adds	r2, #1
  if (tmp->last > tmp->worst) {
 80010d8:	6841      	ldr	r1, [r0, #4]
  tmp->n++;
 80010da:	60c2      	str	r2, [r0, #12]
  tmp->cumulative += (rttime_t)tmp->last;
 80010dc:	18e4      	adds	r4, r4, r3
  if (tmp->last < tmp->best) {
 80010de:	6802      	ldr	r2, [r0, #0]
  tmp->last = (now - tmp->last) - offset;
 80010e0:	6083      	str	r3, [r0, #8]
  tmp->cumulative += (rttime_t)tmp->last;
 80010e2:	f145 0500 	adc.w	r5, r5, #0
  if (tmp->last > tmp->worst) {
 80010e6:	428b      	cmp	r3, r1
    tmp->worst = tmp->last;
 80010e8:	bf88      	it	hi
 80010ea:	6043      	strhi	r3, [r0, #4]
  if (tmp->last < tmp->best) {
 80010ec:	4293      	cmp	r3, r2
  tmp->cumulative += (rttime_t)tmp->last;
 80010ee:	e9c0 4504 	strd	r4, r5, [r0, #16]
    tmp->best = tmp->last;
 80010f2:	bf38      	it	cc
 80010f4:	6003      	strcc	r3, [r0, #0]
}
 80010f6:	bc30      	pop	{r4, r5}
 80010f8:	4770      	bx	lr
 80010fa:	bf00      	nop
 80010fc:	e0001000 	.word	0xe0001000
 8001100:	200009b0 	.word	0x200009b0
	...

08001110 <chTMStartMeasurementX>:
 8001110:	4b01      	ldr	r3, [pc, #4]	; (8001118 <chTMStartMeasurementX+0x8>)
 8001112:	685b      	ldr	r3, [r3, #4]
  tmp->last = chSysGetRealtimeCounterX();
 8001114:	6083      	str	r3, [r0, #8]
}
 8001116:	4770      	bx	lr
 8001118:	e0001000 	.word	0xe0001000
 800111c:	00000000 	.word	0x00000000

08001120 <chThdCreateSuspendedI>:
  tp = (thread_t *)((uint8_t *)tdp->wend -
 8001120:	6883      	ldr	r3, [r0, #8]
  tp->wabase = tdp->wbase;
 8001122:	6841      	ldr	r1, [r0, #4]
  REG_INSERT(tp);
 8001124:	4a1a      	ldr	r2, [pc, #104]	; (8001190 <chThdCreateSuspendedI+0x70>)
thread_t *chThdCreateSuspendedI(const thread_descriptor_t *tdp) {
 8001126:	b4f0      	push	{r4, r5, r6, r7}
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 8001128:	e9d0 7504 	ldrd	r7, r5, [r0, #16]
  tp->state     = CH_STATE_WTSTART;
 800112c:	2602      	movs	r6, #2
  tp->wabase = tdp->wbase;
 800112e:	f843 1c2c 	str.w	r1, [r3, #-44]
  tp->refs      = (trefs_t)1;
 8001132:	2401      	movs	r4, #1
  tp->flags     = CH_FLAG_MODE_STATIC;
 8001134:	2100      	movs	r1, #0
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 8001136:	e943 751b 	strd	r7, r5, [r3, #-108]	; 0x6c
  return _thread_init(tp, tdp->name, tdp->prio);
 800113a:	6805      	ldr	r5, [r0, #0]
 800113c:	68c0      	ldr	r0, [r0, #12]
  tp->flags     = CH_FLAG_MODE_STATIC;
 800113e:	f803 1c27 	strb.w	r1, [r3, #-39]
  tp->state     = CH_STATE_WTSTART;
 8001142:	f803 6c28 	strb.w	r6, [r3, #-40]
  tp->refs      = (trefs_t)1;
 8001146:	f803 4c26 	strb.w	r4, [r3, #-38]
  REG_INSERT(tp);
 800114a:	f843 2c38 	str.w	r2, [r3, #-56]
 800114e:	6954      	ldr	r4, [r2, #20]
  tp->prio      = prio;
 8001150:	f843 0c40 	str.w	r0, [r3, #-64]
  tp->realprio  = prio;
 8001154:	f843 0c0c 	str.w	r0, [r3, #-12]
  tp->name      = name;
 8001158:	f843 5c30 	str.w	r5, [r3, #-48]
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 800115c:	f1a3 006c 	sub.w	r0, r3, #108	; 0x6c
 8001160:	4d0c      	ldr	r5, [pc, #48]	; (8001194 <chThdCreateSuspendedI+0x74>)
 8001162:	f843 0c3c 	str.w	r0, [r3, #-60]
  tp->epending  = (eventmask_t)0;
 8001166:	e943 1105 	strd	r1, r1, [r3, #-20]
  tp = (thread_t *)((uint8_t *)tdp->wend -
 800116a:	f1a3 0048 	sub.w	r0, r3, #72	; 0x48
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 800116e:	f843 5c4c 	str.w	r5, [r3, #-76]
  queue_init(&tp->msgqueue);
 8001172:	f1a3 011c 	sub.w	r1, r3, #28
  list_init(&tp->waiting);
 8001176:	f1a3 0520 	sub.w	r5, r3, #32
  REG_INSERT(tp);
 800117a:	f843 4c34 	str.w	r4, [r3, #-52]
 800117e:	6120      	str	r0, [r4, #16]
 8001180:	6150      	str	r0, [r2, #20]
  tqp->next = (thread_t *)tqp;
 8001182:	e943 5108 	strd	r5, r1, [r3, #-32]
  tqp->prev = (thread_t *)tqp;
 8001186:	f843 1c18 	str.w	r1, [r3, #-24]
}
 800118a:	bcf0      	pop	{r4, r5, r6, r7}
 800118c:	4770      	bx	lr
 800118e:	bf00      	nop
 8001190:	200009b0 	.word	0x200009b0
 8001194:	080002d1 	.word	0x080002d1
	...

080011a0 <wakeup>:
 80011a0:	2320      	movs	r3, #32
 80011a2:	f383 8811 	msr	BASEPRI, r3
  switch (tp->state) {
 80011a6:	f890 3020 	ldrb.w	r3, [r0, #32]
 80011aa:	2b07      	cmp	r3, #7
 80011ac:	d80d      	bhi.n	80011ca <wakeup+0x2a>
 80011ae:	e8df f003 	tbb	[pc, r3]
 80011b2:	0c27      	.short	0x0c27
 80011b4:	0408230c 	.word	0x0408230c
 80011b8:	080c      	.short	0x080c
    chSemFastSignalI(tp->u.wtsemp);
 80011ba:	6a42      	ldr	r2, [r0, #36]	; 0x24
 */
static inline void chSemFastSignalI(semaphore_t *sp) {

  chDbgCheckClassI();

  sp->cnt++;
 80011bc:	6893      	ldr	r3, [r2, #8]
 80011be:	3301      	adds	r3, #1
 80011c0:	6093      	str	r3, [r2, #8]
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->queue.prev->queue.next = tp->queue.next;
 80011c2:	e9d0 3200 	ldrd	r3, r2, [r0]
 80011c6:	6013      	str	r3, [r2, #0]
  tp->queue.next->queue.prev = tp->queue.prev;
 80011c8:	605a      	str	r2, [r3, #4]
static void wakeup(void *p) {
 80011ca:	b410      	push	{r4}
  tp->state = CH_STATE_READY;
 80011cc:	2200      	movs	r2, #0
  tp->u.rdymsg = MSG_TIMEOUT;
 80011ce:	f04f 34ff 	mov.w	r4, #4294967295
  } while (cp->prio >= tp->prio);
 80011d2:	6881      	ldr	r1, [r0, #8]
  cp = (thread_t *)&ch.rlist.queue;
 80011d4:	4b0c      	ldr	r3, [pc, #48]	; (8001208 <wakeup+0x68>)
  tp->u.rdymsg = MSG_TIMEOUT;
 80011d6:	6244      	str	r4, [r0, #36]	; 0x24
  tp->state = CH_STATE_READY;
 80011d8:	f880 2020 	strb.w	r2, [r0, #32]
    cp = cp->queue.next;
 80011dc:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 80011de:	689a      	ldr	r2, [r3, #8]
 80011e0:	428a      	cmp	r2, r1
 80011e2:	d2fb      	bcs.n	80011dc <wakeup+0x3c>
  tp->queue.prev             = cp->queue.prev;
 80011e4:	685a      	ldr	r2, [r3, #4]
 80011e6:	2100      	movs	r1, #0
 80011e8:	e9c0 3200 	strd	r3, r2, [r0]
  tp->queue.prev->queue.next = tp;
 80011ec:	6010      	str	r0, [r2, #0]
  cp->queue.prev             = tp;
 80011ee:	6058      	str	r0, [r3, #4]
 80011f0:	f381 8811 	msr	BASEPRI, r1
}
 80011f4:	bc10      	pop	{r4}
 80011f6:	4770      	bx	lr
    *tp->u.wttrp = NULL;
 80011f8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80011fa:	2200      	movs	r2, #0
 80011fc:	601a      	str	r2, [r3, #0]
    break;
 80011fe:	e7e4      	b.n	80011ca <wakeup+0x2a>
 8001200:	2300      	movs	r3, #0
 8001202:	f383 8811 	msr	BASEPRI, r3
 8001206:	4770      	bx	lr
 8001208:	200009b0 	.word	0x200009b0
 800120c:	00000000 	.word	0x00000000

08001210 <chSchReadyI>:
  tp->state = CH_STATE_READY;
 8001210:	2200      	movs	r2, #0
  } while (cp->prio >= tp->prio);
 8001212:	6881      	ldr	r1, [r0, #8]
  cp = (thread_t *)&ch.rlist.queue;
 8001214:	4b06      	ldr	r3, [pc, #24]	; (8001230 <chSchReadyI+0x20>)
  tp->state = CH_STATE_READY;
 8001216:	f880 2020 	strb.w	r2, [r0, #32]
    cp = cp->queue.next;
 800121a:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 800121c:	689a      	ldr	r2, [r3, #8]
 800121e:	428a      	cmp	r2, r1
 8001220:	d2fb      	bcs.n	800121a <chSchReadyI+0xa>
  tp->queue.prev             = cp->queue.prev;
 8001222:	685a      	ldr	r2, [r3, #4]
 8001224:	e9c0 3200 	strd	r3, r2, [r0]
  tp->queue.prev->queue.next = tp;
 8001228:	6010      	str	r0, [r2, #0]
  cp->queue.prev             = tp;
 800122a:	6058      	str	r0, [r3, #4]
}
 800122c:	4770      	bx	lr
 800122e:	bf00      	nop
 8001230:	200009b0 	.word	0x200009b0
	...

08001240 <chThdDequeueNextI.constprop.0>:
 * @param[in] tqp       pointer to the threads queue object
 * @param[in] msg       the message code
 *
 * @iclass
 */
void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {
 8001240:	4603      	mov	r3, r0
  return (bool)(tqp->next != (const thread_t *)tqp);
 8001242:	6800      	ldr	r0, [r0, #0]

  if (queue_notempty(tqp)) {
 8001244:	4283      	cmp	r3, r0
 8001246:	d006      	beq.n	8001256 <chThdDequeueNextI.constprop.0+0x16>
  tqp->next             = tp->queue.next;
 8001248:	6802      	ldr	r2, [r0, #0]
 800124a:	601a      	str	r2, [r3, #0]

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->state == CH_STATE_QUEUED, "invalid state");

  tp->u.rdymsg = msg;
 800124c:	2100      	movs	r1, #0
  tqp->next->queue.prev = (thread_t *)tqp;
 800124e:	6053      	str	r3, [r2, #4]
 8001250:	6241      	str	r1, [r0, #36]	; 0x24
  (void) chSchReadyI(tp);
 8001252:	f7ff bfdd 	b.w	8001210 <chSchReadyI>
    chThdDoDequeueNextI(tqp, msg);
  }
}
 8001256:	4770      	bx	lr
	...

08001260 <chMBPostI.constprop.0>:

  chDbgCheckClassI();
  chDbgCheck(mbp != NULL);

  /* If the mailbox is in reset state then returns immediately.*/
  if (mbp->reset) {
 8001260:	4b0f      	ldr	r3, [pc, #60]	; (80012a0 <chMBPostI.constprop.0+0x40>)
 8001262:	7d1a      	ldrb	r2, [r3, #20]
 8001264:	b9ca      	cbnz	r2, 800129a <chMBPostI.constprop.0+0x3a>
msg_t chMBPostI(mailbox_t *mbp, msg_t msg) {
 8001266:	b570      	push	{r4, r5, r6, lr}
 */
static inline size_t chMBGetFreeCountI(const mailbox_t *mbp) {

  chDbgCheckClassI();

  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 8001268:	e9d3 6100 	ldrd	r6, r1, [r3]
 800126c:	691a      	ldr	r2, [r3, #16]
  return (size_t)(mbp->top - mbp->buffer);
 800126e:	1b8c      	subs	r4, r1, r6
    return MSG_RESET;
  }

  /* Is there a free message slot in queue? if so then post.*/
  if (chMBGetFreeCountI(mbp) > (size_t)0) {
 8001270:	ebb2 0fa4 	cmp.w	r2, r4, asr #2
 8001274:	d00e      	beq.n	8001294 <chMBPostI.constprop.0+0x34>
    *mbp->wrptr++ = msg;
 8001276:	689d      	ldr	r5, [r3, #8]
 8001278:	1d2c      	adds	r4, r5, #4
 800127a:	609c      	str	r4, [r3, #8]
    if (mbp->wrptr >= mbp->top) {
 800127c:	42a1      	cmp	r1, r4
    *mbp->wrptr++ = msg;
 800127e:	6028      	str	r0, [r5, #0]
      mbp->wrptr = mbp->buffer;
    }
    mbp->cnt++;
 8001280:	f102 0201 	add.w	r2, r2, #1

    /* If there is a reader waiting then makes it ready.*/
    chThdDequeueNextI(&mbp->qr, MSG_OK);
 8001284:	4807      	ldr	r0, [pc, #28]	; (80012a4 <chMBPostI.constprop.0+0x44>)
      mbp->wrptr = mbp->buffer;
 8001286:	bf98      	it	ls
 8001288:	609e      	strls	r6, [r3, #8]
    mbp->cnt++;
 800128a:	611a      	str	r2, [r3, #16]
    chThdDequeueNextI(&mbp->qr, MSG_OK);
 800128c:	f7ff ffd8 	bl	8001240 <chThdDequeueNextI.constprop.0>

    return MSG_OK;
 8001290:	2000      	movs	r0, #0
  }

  /* No space, immediate timeout.*/
  return MSG_TIMEOUT;
}
 8001292:	bd70      	pop	{r4, r5, r6, pc}
  return MSG_TIMEOUT;
 8001294:	f04f 30ff 	mov.w	r0, #4294967295
}
 8001298:	bd70      	pop	{r4, r5, r6, pc}
    return MSG_RESET;
 800129a:	f06f 0001 	mvn.w	r0, #1
}
 800129e:	4770      	bx	lr
 80012a0:	2000084c 	.word	0x2000084c
 80012a4:	2000086c 	.word	0x2000086c
	...

080012b0 <chMBPostAheadI.constprop.0>:
 * @retval MSG_TIMEOUT  if the mailbox is full and the message cannot be
 *                      posted.
 *
 * @iclass
 */
msg_t chMBPostAheadI(mailbox_t *mbp, msg_t msg) {
 80012b0:	b538      	push	{r3, r4, r5, lr}

  chDbgCheckClassI();
  chDbgCheck(mbp != NULL);

  /* If the mailbox is in reset state then returns immediately.*/
  if (mbp->reset) {
 80012b2:	4b0f      	ldr	r3, [pc, #60]	; (80012f0 <chMBPostAheadI.constprop.0+0x40>)
 80012b4:	7d1a      	ldrb	r2, [r3, #20]
 80012b6:	b9ba      	cbnz	r2, 80012e8 <chMBPostAheadI.constprop.0+0x38>
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 80012b8:	e9d3 4500 	ldrd	r4, r5, [r3]
 80012bc:	6919      	ldr	r1, [r3, #16]
  return (size_t)(mbp->top - mbp->buffer);
 80012be:	1b2a      	subs	r2, r5, r4
    return MSG_RESET;
  }

  /* Is there a free message slot in queue? if so then post.*/
  if (chMBGetFreeCountI(mbp) > (size_t)0) {
 80012c0:	ebb1 0fa2 	cmp.w	r1, r2, asr #2
 80012c4:	d00d      	beq.n	80012e2 <chMBPostAheadI.constprop.0+0x32>
    if (--mbp->rdptr < mbp->buffer) {
 80012c6:	68da      	ldr	r2, [r3, #12]
 80012c8:	3a04      	subs	r2, #4
 80012ca:	4294      	cmp	r4, r2
      mbp->rdptr = mbp->top - 1;
 80012cc:	bf88      	it	hi
 80012ce:	1f2a      	subhi	r2, r5, #4
 80012d0:	60da      	str	r2, [r3, #12]
    }
    *mbp->rdptr = msg;
    mbp->cnt++;
 80012d2:	3101      	adds	r1, #1
    *mbp->rdptr = msg;
 80012d4:	6010      	str	r0, [r2, #0]

    /* If there is a reader waiting then makes it ready.*/
    chThdDequeueNextI(&mbp->qr, MSG_OK);
 80012d6:	4807      	ldr	r0, [pc, #28]	; (80012f4 <chMBPostAheadI.constprop.0+0x44>)
    mbp->cnt++;
 80012d8:	6119      	str	r1, [r3, #16]
    chThdDequeueNextI(&mbp->qr, MSG_OK);
 80012da:	f7ff ffb1 	bl	8001240 <chThdDequeueNextI.constprop.0>

    return MSG_OK;
 80012de:	2000      	movs	r0, #0
  }

  /* No space, immediate timeout.*/
  return MSG_TIMEOUT;
}
 80012e0:	bd38      	pop	{r3, r4, r5, pc}
  return MSG_TIMEOUT;
 80012e2:	f04f 30ff 	mov.w	r0, #4294967295
}
 80012e6:	bd38      	pop	{r3, r4, r5, pc}
    return MSG_RESET;
 80012e8:	f06f 0001 	mvn.w	r0, #1
}
 80012ec:	bd38      	pop	{r3, r4, r5, pc}
 80012ee:	bf00      	nop
 80012f0:	2000084c 	.word	0x2000084c
 80012f4:	2000086c 	.word	0x2000086c
	...

08001300 <chMBFetchI.constprop.0>:
 * @retval MSG_TIMEOUT  if the mailbox is empty and a message cannot be
 *                      fetched.
 *
 * @iclass
 */
msg_t chMBFetchI(mailbox_t *mbp, msg_t *msgp) {
 8001300:	b538      	push	{r3, r4, r5, lr}

  chDbgCheckClassI();
  chDbgCheck((mbp != NULL) && (msgp != NULL));

  /* If the mailbox is in reset state then returns immediately.*/
  if (mbp->reset) {
 8001302:	4b0f      	ldr	r3, [pc, #60]	; (8001340 <chMBFetchI.constprop.0+0x40>)
 8001304:	7d1a      	ldrb	r2, [r3, #20]
 8001306:	b9ba      	cbnz	r2, 8001338 <chMBFetchI.constprop.0+0x38>
    return MSG_RESET;
  }

  /* Is there a message in queue? if so then fetch.*/
  if (chMBGetUsedCountI(mbp) > (size_t)0) {
 8001308:	6919      	ldr	r1, [r3, #16]
 800130a:	b191      	cbz	r1, 8001332 <chMBFetchI.constprop.0+0x32>
    *msgp = *mbp->rdptr++;
 800130c:	68da      	ldr	r2, [r3, #12]
    if (mbp->rdptr >= mbp->top) {
 800130e:	685c      	ldr	r4, [r3, #4]
    *msgp = *mbp->rdptr++;
 8001310:	6815      	ldr	r5, [r2, #0]
 8001312:	3204      	adds	r2, #4
    if (mbp->rdptr >= mbp->top) {
 8001314:	42a2      	cmp	r2, r4
    *msgp = *mbp->rdptr++;
 8001316:	60da      	str	r2, [r3, #12]
      mbp->rdptr = mbp->buffer;
    }
    mbp->cnt--;
 8001318:	f101 31ff 	add.w	r1, r1, #4294967295
    *msgp = *mbp->rdptr++;
 800131c:	6005      	str	r5, [r0, #0]
      mbp->rdptr = mbp->buffer;
 800131e:	bf28      	it	cs
 8001320:	681a      	ldrcs	r2, [r3, #0]

    /* If there is a writer waiting then makes it ready.*/
    chThdDequeueNextI(&mbp->qw, MSG_OK);
 8001322:	4808      	ldr	r0, [pc, #32]	; (8001344 <chMBFetchI.constprop.0+0x44>)
      mbp->rdptr = mbp->buffer;
 8001324:	bf28      	it	cs
 8001326:	60da      	strcs	r2, [r3, #12]
    mbp->cnt--;
 8001328:	6119      	str	r1, [r3, #16]
    chThdDequeueNextI(&mbp->qw, MSG_OK);
 800132a:	f7ff ff89 	bl	8001240 <chThdDequeueNextI.constprop.0>

    return MSG_OK;
 800132e:	2000      	movs	r0, #0
  }

  /* No message, immediate timeout.*/
  return MSG_TIMEOUT;
}
 8001330:	bd38      	pop	{r3, r4, r5, pc}
  return MSG_TIMEOUT;
 8001332:	f04f 30ff 	mov.w	r0, #4294967295
}
 8001336:	bd38      	pop	{r3, r4, r5, pc}
    return MSG_RESET;
 8001338:	f06f 0001 	mvn.w	r0, #1
}
 800133c:	bd38      	pop	{r3, r4, r5, pc}
 800133e:	bf00      	nop
 8001340:	2000084c 	.word	0x2000084c
 8001344:	20000864 	.word	0x20000864
	...

08001350 <chThdDequeueAllI.constprop.0>:
 * @param[in] tqp       pointer to the threads queue object
 * @param[in] msg       the message code
 *
 * @iclass
 */
void chThdDequeueAllI(threads_queue_t *tqp, msg_t msg) {
 8001350:	b538      	push	{r3, r4, r5, lr}
 8001352:	4604      	mov	r4, r0
  return (bool)(tqp->next != (const thread_t *)tqp);
 8001354:	6800      	ldr	r0, [r0, #0]

  while (queue_notempty(tqp)) {
 8001356:	4284      	cmp	r4, r0
 8001358:	d00a      	beq.n	8001370 <chThdDequeueAllI.constprop.0+0x20>
  tp->u.rdymsg = msg;
 800135a:	f06f 0501 	mvn.w	r5, #1
  tqp->next             = tp->queue.next;
 800135e:	6803      	ldr	r3, [r0, #0]
 8001360:	6023      	str	r3, [r4, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 8001362:	605c      	str	r4, [r3, #4]
 8001364:	6245      	str	r5, [r0, #36]	; 0x24
  (void) chSchReadyI(tp);
 8001366:	f7ff ff53 	bl	8001210 <chSchReadyI>
  return (bool)(tqp->next != (const thread_t *)tqp);
 800136a:	6820      	ldr	r0, [r4, #0]
 800136c:	42a0      	cmp	r0, r4
 800136e:	d1f6      	bne.n	800135e <chThdDequeueAllI.constprop.0+0xe>
    chThdDoDequeueNextI(tqp, msg);
  }
}
 8001370:	bd38      	pop	{r3, r4, r5, pc}
 8001372:	bf00      	nop
	...

08001380 <chCondSignalI.constprop.0>:
 8001380:	4b05      	ldr	r3, [pc, #20]	; (8001398 <chCondSignalI.constprop.0+0x18>)
 8001382:	6818      	ldr	r0, [r3, #0]
void chCondSignalI(condition_variable_t *cp) {

  chDbgCheckClassI();
  chDbgCheck(cp != NULL);

  if (queue_notempty(&cp->queue)) {
 8001384:	4298      	cmp	r0, r3
 8001386:	d006      	beq.n	8001396 <chCondSignalI.constprop.0+0x16>
  tqp->next             = tp->queue.next;
 8001388:	6802      	ldr	r2, [r0, #0]
 800138a:	601a      	str	r2, [r3, #0]
    thread_t *tp = queue_fifo_remove(&cp->queue);
    tp->u.rdymsg = MSG_OK;
 800138c:	2100      	movs	r1, #0
  tqp->next->queue.prev = (thread_t *)tqp;
 800138e:	6053      	str	r3, [r2, #4]
 8001390:	6241      	str	r1, [r0, #36]	; 0x24
    (void) chSchReadyI(tp);
 8001392:	f7ff bf3d 	b.w	8001210 <chSchReadyI>
  }
}
 8001396:	4770      	bx	lr
 8001398:	20000800 	.word	0x20000800
 800139c:	00000000 	.word	0x00000000

080013a0 <chEvtSignalI>:
  tp->epending |= events;
 80013a0:	6b42      	ldr	r2, [r0, #52]	; 0x34
  if (((tp->state == CH_STATE_WTOREVT) &&
 80013a2:	f890 3020 	ldrb.w	r3, [r0, #32]
  tp->epending |= events;
 80013a6:	4311      	orrs	r1, r2
  if (((tp->state == CH_STATE_WTOREVT) &&
 80013a8:	2b0a      	cmp	r3, #10
  tp->epending |= events;
 80013aa:	6341      	str	r1, [r0, #52]	; 0x34
  if (((tp->state == CH_STATE_WTOREVT) &&
 80013ac:	d009      	beq.n	80013c2 <chEvtSignalI+0x22>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
 80013ae:	2b0b      	cmp	r3, #11
 80013b0:	d000      	beq.n	80013b4 <chEvtSignalI+0x14>
}
 80013b2:	4770      	bx	lr
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
 80013b4:	6a43      	ldr	r3, [r0, #36]	; 0x24
      ((tp->state == CH_STATE_WTANDEVT) &&
 80013b6:	438b      	bics	r3, r1
 80013b8:	d1fb      	bne.n	80013b2 <chEvtSignalI+0x12>
    tp->u.rdymsg = MSG_OK;
 80013ba:	2300      	movs	r3, #0
 80013bc:	6243      	str	r3, [r0, #36]	; 0x24
    (void) chSchReadyI(tp);
 80013be:	f7ff bf27 	b.w	8001210 <chSchReadyI>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
 80013c2:	6a43      	ldr	r3, [r0, #36]	; 0x24
  if (((tp->state == CH_STATE_WTOREVT) &&
 80013c4:	4219      	tst	r1, r3
 80013c6:	d1f8      	bne.n	80013ba <chEvtSignalI+0x1a>
 80013c8:	4770      	bx	lr
 80013ca:	bf00      	nop
 80013cc:	0000      	movs	r0, r0
	...

080013d0 <chEvtBroadcastFlagsI>:
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 80013d0:	b570      	push	{r4, r5, r6, lr}
  elp = esp->next;
 80013d2:	6804      	ldr	r4, [r0, #0]
  while (elp != (event_listener_t *)esp) {
 80013d4:	42a0      	cmp	r0, r4
 80013d6:	d00f      	beq.n	80013f8 <chEvtBroadcastFlagsI+0x28>
 80013d8:	4606      	mov	r6, r0
 80013da:	460d      	mov	r5, r1
    elp->flags |= flags;
 80013dc:	68e3      	ldr	r3, [r4, #12]
 80013de:	432b      	orrs	r3, r5
 80013e0:	60e3      	str	r3, [r4, #12]
    if ((flags == (eventflags_t)0) ||
 80013e2:	b115      	cbz	r5, 80013ea <chEvtBroadcastFlagsI+0x1a>
        ((flags & elp->wflags) != (eventflags_t)0)) {
 80013e4:	6923      	ldr	r3, [r4, #16]
    if ((flags == (eventflags_t)0) ||
 80013e6:	421d      	tst	r5, r3
 80013e8:	d003      	beq.n	80013f2 <chEvtBroadcastFlagsI+0x22>
      chEvtSignalI(elp->listener, elp->events);
 80013ea:	e9d4 0101 	ldrd	r0, r1, [r4, #4]
 80013ee:	f7ff ffd7 	bl	80013a0 <chEvtSignalI>
    elp = elp->next;
 80013f2:	6824      	ldr	r4, [r4, #0]
  while (elp != (event_listener_t *)esp) {
 80013f4:	42a6      	cmp	r6, r4
 80013f6:	d1f1      	bne.n	80013dc <chEvtBroadcastFlagsI+0xc>
}
 80013f8:	bd70      	pop	{r4, r5, r6, pc}
 80013fa:	bf00      	nop
 80013fc:	0000      	movs	r0, r0
	...

08001400 <chMtxUnlockS>:
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @sclass
 */
void chMtxUnlockS(mutex_t *mp) {
  thread_t *ctp = currp;
 8001400:	4b11      	ldr	r3, [pc, #68]	; (8001448 <chMtxUnlockS+0x48>)
void chMtxUnlockS(mutex_t *mp) {
 8001402:	4601      	mov	r1, r0
  return (bool)(tqp->next != (const thread_t *)tqp);
 8001404:	6800      	ldr	r0, [r0, #0]
 8001406:	b430      	push	{r4, r5}
  thread_t *ctp = currp;
 8001408:	699d      	ldr	r5, [r3, #24]
    chDbgAssert(ctp->mtxlist == mp, "not next in list");

    /* Removes the top mutex from the thread's owned mutexes list and marks
       it as not owned. Note, it is assumed to be the same mutex passed as
       parameter of this function.*/
    ctp->mtxlist = mp->next;
 800140a:	68cb      	ldr	r3, [r1, #12]
 800140c:	63ab      	str	r3, [r5, #56]	; 0x38

    /* If a thread is waiting on the mutex then the fun part begins.*/
    if (chMtxQueueNotEmptyS(mp)) {
 800140e:	4288      	cmp	r0, r1
 8001410:	d016      	beq.n	8001440 <chMtxUnlockS+0x40>
      thread_t *tp;

      /* Recalculates the optimal thread priority by scanning the owned
         mutexes list.*/
      tprio_t newprio = ctp->realprio;
 8001412:	6bec      	ldr	r4, [r5, #60]	; 0x3c
      lmp = ctp->mtxlist;
      while (lmp != NULL) {
 8001414:	b14b      	cbz	r3, 800142a <chMtxUnlockS+0x2a>
 8001416:	681a      	ldr	r2, [r3, #0]
        /* If the highest priority thread waiting in the mutexes list has a
           greater priority than the current thread base priority then the
           final priority will have at least that priority.*/
        if (chMtxQueueNotEmptyS(lmp) &&
 8001418:	4293      	cmp	r3, r2
 800141a:	d003      	beq.n	8001424 <chMtxUnlockS+0x24>
 800141c:	6892      	ldr	r2, [r2, #8]
 800141e:	4294      	cmp	r4, r2
 8001420:	bf38      	it	cc
 8001422:	4614      	movcc	r4, r2
            (lmp->queue.next->prio > newprio)) {
          newprio = lmp->queue.next->prio;
        }
        lmp = lmp->next;
 8001424:	68db      	ldr	r3, [r3, #12]
      while (lmp != NULL) {
 8001426:	2b00      	cmp	r3, #0
 8001428:	d1f5      	bne.n	8001416 <chMtxUnlockS+0x16>
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
      mp->cnt = (cnt_t)1;
#endif
      tp = queue_fifo_remove(&mp->queue);
      mp->owner = tp;
      mp->next = tp->mtxlist;
 800142a:	6b82      	ldr	r2, [r0, #56]	; 0x38
  tqp->next             = tp->queue.next;
 800142c:	6803      	ldr	r3, [r0, #0]
      ctp->prio = newprio;
 800142e:	60ac      	str	r4, [r5, #8]
 8001430:	600b      	str	r3, [r1, #0]
      mp->owner = NULL;
    }
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
  }
#endif
}
 8001432:	bc30      	pop	{r4, r5}
  tqp->next->queue.prev = (thread_t *)tqp;
 8001434:	6059      	str	r1, [r3, #4]
      mp->next = tp->mtxlist;
 8001436:	e9c1 0202 	strd	r0, r2, [r1, #8]
      tp->mtxlist = mp;
 800143a:	6381      	str	r1, [r0, #56]	; 0x38
      (void) chSchReadyI(tp);
 800143c:	f7ff bee8 	b.w	8001210 <chSchReadyI>
      mp->owner = NULL;
 8001440:	2300      	movs	r3, #0
}
 8001442:	bc30      	pop	{r4, r5}
      mp->owner = NULL;
 8001444:	6083      	str	r3, [r0, #8]
}
 8001446:	4770      	bx	lr
 8001448:	200009b0 	.word	0x200009b0
 800144c:	00000000 	.word	0x00000000

08001450 <chSemSignalI>:
  chDbgCheck(sp != NULL);
  chDbgAssert(((sp->cnt >= (cnt_t)0) && queue_isempty(&sp->queue)) ||
              ((sp->cnt < (cnt_t)0) && queue_notempty(&sp->queue)),
              "inconsistent semaphore");

  if (++sp->cnt <= (cnt_t)0) {
 8001450:	6883      	ldr	r3, [r0, #8]
 8001452:	3301      	adds	r3, #1
 8001454:	2b00      	cmp	r3, #0
 8001456:	6083      	str	r3, [r0, #8]
 8001458:	dd00      	ble.n	800145c <chSemSignalI+0xc>
             chSchReadyI().*/
    thread_t *tp = queue_fifo_remove(&sp->queue);
    tp->u.rdymsg = MSG_OK;
    (void) chSchReadyI(tp);
  }
}
 800145a:	4770      	bx	lr
  thread_t *tp = tqp->next;
 800145c:	6803      	ldr	r3, [r0, #0]
  tqp->next             = tp->queue.next;
 800145e:	681a      	ldr	r2, [r3, #0]
 8001460:	6002      	str	r2, [r0, #0]
    tp->u.rdymsg = MSG_OK;
 8001462:	2100      	movs	r1, #0
  tqp->next->queue.prev = (thread_t *)tqp;
 8001464:	6050      	str	r0, [r2, #4]
    (void) chSchReadyI(tp);
 8001466:	4618      	mov	r0, r3
    tp->u.rdymsg = MSG_OK;
 8001468:	6259      	str	r1, [r3, #36]	; 0x24
    (void) chSchReadyI(tp);
 800146a:	f7ff bed1 	b.w	8001210 <chSchReadyI>
 800146e:	bf00      	nop

08001470 <chCacheReleaseObjectI>:
 * @param[in] objp      pointer to the @p oc_object_t structure
 *
 * @iclass
 */
void chCacheReleaseObjectI(objects_cache_t *ocp,
                           oc_object_t *objp) {
 8001470:	b538      	push	{r3, r4, r5, lr}
  chDbgAssert(chSemGetCounterI(&objp->obj_sem) <= (cnt_t)0,
              "semaphore counter greater than 0");

  /* If some thread is waiting for this specific buffer then it is
     handed directly without going through the LRU.*/
  if (chSemGetCounterI(&objp->obj_sem) < (cnt_t)0) {
 8001472:	6a0b      	ldr	r3, [r1, #32]
 8001474:	2b00      	cmp	r3, #0
                           oc_object_t *objp) {
 8001476:	460c      	mov	r4, r1
    /* Clearing all flags except those that are still meaningful, note,
       OC_FLAG_NOTSYNC and OC_FLAG_LAZYWRITE are passed, the other thread
       will handle them.*/
    objp->obj_flags &= OC_FLAG_INHASH | OC_FLAG_NOTSYNC | OC_FLAG_LAZYWRITE;
 8001478:	6a4b      	ldr	r3, [r1, #36]	; 0x24
  if (chSemGetCounterI(&objp->obj_sem) < (cnt_t)0) {
 800147a:	db2f      	blt.n	80014dc <chCacheReleaseObjectI+0x6c>
    return;
  }

  /* If the object specifies OC_FLAG_NOTSYNC then it must be invalidated
     and removed from the hash table.*/
  if ((objp->obj_flags & OC_FLAG_NOTSYNC) != 0U) {
 800147c:	0719      	lsls	r1, r3, #28
 800147e:	d414      	bmi.n	80014aa <chCacheReleaseObjectI+0x3a>
    objp->obj_key   = 0U;
    objp->obj_flags = OC_FLAG_INLRU;
  }
  else {
    /* LRU insertion point depends on the OC_FLAG_FORGET flag.*/
    if ((objp->obj_flags & OC_FLAG_FORGET) == 0U) {
 8001480:	069a      	lsls	r2, r3, #26
 8001482:	d423      	bmi.n	80014cc <chCacheReleaseObjectI+0x5c>
      /* Placing it on head.*/
      LRU_INSERT_HEAD(ocp, objp);
 8001484:	69c2      	ldr	r2, [r0, #28]
 8001486:	60a2      	str	r2, [r4, #8]
 8001488:	f100 0114 	add.w	r1, r0, #20
 800148c:	60e1      	str	r1, [r4, #12]
 800148e:	60d4      	str	r4, [r2, #12]
 8001490:	61c4      	str	r4, [r0, #28]
    }
    else {
      /* Low priority data, placing it on tail.*/
      LRU_INSERT_TAIL(ocp, objp);
    }
    objp->obj_flags &= OC_FLAG_INHASH | OC_FLAG_LAZYWRITE;
 8001492:	f003 0312 	and.w	r3, r3, #18
    objp->obj_flags |= OC_FLAG_INLRU;
 8001496:	f043 0301 	orr.w	r3, r3, #1
 800149a:	6263      	str	r3, [r4, #36]	; 0x24
  }

  /* Increasing the LRU counter semaphore.*/
  chSemSignalI(&ocp->lru_sem);
 800149c:	3030      	adds	r0, #48	; 0x30
 800149e:	f7ff ffd7 	bl	8001450 <chSemSignalI>
 80014a2:	6a23      	ldr	r3, [r4, #32]
 80014a4:	3301      	adds	r3, #1
 80014a6:	6223      	str	r3, [r4, #32]

  /* Releasing the object, we know there are no threads waiting so
     using the "fast" signal variant.*/
  chSemFastSignalI(&objp->obj_sem);
}
 80014a8:	bd38      	pop	{r3, r4, r5, pc}
    HASH_REMOVE(objp);
 80014aa:	e9d4 2500 	ldrd	r2, r5, [r4]
    LRU_INSERT_TAIL(ocp, objp);
 80014ae:	6a01      	ldr	r1, [r0, #32]
    HASH_REMOVE(objp);
 80014b0:	602a      	str	r2, [r5, #0]
    LRU_INSERT_TAIL(ocp, objp);
 80014b2:	f100 0314 	add.w	r3, r0, #20
    HASH_REMOVE(objp);
 80014b6:	6055      	str	r5, [r2, #4]
    objp->obj_group = 0U;
 80014b8:	2200      	movs	r2, #0
    objp->obj_flags = OC_FLAG_INLRU;
 80014ba:	2501      	movs	r5, #1
    LRU_INSERT_TAIL(ocp, objp);
 80014bc:	e9c4 3102 	strd	r3, r1, [r4, #8]
 80014c0:	608c      	str	r4, [r1, #8]
 80014c2:	6204      	str	r4, [r0, #32]
    objp->obj_key   = 0U;
 80014c4:	e9c4 2204 	strd	r2, r2, [r4, #16]
    objp->obj_flags = OC_FLAG_INLRU;
 80014c8:	6265      	str	r5, [r4, #36]	; 0x24
 80014ca:	e7e7      	b.n	800149c <chCacheReleaseObjectI+0x2c>
      LRU_INSERT_TAIL(ocp, objp);
 80014cc:	6a02      	ldr	r2, [r0, #32]
 80014ce:	60e2      	str	r2, [r4, #12]
 80014d0:	f100 0114 	add.w	r1, r0, #20
 80014d4:	60a1      	str	r1, [r4, #8]
 80014d6:	6094      	str	r4, [r2, #8]
 80014d8:	6204      	str	r4, [r0, #32]
 80014da:	e7da      	b.n	8001492 <chCacheReleaseObjectI+0x22>
    objp->obj_flags &= OC_FLAG_INHASH | OC_FLAG_NOTSYNC | OC_FLAG_LAZYWRITE;
 80014dc:	f003 031a 	and.w	r3, r3, #26
 80014e0:	624b      	str	r3, [r1, #36]	; 0x24
    chSemSignalI(&objp->obj_sem);
 80014e2:	f101 0018 	add.w	r0, r1, #24
}
 80014e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    chSemSignalI(&objp->obj_sem);
 80014ea:	f7ff bfb1 	b.w	8001450 <chSemSignalI>
 80014ee:	bf00      	nop

080014f0 <chVTDoResetI>:
 *
 * @param[in] vtp       the @p virtual_timer_t structure pointer
 *
 * @iclass
 */
void chVTDoResetI(virtual_timer_t *vtp) {
 80014f0:	b410      	push	{r4}
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  sysinterval_t nowdelta, delta;

  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (ch.vtlist.next != vtp) {
 80014f2:	4a1e      	ldr	r2, [pc, #120]	; (800156c <chVTDoResetI+0x7c>)
 80014f4:	69d1      	ldr	r1, [r2, #28]
void chVTDoResetI(virtual_timer_t *vtp) {
 80014f6:	b083      	sub	sp, #12
  if (ch.vtlist.next != vtp) {
 80014f8:	4281      	cmp	r1, r0
void chVTDoResetI(virtual_timer_t *vtp) {
 80014fa:	9001      	str	r0, [sp, #4]
  if (ch.vtlist.next != vtp) {
 80014fc:	d011      	beq.n	8001522 <chVTDoResetI+0x32>
 80014fe:	4603      	mov	r3, r0
    /* Removing the element from the delta list.*/
    vtp->prev->next = vtp->next;
 8001500:	e9d0 1000 	ldrd	r1, r0, [r0]
 8001504:	6001      	str	r1, [r0, #0]
    vtp->next->prev = vtp->prev;
 8001506:	6819      	ldr	r1, [r3, #0]
    vtp->func = NULL;

    /* Adding delta to the next element, if it is not the last one.*/
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->next)
 8001508:	321c      	adds	r2, #28
    vtp->func = NULL;
 800150a:	2400      	movs	r4, #0
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->next)
 800150c:	4291      	cmp	r1, r2
    vtp->next->prev = vtp->prev;
 800150e:	6048      	str	r0, [r1, #4]
    vtp->func = NULL;
 8001510:	60dc      	str	r4, [r3, #12]
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->next)
 8001512:	d003      	beq.n	800151c <chVTDoResetI+0x2c>
      vtp->next->delta += vtp->delta;
 8001514:	689a      	ldr	r2, [r3, #8]
 8001516:	688b      	ldr	r3, [r1, #8]
 8001518:	4413      	add	r3, r2
 800151a:	608b      	str	r3, [r1, #8]
    }
#endif
  }
  port_timer_set_alarm(chTimeAddX(ch.vtlist.lasttime, delta));
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
}
 800151c:	b003      	add	sp, #12
 800151e:	bc10      	pop	{r4}
 8001520:	4770      	bx	lr
  ch.vtlist.next = vtp->next;
 8001522:	4610      	mov	r0, r2
 8001524:	680b      	ldr	r3, [r1, #0]
 8001526:	f840 3f1c 	str.w	r3, [r0, #28]!
  vtp->func = NULL;
 800152a:	2400      	movs	r4, #0
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 800152c:	4283      	cmp	r3, r0
  ch.vtlist.next->prev = (virtual_timer_t *)&ch.vtlist;
 800152e:	6058      	str	r0, [r3, #4]
  vtp->func = NULL;
 8001530:	60cc      	str	r4, [r1, #12]
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 8001532:	d016      	beq.n	8001562 <chVTDoResetI+0x72>
  ch.vtlist.next->delta += vtp->delta;
 8001534:	688c      	ldr	r4, [r1, #8]
 8001536:	6899      	ldr	r1, [r3, #8]
  nowdelta = chTimeDiffX(ch.vtlist.lasttime, chVTGetSystemTimeX());
 8001538:	6a92      	ldr	r2, [r2, #40]	; 0x28
  ch.vtlist.next->delta += vtp->delta;
 800153a:	440c      	add	r4, r1
 800153c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001540:	609c      	str	r4, [r3, #8]
 8001542:	6a4b      	ldr	r3, [r1, #36]	; 0x24
  return (sysinterval_t)((systime_t)(end - start));
 8001544:	1a99      	subs	r1, r3, r2
  if (nowdelta >= ch.vtlist.next->delta) {
 8001546:	428c      	cmp	r4, r1
 8001548:	d9e8      	bls.n	800151c <chVTDoResetI+0x2c>
  delta = ch.vtlist.next->delta - nowdelta;
 800154a:	1ad3      	subs	r3, r2, r3
 800154c:	4423      	add	r3, r4
  if (delta < (sysinterval_t)CH_CFG_ST_TIMEDELTA) {
 800154e:	2b01      	cmp	r3, #1
    delta = nowdelta + (sysinterval_t)CH_CFG_ST_TIMEDELTA;
 8001550:	bf98      	it	ls
 8001552:	1c8c      	addls	r4, r1, #2
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t abstime) {

  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 8001554:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  return systime + (systime_t)interval;
 8001558:	4422      	add	r2, r4
 800155a:	635a      	str	r2, [r3, #52]	; 0x34
}
 800155c:	b003      	add	sp, #12
 800155e:	bc10      	pop	{r4}
 8001560:	4770      	bx	lr
  STM32_ST_TIM->DIER = 0U;
 8001562:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001566:	60dc      	str	r4, [r3, #12]
    return;
 8001568:	e7d8      	b.n	800151c <chVTDoResetI+0x2c>
 800156a:	bf00      	nop
 800156c:	200009b0 	.word	0x200009b0

08001570 <chVTDoSetI>:
                vtfunc_t vtfunc, void *par) {
 8001570:	b4f0      	push	{r4, r5, r6, r7}
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 8001572:	4d1f      	ldr	r5, [pc, #124]	; (80015f0 <chVTDoSetI+0x80>)
 8001574:	462f      	mov	r7, r5
 8001576:	2902      	cmp	r1, #2
 8001578:	f857 4f1c 	ldr.w	r4, [r7, #28]!
  return (systime_t)STM32_ST_TIM->CNT;
 800157c:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
 8001580:	bf38      	it	cc
 8001582:	2102      	movcc	r1, #2
 8001584:	42bc      	cmp	r4, r7
  vtp->par = par;
 8001586:	e9c0 2303 	strd	r2, r3, [r0, #12]
 800158a:	6a73      	ldr	r3, [r6, #36]	; 0x24
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 800158c:	d022      	beq.n	80015d4 <chVTDoSetI+0x64>
    delta = chTimeDiffX(ch.vtlist.lasttime, now) + delay;
 800158e:	6aaa      	ldr	r2, [r5, #40]	; 0x28
  return (sysinterval_t)((systime_t)(end - start));
 8001590:	1a9b      	subs	r3, r3, r2
 8001592:	18c9      	adds	r1, r1, r3
    if (delta < chTimeDiffX(ch.vtlist.lasttime, now)) {
 8001594:	d216      	bcs.n	80015c4 <chVTDoSetI+0x54>
    else if (delta < p->delta) {
 8001596:	68a3      	ldr	r3, [r4, #8]
 8001598:	428b      	cmp	r3, r1
 800159a:	d903      	bls.n	80015a4 <chVTDoSetI+0x34>
 800159c:	e017      	b.n	80015ce <chVTDoSetI+0x5e>
    p = p->next;
 800159e:	6824      	ldr	r4, [r4, #0]
    delta -= p->delta;
 80015a0:	1ac9      	subs	r1, r1, r3
  while (p->delta < delta) {
 80015a2:	68a3      	ldr	r3, [r4, #8]
 80015a4:	428b      	cmp	r3, r1
 80015a6:	d3fa      	bcc.n	800159e <chVTDoSetI+0x2e>
  vtp->prev = vtp->next->prev;
 80015a8:	6863      	ldr	r3, [r4, #4]
 80015aa:	e9c0 4300 	strd	r4, r3, [r0]
  vtp->prev->next = vtp;
 80015ae:	6018      	str	r0, [r3, #0]
  p->prev = vtp;
 80015b0:	6060      	str	r0, [r4, #4]
  vtp->delta = delta;
 80015b2:	6081      	str	r1, [r0, #8]
  p->delta -= delta;
 80015b4:	68a3      	ldr	r3, [r4, #8]
  ch.vtlist.delta = (sysinterval_t)-1;
 80015b6:	f04f 32ff 	mov.w	r2, #4294967295
  p->delta -= delta;
 80015ba:	1a59      	subs	r1, r3, r1
 80015bc:	60a1      	str	r1, [r4, #8]
  ch.vtlist.delta = (sysinterval_t)-1;
 80015be:	626a      	str	r2, [r5, #36]	; 0x24
}
 80015c0:	bcf0      	pop	{r4, r5, r6, r7}
 80015c2:	4770      	bx	lr
      delta -= p->delta;
 80015c4:	68a2      	ldr	r2, [r4, #8]
      p = p->next;
 80015c6:	6824      	ldr	r4, [r4, #0]
      delta -= p->delta;
 80015c8:	1a89      	subs	r1, r1, r2
  while (p->delta < delta) {
 80015ca:	68a3      	ldr	r3, [r4, #8]
 80015cc:	e7ea      	b.n	80015a4 <chVTDoSetI+0x34>
  return systime + (systime_t)interval;
 80015ce:	440a      	add	r2, r1
  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 80015d0:	6372      	str	r2, [r6, #52]	; 0x34
 80015d2:	e7e7      	b.n	80015a4 <chVTDoSetI+0x34>
      ch.vtlist.lasttime = now;
 80015d4:	62ab      	str	r3, [r5, #40]	; 0x28
 80015d6:	18cf      	adds	r7, r1, r3
  STM32_ST_TIM->SR     = 0;
 80015d8:	2200      	movs	r2, #0
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 80015da:	2302      	movs	r3, #2
      ch.vtlist.prev = vtp;
 80015dc:	e9c5 0007 	strd	r0, r0, [r5, #28]
      vtp->prev = (virtual_timer_t *)&ch.vtlist;
 80015e0:	e9c0 4400 	strd	r4, r4, [r0]
      vtp->delta = delay;
 80015e4:	6081      	str	r1, [r0, #8]
  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 80015e6:	6377      	str	r7, [r6, #52]	; 0x34
  STM32_ST_TIM->SR     = 0;
 80015e8:	6132      	str	r2, [r6, #16]
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 80015ea:	60f3      	str	r3, [r6, #12]
 80015ec:	e7e8      	b.n	80015c0 <chVTDoSetI+0x50>
 80015ee:	bf00      	nop
 80015f0:	200009b0 	.word	0x200009b0
	...

08001600 <chSysGetStatusAndLockX.part.0>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001600:	f3ef 8305 	mrs	r3, IPSR
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8001604:	2320      	movs	r3, #32
 8001606:	f383 8811 	msr	BASEPRI, r3
    else {
      chSysLock();
    }
  }
  return sts;
}
 800160a:	4770      	bx	lr
 800160c:	0000      	movs	r0, r0
	...

08001610 <chSysIntegrityCheckI>:
  if ((testmask & CH_INTEGRITY_RLIST) != 0U) {
 8001610:	07c2      	lsls	r2, r0, #31
bool chSysIntegrityCheckI(unsigned testmask) {
 8001612:	b410      	push	{r4}
  if ((testmask & CH_INTEGRITY_RLIST) != 0U) {
 8001614:	d512      	bpl.n	800163c <chSysIntegrityCheckI+0x2c>
    tp = ch.rlist.queue.next;
 8001616:	4b2a      	ldr	r3, [pc, #168]	; (80016c0 <chSysIntegrityCheckI+0xb0>)
 8001618:	6819      	ldr	r1, [r3, #0]
    while (tp != (thread_t *)&ch.rlist.queue) {
 800161a:	4299      	cmp	r1, r3
 800161c:	d043      	beq.n	80016a6 <chSysIntegrityCheckI+0x96>
    n = (cnt_t)0;
 800161e:	2200      	movs	r2, #0
      tp = tp->queue.next;
 8001620:	6809      	ldr	r1, [r1, #0]
    while (tp != (thread_t *)&ch.rlist.queue) {
 8001622:	4299      	cmp	r1, r3
      n++;
 8001624:	f102 0201 	add.w	r2, r2, #1
    while (tp != (thread_t *)&ch.rlist.queue) {
 8001628:	d1fa      	bne.n	8001620 <chSysIntegrityCheckI+0x10>
    tp = ch.rlist.queue.prev;
 800162a:	684c      	ldr	r4, [r1, #4]
    while (tp != (thread_t *)&ch.rlist.queue) {
 800162c:	428c      	cmp	r4, r1
 800162e:	d037      	beq.n	80016a0 <chSysIntegrityCheckI+0x90>
      tp = tp->queue.prev;
 8001630:	6864      	ldr	r4, [r4, #4]
    while (tp != (thread_t *)&ch.rlist.queue) {
 8001632:	429c      	cmp	r4, r3
      n--;
 8001634:	f102 32ff 	add.w	r2, r2, #4294967295
    while (tp != (thread_t *)&ch.rlist.queue) {
 8001638:	d1fa      	bne.n	8001630 <chSysIntegrityCheckI+0x20>
    if (n != (cnt_t)0) {
 800163a:	bb8a      	cbnz	r2, 80016a0 <chSysIntegrityCheckI+0x90>
  if ((testmask & CH_INTEGRITY_VTLIST) != 0U) {
 800163c:	0783      	lsls	r3, r0, #30
 800163e:	d514      	bpl.n	800166a <chSysIntegrityCheckI+0x5a>
    vtp = ch.vtlist.next;
 8001640:	4b1f      	ldr	r3, [pc, #124]	; (80016c0 <chSysIntegrityCheckI+0xb0>)
 8001642:	461c      	mov	r4, r3
 8001644:	f854 1f1c 	ldr.w	r1, [r4, #28]!
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
 8001648:	42a1      	cmp	r1, r4
 800164a:	d032      	beq.n	80016b2 <chSysIntegrityCheckI+0xa2>
    n = (cnt_t)0;
 800164c:	2200      	movs	r2, #0
      vtp = vtp->next;
 800164e:	6809      	ldr	r1, [r1, #0]
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
 8001650:	42a1      	cmp	r1, r4
      n++;
 8001652:	f102 0201 	add.w	r2, r2, #1
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
 8001656:	d1fa      	bne.n	800164e <chSysIntegrityCheckI+0x3e>
    vtp = ch.vtlist.prev;
 8001658:	6a1b      	ldr	r3, [r3, #32]
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
 800165a:	428b      	cmp	r3, r1
 800165c:	d020      	beq.n	80016a0 <chSysIntegrityCheckI+0x90>
      vtp = vtp->prev;
 800165e:	685b      	ldr	r3, [r3, #4]
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
 8001660:	42a3      	cmp	r3, r4
      n--;
 8001662:	f102 32ff 	add.w	r2, r2, #4294967295
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
 8001666:	d1fa      	bne.n	800165e <chSysIntegrityCheckI+0x4e>
    if (n != (cnt_t)0) {
 8001668:	b9d2      	cbnz	r2, 80016a0 <chSysIntegrityCheckI+0x90>
  if ((testmask & CH_INTEGRITY_REGISTRY) != 0U) {
 800166a:	f010 0004 	ands.w	r0, r0, #4
 800166e:	d015      	beq.n	800169c <chSysIntegrityCheckI+0x8c>
    tp = ch.rlist.newer;
 8001670:	4b13      	ldr	r3, [pc, #76]	; (80016c0 <chSysIntegrityCheckI+0xb0>)
 8001672:	691a      	ldr	r2, [r3, #16]
    while (tp != (thread_t *)&ch.rlist) {
 8001674:	429a      	cmp	r2, r3
    n = (cnt_t)0;
 8001676:	f04f 0000 	mov.w	r0, #0
    while (tp != (thread_t *)&ch.rlist) {
 800167a:	d004      	beq.n	8001686 <chSysIntegrityCheckI+0x76>
      tp = tp->newer;
 800167c:	6912      	ldr	r2, [r2, #16]
    while (tp != (thread_t *)&ch.rlist) {
 800167e:	429a      	cmp	r2, r3
      n++;
 8001680:	f100 0001 	add.w	r0, r0, #1
    while (tp != (thread_t *)&ch.rlist) {
 8001684:	d1fa      	bne.n	800167c <chSysIntegrityCheckI+0x6c>
    tp = ch.rlist.older;
 8001686:	695a      	ldr	r2, [r3, #20]
    while (tp != (thread_t *)&ch.rlist) {
 8001688:	429a      	cmp	r2, r3
 800168a:	d004      	beq.n	8001696 <chSysIntegrityCheckI+0x86>
      tp = tp->older;
 800168c:	6952      	ldr	r2, [r2, #20]
    while (tp != (thread_t *)&ch.rlist) {
 800168e:	429a      	cmp	r2, r3
      n--;
 8001690:	f100 30ff 	add.w	r0, r0, #4294967295
    while (tp != (thread_t *)&ch.rlist) {
 8001694:	d1fa      	bne.n	800168c <chSysIntegrityCheckI+0x7c>
    if (n != (cnt_t)0) {
 8001696:	3800      	subs	r0, #0
 8001698:	bf18      	it	ne
 800169a:	2001      	movne	r0, #1
}
 800169c:	bc10      	pop	{r4}
 800169e:	4770      	bx	lr
      return true;
 80016a0:	2001      	movs	r0, #1
}
 80016a2:	bc10      	pop	{r4}
 80016a4:	4770      	bx	lr
    tp = ch.rlist.queue.prev;
 80016a6:	685c      	ldr	r4, [r3, #4]
    while (tp != (thread_t *)&ch.rlist.queue) {
 80016a8:	429c      	cmp	r4, r3
    n = (cnt_t)0;
 80016aa:	bf18      	it	ne
 80016ac:	2200      	movne	r2, #0
    while (tp != (thread_t *)&ch.rlist.queue) {
 80016ae:	d1bf      	bne.n	8001630 <chSysIntegrityCheckI+0x20>
 80016b0:	e7c4      	b.n	800163c <chSysIntegrityCheckI+0x2c>
    vtp = ch.vtlist.prev;
 80016b2:	6a1b      	ldr	r3, [r3, #32]
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
 80016b4:	42a3      	cmp	r3, r4
    n = (cnt_t)0;
 80016b6:	bf18      	it	ne
 80016b8:	2200      	movne	r2, #0
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
 80016ba:	d1d0      	bne.n	800165e <chSysIntegrityCheckI+0x4e>
 80016bc:	e7d5      	b.n	800166a <chSysIntegrityCheckI+0x5a>
 80016be:	bf00      	nop
 80016c0:	200009b0 	.word	0x200009b0
	...

080016d0 <rt_test_002_001_execute>:
static void rt_test_002_001_execute(void) {
 80016d0:	b570      	push	{r4, r5, r6, lr}
  test_set_step(1);
 80016d2:	4e24      	ldr	r6, [pc, #144]	; (8001764 <rt_test_002_001_execute+0x94>)
 80016d4:	2001      	movs	r0, #1
 80016d6:	6030      	str	r0, [r6, #0]
 80016d8:	2520      	movs	r5, #32
 80016da:	f385 8811 	msr	BASEPRI, r5
    result = chSysIntegrityCheckI(CH_INTEGRITY_RLIST);
 80016de:	f7ff ff97 	bl	8001610 <chSysIntegrityCheckI>
 80016e2:	2300      	movs	r3, #0
 80016e4:	f383 8811 	msr	BASEPRI, r3
    test_assert(result == false, "ready list check failed");
 80016e8:	f080 0001 	eor.w	r0, r0, #1
 80016ec:	491e      	ldr	r1, [pc, #120]	; (8001768 <rt_test_002_001_execute+0x98>)
 80016ee:	b2c0      	uxtb	r0, r0
 80016f0:	f7ff f976 	bl	80009e0 <_test_assert>
 80016f4:	b100      	cbz	r0, 80016f8 <rt_test_002_001_execute+0x28>
}
 80016f6:	bd70      	pop	{r4, r5, r6, pc}
  test_set_step(2);
 80016f8:	4604      	mov	r4, r0
 80016fa:	2002      	movs	r0, #2
 80016fc:	6030      	str	r0, [r6, #0]
 80016fe:	f385 8811 	msr	BASEPRI, r5
    result = chSysIntegrityCheckI(CH_INTEGRITY_VTLIST);
 8001702:	f7ff ff85 	bl	8001610 <chSysIntegrityCheckI>
 8001706:	f384 8811 	msr	BASEPRI, r4
    test_assert(result == false, "virtual timers list check failed");
 800170a:	f080 0001 	eor.w	r0, r0, #1
 800170e:	4917      	ldr	r1, [pc, #92]	; (800176c <rt_test_002_001_execute+0x9c>)
 8001710:	b2c0      	uxtb	r0, r0
 8001712:	f7ff f965 	bl	80009e0 <_test_assert>
 8001716:	4604      	mov	r4, r0
 8001718:	2800      	cmp	r0, #0
 800171a:	d1ec      	bne.n	80016f6 <rt_test_002_001_execute+0x26>
  test_set_step(3);
 800171c:	2303      	movs	r3, #3
 800171e:	6033      	str	r3, [r6, #0]
 8001720:	f385 8811 	msr	BASEPRI, r5
    result = chSysIntegrityCheckI(CH_INTEGRITY_REGISTRY);
 8001724:	2004      	movs	r0, #4
 8001726:	f7ff ff73 	bl	8001610 <chSysIntegrityCheckI>
 800172a:	f384 8811 	msr	BASEPRI, r4
    test_assert(result == false, "registry list check failed");
 800172e:	f080 0001 	eor.w	r0, r0, #1
 8001732:	490f      	ldr	r1, [pc, #60]	; (8001770 <rt_test_002_001_execute+0xa0>)
 8001734:	b2c0      	uxtb	r0, r0
 8001736:	f7ff f953 	bl	80009e0 <_test_assert>
 800173a:	4604      	mov	r4, r0
 800173c:	2800      	cmp	r0, #0
 800173e:	d1da      	bne.n	80016f6 <rt_test_002_001_execute+0x26>
  test_set_step(4);
 8001740:	2304      	movs	r3, #4
 8001742:	6033      	str	r3, [r6, #0]
 8001744:	f385 8811 	msr	BASEPRI, r5
    result = chSysIntegrityCheckI(CH_INTEGRITY_PORT);
 8001748:	2008      	movs	r0, #8
 800174a:	f7ff ff61 	bl	8001610 <chSysIntegrityCheckI>
 800174e:	f384 8811 	msr	BASEPRI, r4
    test_assert(result == false, "port layer check failed");
 8001752:	f080 0001 	eor.w	r0, r0, #1
}
 8001756:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    test_assert(result == false, "port layer check failed");
 800175a:	4906      	ldr	r1, [pc, #24]	; (8001774 <rt_test_002_001_execute+0xa4>)
 800175c:	b2c0      	uxtb	r0, r0
 800175e:	f7ff b93f 	b.w	80009e0 <_test_assert>
 8001762:	bf00      	nop
 8001764:	2000149c 	.word	0x2000149c
 8001768:	0800908c 	.word	0x0800908c
 800176c:	080090a4 	.word	0x080090a4
 8001770:	080090c8 	.word	0x080090c8
 8001774:	080090e4 	.word	0x080090e4
	...

08001780 <_idle_thread>:
}
 8001780:	e7fe      	b.n	8001780 <_idle_thread>
 8001782:	bf00      	nop
	...

08001790 <_ctl>:
#else
    break;
#endif
  }
  return MSG_OK;
}
 8001790:	2000      	movs	r0, #0
 8001792:	4770      	bx	lr
	...

080017a0 <oslib_test_001_003_execute>:
 * <h2>Test Steps</h2>
 * - [1.3.1] Prints the configuration options settings.
 * .
 */

static void oslib_test_001_003_execute(void) {
 80017a0:	b538      	push	{r3, r4, r5, lr}

  /* [1.3.1] Prints the configuration options settings.*/
  test_set_step(1);
 80017a2:	4b4b      	ldr	r3, [pc, #300]	; (80018d0 <oslib_test_001_003_execute+0x130>)
  {
    test_print("--- CH_CFG_USE_MAILBOXES:               ");
    test_printn(CH_CFG_USE_MAILBOXES);
    test_println("");
 80017a4:	4c4b      	ldr	r4, [pc, #300]	; (80018d4 <oslib_test_001_003_execute+0x134>)
    test_print("--- CH_CFG_USE_MAILBOXES:               ");
 80017a6:	484c      	ldr	r0, [pc, #304]	; (80018d8 <oslib_test_001_003_execute+0x138>)
  test_set_step(1);
 80017a8:	2501      	movs	r5, #1
 80017aa:	601d      	str	r5, [r3, #0]
    test_print("--- CH_CFG_USE_MAILBOXES:               ");
 80017ac:	f7ff fa80 	bl	8000cb0 <test_print>
void test_printn(uint32_t n) {
 80017b0:	4628      	mov	r0, r5
 80017b2:	f7ff f97d 	bl	8000ab0 <test_printn.part.0>
    test_println("");
 80017b6:	4620      	mov	r0, r4
 80017b8:	f7ff fa5a 	bl	8000c70 <test_println>
    test_print("--- CH_CFG_USE_MEMCORE:                 ");
 80017bc:	4847      	ldr	r0, [pc, #284]	; (80018dc <oslib_test_001_003_execute+0x13c>)
 80017be:	f7ff fa77 	bl	8000cb0 <test_print>
 80017c2:	4628      	mov	r0, r5
 80017c4:	f7ff f974 	bl	8000ab0 <test_printn.part.0>
    test_printn(CH_CFG_USE_MEMCORE);
    test_println("");
 80017c8:	4620      	mov	r0, r4
 80017ca:	f7ff fa51 	bl	8000c70 <test_println>
    test_print("--- CH_CFG_USE_HEAP:                    ");
 80017ce:	4844      	ldr	r0, [pc, #272]	; (80018e0 <oslib_test_001_003_execute+0x140>)
 80017d0:	f7ff fa6e 	bl	8000cb0 <test_print>
 80017d4:	4628      	mov	r0, r5
 80017d6:	f7ff f96b 	bl	8000ab0 <test_printn.part.0>
    test_printn(CH_CFG_USE_HEAP);
    test_println("");
 80017da:	4620      	mov	r0, r4
 80017dc:	f7ff fa48 	bl	8000c70 <test_println>
    test_print("--- CH_CFG_USE_MEMPOOLS:                ");
 80017e0:	4840      	ldr	r0, [pc, #256]	; (80018e4 <oslib_test_001_003_execute+0x144>)
 80017e2:	f7ff fa65 	bl	8000cb0 <test_print>
 80017e6:	4628      	mov	r0, r5
 80017e8:	f7ff f962 	bl	8000ab0 <test_printn.part.0>
    test_printn(CH_CFG_USE_MEMPOOLS);
    test_println("");
 80017ec:	4620      	mov	r0, r4
 80017ee:	f7ff fa3f 	bl	8000c70 <test_println>
    test_print("--- CH_CFG_USE_OBJ_FIFOS:               ");
 80017f2:	483d      	ldr	r0, [pc, #244]	; (80018e8 <oslib_test_001_003_execute+0x148>)
 80017f4:	f7ff fa5c 	bl	8000cb0 <test_print>
 80017f8:	4628      	mov	r0, r5
 80017fa:	f7ff f959 	bl	8000ab0 <test_printn.part.0>
    test_printn(CH_CFG_USE_OBJ_FIFOS);
    test_println("");
 80017fe:	4620      	mov	r0, r4
 8001800:	f7ff fa36 	bl	8000c70 <test_println>
    test_print("--- CH_CFG_USE_PIPES:                   ");
 8001804:	4839      	ldr	r0, [pc, #228]	; (80018ec <oslib_test_001_003_execute+0x14c>)
 8001806:	f7ff fa53 	bl	8000cb0 <test_print>
 800180a:	4628      	mov	r0, r5
 800180c:	f7ff f950 	bl	8000ab0 <test_printn.part.0>
    test_printn(CH_CFG_USE_PIPES);
    test_println("");
 8001810:	4620      	mov	r0, r4
 8001812:	f7ff fa2d 	bl	8000c70 <test_println>
    test_print("--- CH_CFG_USE_OBJ_CACHES:              ");
 8001816:	4836      	ldr	r0, [pc, #216]	; (80018f0 <oslib_test_001_003_execute+0x150>)
 8001818:	f7ff fa4a 	bl	8000cb0 <test_print>
 800181c:	4628      	mov	r0, r5
 800181e:	f7ff f947 	bl	8000ab0 <test_printn.part.0>
    test_printn(CH_CFG_USE_OBJ_CACHES);
    test_println("");
 8001822:	4620      	mov	r0, r4
 8001824:	f7ff fa24 	bl	8000c70 <test_println>
    test_print("--- CH_CFG_USE_DELEGATES:               ");
 8001828:	4832      	ldr	r0, [pc, #200]	; (80018f4 <oslib_test_001_003_execute+0x154>)
 800182a:	f7ff fa41 	bl	8000cb0 <test_print>
 800182e:	4628      	mov	r0, r5
 8001830:	f7ff f93e 	bl	8000ab0 <test_printn.part.0>
    test_printn(CH_CFG_USE_DELEGATES);
    test_println("");
 8001834:	4620      	mov	r0, r4
 8001836:	f7ff fa1b 	bl	8000c70 <test_println>
    test_print("--- CH_CFG_USE_FACTORY:                 ");
 800183a:	482f      	ldr	r0, [pc, #188]	; (80018f8 <oslib_test_001_003_execute+0x158>)
 800183c:	f7ff fa38 	bl	8000cb0 <test_print>
 8001840:	4628      	mov	r0, r5
 8001842:	f7ff f935 	bl	8000ab0 <test_printn.part.0>
    test_printn(CH_CFG_USE_FACTORY);
    test_println("");
 8001846:	4620      	mov	r0, r4
 8001848:	f7ff fa12 	bl	8000c70 <test_println>
    test_print("--- CH_CFG_FACTORY_MAX_NAMES_LENGTH:    ");
 800184c:	482b      	ldr	r0, [pc, #172]	; (80018fc <oslib_test_001_003_execute+0x15c>)
 800184e:	f7ff fa2f 	bl	8000cb0 <test_print>
 8001852:	2008      	movs	r0, #8
 8001854:	f7ff f92c 	bl	8000ab0 <test_printn.part.0>
    test_printn(CH_CFG_FACTORY_MAX_NAMES_LENGTH);
    test_println("");
 8001858:	4620      	mov	r0, r4
 800185a:	f7ff fa09 	bl	8000c70 <test_println>
    test_print("--- CH_CFG_FACTORY_OBJECTS_REGISTRY:    ");
 800185e:	4828      	ldr	r0, [pc, #160]	; (8001900 <oslib_test_001_003_execute+0x160>)
 8001860:	f7ff fa26 	bl	8000cb0 <test_print>
 8001864:	4628      	mov	r0, r5
 8001866:	f7ff f923 	bl	8000ab0 <test_printn.part.0>
    test_printn(CH_CFG_FACTORY_OBJECTS_REGISTRY);
    test_println("");
 800186a:	4620      	mov	r0, r4
 800186c:	f7ff fa00 	bl	8000c70 <test_println>
    test_print("--- CH_CFG_FACTORY_GENERIC_BUFFERS:     ");
 8001870:	4824      	ldr	r0, [pc, #144]	; (8001904 <oslib_test_001_003_execute+0x164>)
 8001872:	f7ff fa1d 	bl	8000cb0 <test_print>
 8001876:	4628      	mov	r0, r5
 8001878:	f7ff f91a 	bl	8000ab0 <test_printn.part.0>
    test_printn(CH_CFG_FACTORY_GENERIC_BUFFERS);
    test_println("");
 800187c:	4620      	mov	r0, r4
 800187e:	f7ff f9f7 	bl	8000c70 <test_println>
    test_print("--- CH_CFG_FACTORY_SEMAPHORES:          ");
 8001882:	4821      	ldr	r0, [pc, #132]	; (8001908 <oslib_test_001_003_execute+0x168>)
 8001884:	f7ff fa14 	bl	8000cb0 <test_print>
 8001888:	4628      	mov	r0, r5
 800188a:	f7ff f911 	bl	8000ab0 <test_printn.part.0>
    test_printn(CH_CFG_FACTORY_SEMAPHORES);
    test_println("");
 800188e:	4620      	mov	r0, r4
 8001890:	f7ff f9ee 	bl	8000c70 <test_println>
    test_print("--- CH_CFG_FACTORY_MAILBOXES:           ");
 8001894:	481d      	ldr	r0, [pc, #116]	; (800190c <oslib_test_001_003_execute+0x16c>)
 8001896:	f7ff fa0b 	bl	8000cb0 <test_print>
 800189a:	4628      	mov	r0, r5
 800189c:	f7ff f908 	bl	8000ab0 <test_printn.part.0>
    test_printn(CH_CFG_FACTORY_MAILBOXES);
    test_println("");
 80018a0:	4620      	mov	r0, r4
 80018a2:	f7ff f9e5 	bl	8000c70 <test_println>
    test_print("--- CH_CFG_FACTORY_OBJ_FIFOS:           ");
 80018a6:	481a      	ldr	r0, [pc, #104]	; (8001910 <oslib_test_001_003_execute+0x170>)
 80018a8:	f7ff fa02 	bl	8000cb0 <test_print>
 80018ac:	4628      	mov	r0, r5
 80018ae:	f7ff f8ff 	bl	8000ab0 <test_printn.part.0>
    test_printn(CH_CFG_FACTORY_OBJ_FIFOS);
    test_println("");
 80018b2:	4620      	mov	r0, r4
 80018b4:	f7ff f9dc 	bl	8000c70 <test_println>
    test_print("--- CH_CFG_FACTORY_PIPES:               ");
 80018b8:	4816      	ldr	r0, [pc, #88]	; (8001914 <oslib_test_001_003_execute+0x174>)
 80018ba:	f7ff f9f9 	bl	8000cb0 <test_print>
 80018be:	4628      	mov	r0, r5
 80018c0:	f7ff f8f6 	bl	8000ab0 <test_printn.part.0>
    test_printn(CH_CFG_FACTORY_PIPES);
    test_println("");
 80018c4:	4620      	mov	r0, r4
  }
  test_end_step(1);
}
 80018c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    test_println("");
 80018ca:	f7ff b9d1 	b.w	8000c70 <test_println>
 80018ce:	bf00      	nop
 80018d0:	2000149c 	.word	0x2000149c
 80018d4:	08009bc0 	.word	0x08009bc0
 80018d8:	080090fc 	.word	0x080090fc
 80018dc:	08009128 	.word	0x08009128
 80018e0:	08009154 	.word	0x08009154
 80018e4:	08009180 	.word	0x08009180
 80018e8:	080091ac 	.word	0x080091ac
 80018ec:	080091d8 	.word	0x080091d8
 80018f0:	08009204 	.word	0x08009204
 80018f4:	08009230 	.word	0x08009230
 80018f8:	0800925c 	.word	0x0800925c
 80018fc:	08009288 	.word	0x08009288
 8001900:	080092b4 	.word	0x080092b4
 8001904:	080092e0 	.word	0x080092e0
 8001908:	0800930c 	.word	0x0800930c
 800190c:	08009338 	.word	0x08009338
 8001910:	08009364 	.word	0x08009364
 8001914:	08009390 	.word	0x08009390
	...

08001920 <oslib_test_001_002_execute>:
static void oslib_test_001_002_execute(void) {
 8001920:	b538      	push	{r3, r4, r5, lr}
  test_set_step(1);
 8001922:	4b19      	ldr	r3, [pc, #100]	; (8001988 <oslib_test_001_002_execute+0x68>)
    test_println("--- Product:                            ChibiOS/LIB");
 8001924:	4819      	ldr	r0, [pc, #100]	; (800198c <oslib_test_001_002_execute+0x6c>)
    test_println("");
 8001926:	4c1a      	ldr	r4, [pc, #104]	; (8001990 <oslib_test_001_002_execute+0x70>)
  test_set_step(1);
 8001928:	2501      	movs	r5, #1
 800192a:	601d      	str	r5, [r3, #0]
    test_println("--- Product:                            ChibiOS/LIB");
 800192c:	f7ff f9a0 	bl	8000c70 <test_println>
    test_print("--- Stable Flag:                        ");
 8001930:	4818      	ldr	r0, [pc, #96]	; (8001994 <oslib_test_001_002_execute+0x74>)
 8001932:	f7ff f9bd 	bl	8000cb0 <test_print>
 8001936:	4628      	mov	r0, r5
 8001938:	f7ff f8ba 	bl	8000ab0 <test_printn.part.0>
    test_println("");
 800193c:	4620      	mov	r0, r4
 800193e:	f7ff f997 	bl	8000c70 <test_println>
    test_print("--- Version String:                     ");
 8001942:	4815      	ldr	r0, [pc, #84]	; (8001998 <oslib_test_001_002_execute+0x78>)
 8001944:	f7ff f9b4 	bl	8000cb0 <test_print>
    test_println(CH_OSLIB_VERSION);
 8001948:	4814      	ldr	r0, [pc, #80]	; (800199c <oslib_test_001_002_execute+0x7c>)
 800194a:	f7ff f991 	bl	8000c70 <test_println>
    test_print("--- Major Number:                       ");
 800194e:	4814      	ldr	r0, [pc, #80]	; (80019a0 <oslib_test_001_002_execute+0x80>)
 8001950:	f7ff f9ae 	bl	8000cb0 <test_print>
 8001954:	4628      	mov	r0, r5
 8001956:	f7ff f8ab 	bl	8000ab0 <test_printn.part.0>
    test_println("");
 800195a:	4620      	mov	r0, r4
 800195c:	f7ff f988 	bl	8000c70 <test_println>
    test_print("--- Minor Number:                       ");
 8001960:	4810      	ldr	r0, [pc, #64]	; (80019a4 <oslib_test_001_002_execute+0x84>)
 8001962:	f7ff f9a5 	bl	8000cb0 <test_print>
 8001966:	2002      	movs	r0, #2
 8001968:	f7ff f8a2 	bl	8000ab0 <test_printn.part.0>
    test_println("");
 800196c:	4620      	mov	r0, r4
 800196e:	f7ff f97f 	bl	8000c70 <test_println>
    test_print("--- Patch Number:                       ");
 8001972:	480d      	ldr	r0, [pc, #52]	; (80019a8 <oslib_test_001_002_execute+0x88>)
 8001974:	f7ff f99c 	bl	8000cb0 <test_print>
    test_printn(CH_OSLIB_PATCH);
 8001978:	2000      	movs	r0, #0
 800197a:	f7ff f8c9 	bl	8000b10 <test_printn>
    test_println("");
 800197e:	4620      	mov	r0, r4
}
 8001980:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    test_println("");
 8001984:	f7ff b974 	b.w	8000c70 <test_println>
 8001988:	2000149c 	.word	0x2000149c
 800198c:	080093bc 	.word	0x080093bc
 8001990:	08009bc0 	.word	0x08009bc0
 8001994:	080093f0 	.word	0x080093f0
 8001998:	0800941c 	.word	0x0800941c
 800199c:	08009448 	.word	0x08009448
 80019a0:	08009450 	.word	0x08009450
 80019a4:	0800947c 	.word	0x0800947c
 80019a8:	080094a8 	.word	0x080094a8
 80019ac:	00000000 	.word	0x00000000

080019b0 <rt_test_011_012_execute>:
 * - [11.12.8] The size of an event listener is printed.
 * - [11.12.9] The size of a mailbox is printed.
 * .
 */

static void rt_test_011_012_execute(void) {
 80019b0:	b570      	push	{r4, r5, r6, lr}

  /* [11.12.1] The size of the system area is printed.*/
  test_set_step(1);
 80019b2:	4d33      	ldr	r5, [pc, #204]	; (8001a80 <rt_test_011_012_execute+0xd0>)
  {
    test_print("--- System: ");
    test_printn(sizeof(ch_system_t));
    test_println(" bytes");
 80019b4:	4c33      	ldr	r4, [pc, #204]	; (8001a84 <rt_test_011_012_execute+0xd4>)
    test_print("--- System: ");
 80019b6:	4834      	ldr	r0, [pc, #208]	; (8001a88 <rt_test_011_012_execute+0xd8>)
  test_set_step(1);
 80019b8:	2301      	movs	r3, #1
 80019ba:	602b      	str	r3, [r5, #0]
    test_print("--- System: ");
 80019bc:	f7ff f978 	bl	8000cb0 <test_print>
 80019c0:	2078      	movs	r0, #120	; 0x78
 80019c2:	f7ff f875 	bl	8000ab0 <test_printn.part.0>
    test_println(" bytes");
 80019c6:	4620      	mov	r0, r4
 80019c8:	f7ff f952 	bl	8000c70 <test_println>
  }
  test_end_step(1);

  /* [11.12.2] The size of a thread structure is printed.*/
  test_set_step(2);
 80019cc:	2302      	movs	r3, #2
  {
    test_print("--- Thread: ");
 80019ce:	482f      	ldr	r0, [pc, #188]	; (8001a8c <rt_test_011_012_execute+0xdc>)
  test_set_step(2);
 80019d0:	602b      	str	r3, [r5, #0]
    test_print("--- Thread: ");
 80019d2:	f7ff f96d 	bl	8000cb0 <test_print>
 80019d6:	2044      	movs	r0, #68	; 0x44
 80019d8:	f7ff f86a 	bl	8000ab0 <test_printn.part.0>
    test_printn(sizeof(thread_t));
    test_println(" bytes");
 80019dc:	4620      	mov	r0, r4
 80019de:	f7ff f947 	bl	8000c70 <test_println>
  }
  test_end_step(2);

  /* [11.12.3] The size of a virtual timer structure is printed.*/
  test_set_step(3);
 80019e2:	2303      	movs	r3, #3
  {
    test_print("--- Timer : ");
 80019e4:	482a      	ldr	r0, [pc, #168]	; (8001a90 <rt_test_011_012_execute+0xe0>)
  test_set_step(3);
 80019e6:	602b      	str	r3, [r5, #0]
    test_print("--- Timer : ");
 80019e8:	f7ff f962 	bl	8000cb0 <test_print>
 80019ec:	2014      	movs	r0, #20
 80019ee:	f7ff f85f 	bl	8000ab0 <test_printn.part.0>
    test_printn(sizeof(virtual_timer_t));
    test_println(" bytes");
 80019f2:	4620      	mov	r0, r4
 80019f4:	f7ff f93c 	bl	8000c70 <test_println>
  }
  test_end_step(3);

  /* [11.12.4] The size of a semaphore structure is printed.*/
  test_set_step(4);
 80019f8:	2604      	movs	r6, #4
  {
#if CH_CFG_USE_SEMAPHORES || defined(__DOXYGEN__)
    test_print("--- Semaph: ");
 80019fa:	4826      	ldr	r0, [pc, #152]	; (8001a94 <rt_test_011_012_execute+0xe4>)
  test_set_step(4);
 80019fc:	602e      	str	r6, [r5, #0]
    test_print("--- Semaph: ");
 80019fe:	f7ff f957 	bl	8000cb0 <test_print>
 8001a02:	200c      	movs	r0, #12
 8001a04:	f7ff f854 	bl	8000ab0 <test_printn.part.0>
    test_printn(sizeof(semaphore_t));
    test_println(" bytes");
 8001a08:	4620      	mov	r0, r4
 8001a0a:	f7ff f931 	bl	8000c70 <test_println>
#endif
  }
  test_end_step(4);

  /* [11.12.5] The size of a mutex is printed.*/
  test_set_step(5);
 8001a0e:	2305      	movs	r3, #5
  {
#if CH_CFG_USE_MUTEXES || defined(__DOXYGEN__)
    test_print("--- Mutex : ");
 8001a10:	4821      	ldr	r0, [pc, #132]	; (8001a98 <rt_test_011_012_execute+0xe8>)
  test_set_step(5);
 8001a12:	602b      	str	r3, [r5, #0]
    test_print("--- Mutex : ");
 8001a14:	f7ff f94c 	bl	8000cb0 <test_print>
 8001a18:	2010      	movs	r0, #16
 8001a1a:	f7ff f849 	bl	8000ab0 <test_printn.part.0>
    test_printn(sizeof(mutex_t));
    test_println(" bytes");
 8001a1e:	4620      	mov	r0, r4
 8001a20:	f7ff f926 	bl	8000c70 <test_println>
#endif
  }
  test_end_step(5);

  /* [11.12.6] The size of a condition variable is printed.*/
  test_set_step(6);
 8001a24:	2306      	movs	r3, #6
  {
#if CH_CFG_USE_CONDVARS || defined(__DOXYGEN__)
    test_print("--- CondV.: ");
 8001a26:	481d      	ldr	r0, [pc, #116]	; (8001a9c <rt_test_011_012_execute+0xec>)
  test_set_step(6);
 8001a28:	602b      	str	r3, [r5, #0]
    test_print("--- CondV.: ");
 8001a2a:	f7ff f941 	bl	8000cb0 <test_print>
 8001a2e:	2008      	movs	r0, #8
 8001a30:	f7ff f83e 	bl	8000ab0 <test_printn.part.0>
    test_printn(sizeof(condition_variable_t));
    test_println(" bytes");
 8001a34:	4620      	mov	r0, r4
 8001a36:	f7ff f91b 	bl	8000c70 <test_println>
#endif
  }
  test_end_step(6);

  /* [11.12.7] The size of an event source is printed.*/
  test_set_step(7);
 8001a3a:	2307      	movs	r3, #7
  {
#if CH_CFG_USE_EVENTS || defined(__DOXYGEN__)
    test_print("--- EventS: ");
 8001a3c:	4818      	ldr	r0, [pc, #96]	; (8001aa0 <rt_test_011_012_execute+0xf0>)
  test_set_step(7);
 8001a3e:	602b      	str	r3, [r5, #0]
    test_print("--- EventS: ");
 8001a40:	f7ff f936 	bl	8000cb0 <test_print>
 8001a44:	4630      	mov	r0, r6
 8001a46:	f7ff f833 	bl	8000ab0 <test_printn.part.0>
    test_printn(sizeof(event_source_t));
    test_println(" bytes");
 8001a4a:	4620      	mov	r0, r4
 8001a4c:	f7ff f910 	bl	8000c70 <test_println>
#endif
  }
  test_end_step(7);

  /* [11.12.8] The size of an event listener is printed.*/
  test_set_step(8);
 8001a50:	2308      	movs	r3, #8
  {
#if CH_CFG_USE_EVENTS || defined(__DOXYGEN__)
    test_print("--- EventL: ");
 8001a52:	4814      	ldr	r0, [pc, #80]	; (8001aa4 <rt_test_011_012_execute+0xf4>)
  test_set_step(8);
 8001a54:	602b      	str	r3, [r5, #0]
    test_print("--- EventL: ");
 8001a56:	f7ff f92b 	bl	8000cb0 <test_print>
 8001a5a:	2014      	movs	r0, #20
 8001a5c:	f7ff f828 	bl	8000ab0 <test_printn.part.0>
    test_printn(sizeof(event_listener_t));
    test_println(" bytes");
 8001a60:	4620      	mov	r0, r4
 8001a62:	f7ff f905 	bl	8000c70 <test_println>
#endif
  }
  test_end_step(8);

  /* [11.12.9] The size of a mailbox is printed.*/
  test_set_step(9);
 8001a66:	2309      	movs	r3, #9
  {
#if CH_CFG_USE_MAILBOXES || defined(__DOXYGEN__)
    test_print("--- MailB.: ");
 8001a68:	480f      	ldr	r0, [pc, #60]	; (8001aa8 <rt_test_011_012_execute+0xf8>)
  test_set_step(9);
 8001a6a:	602b      	str	r3, [r5, #0]
    test_print("--- MailB.: ");
 8001a6c:	f7ff f920 	bl	8000cb0 <test_print>
 8001a70:	2028      	movs	r0, #40	; 0x28
 8001a72:	f7ff f81d 	bl	8000ab0 <test_printn.part.0>
    test_printn(sizeof(mailbox_t));
    test_println(" bytes");
 8001a76:	4620      	mov	r0, r4
#endif
  }
  test_end_step(9);
}
 8001a78:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    test_println(" bytes");
 8001a7c:	f7ff b8f8 	b.w	8000c70 <test_println>
 8001a80:	2000149c 	.word	0x2000149c
 8001a84:	080094e4 	.word	0x080094e4
 8001a88:	080094d4 	.word	0x080094d4
 8001a8c:	080094ec 	.word	0x080094ec
 8001a90:	080094fc 	.word	0x080094fc
 8001a94:	0800950c 	.word	0x0800950c
 8001a98:	0800951c 	.word	0x0800951c
 8001a9c:	0800952c 	.word	0x0800952c
 8001aa0:	0800953c 	.word	0x0800953c
 8001aa4:	0800954c 	.word	0x0800954c
 8001aa8:	0800955c 	.word	0x0800955c
 8001aac:	00000000 	.word	0x00000000

08001ab0 <rt_test_001_003_execute>:
 * <h2>Test Steps</h2>
 * - [1.3.1] Prints the configuration options settings.
 * .
 */

static void rt_test_001_003_execute(void) {
 8001ab0:	b538      	push	{r3, r4, r5, lr}

  /* [1.3.1] Prints the configuration options settings.*/
  test_set_step(1);
 8001ab2:	4b93      	ldr	r3, [pc, #588]	; (8001d00 <rt_test_001_003_execute+0x250>)
  {
    test_print("--- CH_CFG_ST_RESOLUTION:               ");
    test_printn(CH_CFG_ST_RESOLUTION);
    test_println("");
 8001ab4:	4c93      	ldr	r4, [pc, #588]	; (8001d04 <rt_test_001_003_execute+0x254>)
    test_print("--- CH_CFG_ST_RESOLUTION:               ");
 8001ab6:	4894      	ldr	r0, [pc, #592]	; (8001d08 <rt_test_001_003_execute+0x258>)
  test_set_step(1);
 8001ab8:	2501      	movs	r5, #1
 8001aba:	601d      	str	r5, [r3, #0]
    test_print("--- CH_CFG_ST_RESOLUTION:               ");
 8001abc:	f7ff f8f8 	bl	8000cb0 <test_print>
 8001ac0:	2020      	movs	r0, #32
 8001ac2:	f7fe fff5 	bl	8000ab0 <test_printn.part.0>
    test_println("");
 8001ac6:	4620      	mov	r0, r4
 8001ac8:	f7ff f8d2 	bl	8000c70 <test_println>
    test_print("--- CH_CFG_ST_FREQUENCY:                ");
 8001acc:	488f      	ldr	r0, [pc, #572]	; (8001d0c <rt_test_001_003_execute+0x25c>)
 8001ace:	f7ff f8ef 	bl	8000cb0 <test_print>
 8001ad2:	f242 7010 	movw	r0, #10000	; 0x2710
 8001ad6:	f7fe ffeb 	bl	8000ab0 <test_printn.part.0>
    test_printn(CH_CFG_ST_FREQUENCY);
    test_println("");
 8001ada:	4620      	mov	r0, r4
 8001adc:	f7ff f8c8 	bl	8000c70 <test_println>
    test_print("--- CH_CFG_INTERVALS_SIZE:              ");
 8001ae0:	488b      	ldr	r0, [pc, #556]	; (8001d10 <rt_test_001_003_execute+0x260>)
 8001ae2:	f7ff f8e5 	bl	8000cb0 <test_print>
 8001ae6:	2020      	movs	r0, #32
 8001ae8:	f7fe ffe2 	bl	8000ab0 <test_printn.part.0>
    test_printn(CH_CFG_INTERVALS_SIZE);
    test_println("");
 8001aec:	4620      	mov	r0, r4
 8001aee:	f7ff f8bf 	bl	8000c70 <test_println>
    test_print("--- CH_CFG_TIME_TYPES_SIZE:             ");
 8001af2:	4888      	ldr	r0, [pc, #544]	; (8001d14 <rt_test_001_003_execute+0x264>)
 8001af4:	f7ff f8dc 	bl	8000cb0 <test_print>
 8001af8:	2020      	movs	r0, #32
 8001afa:	f7fe ffd9 	bl	8000ab0 <test_printn.part.0>
    test_printn(CH_CFG_TIME_TYPES_SIZE);
    test_println("");
 8001afe:	4620      	mov	r0, r4
 8001b00:	f7ff f8b6 	bl	8000c70 <test_println>
    test_print("--- CH_CFG_ST_TIMEDELTA:                ");
 8001b04:	4884      	ldr	r0, [pc, #528]	; (8001d18 <rt_test_001_003_execute+0x268>)
 8001b06:	f7ff f8d3 	bl	8000cb0 <test_print>
 8001b0a:	2002      	movs	r0, #2
 8001b0c:	f7fe ffd0 	bl	8000ab0 <test_printn.part.0>
    test_printn(CH_CFG_ST_TIMEDELTA);
    test_println("");
 8001b10:	4620      	mov	r0, r4
 8001b12:	f7ff f8ad 	bl	8000c70 <test_println>
    test_print("--- CH_CFG_TIME_QUANTUM:                ");
 8001b16:	4881      	ldr	r0, [pc, #516]	; (8001d1c <rt_test_001_003_execute+0x26c>)
 8001b18:	f7ff f8ca 	bl	8000cb0 <test_print>
    test_printn(CH_CFG_TIME_QUANTUM);
 8001b1c:	2000      	movs	r0, #0
 8001b1e:	f7fe fff7 	bl	8000b10 <test_printn>
    test_println("");
 8001b22:	4620      	mov	r0, r4
 8001b24:	f7ff f8a4 	bl	8000c70 <test_println>
    test_print("--- CH_CFG_MEMCORE_SIZE:                ");
 8001b28:	487d      	ldr	r0, [pc, #500]	; (8001d20 <rt_test_001_003_execute+0x270>)
 8001b2a:	f7ff f8c1 	bl	8000cb0 <test_print>
    test_printn(CH_CFG_MEMCORE_SIZE);
 8001b2e:	2000      	movs	r0, #0
 8001b30:	f7fe ffee 	bl	8000b10 <test_printn>
    test_println("");
 8001b34:	4620      	mov	r0, r4
 8001b36:	f7ff f89b 	bl	8000c70 <test_println>
    test_print("--- CH_CFG_NO_IDLE_THREAD:              ");
 8001b3a:	487a      	ldr	r0, [pc, #488]	; (8001d24 <rt_test_001_003_execute+0x274>)
 8001b3c:	f7ff f8b8 	bl	8000cb0 <test_print>
    test_printn(CH_CFG_NO_IDLE_THREAD);
 8001b40:	2000      	movs	r0, #0
 8001b42:	f7fe ffe5 	bl	8000b10 <test_printn>
    test_println("");
 8001b46:	4620      	mov	r0, r4
 8001b48:	f7ff f892 	bl	8000c70 <test_println>
    test_print("--- CH_CFG_OPTIMIZE_SPEED:              ");
 8001b4c:	4876      	ldr	r0, [pc, #472]	; (8001d28 <rt_test_001_003_execute+0x278>)
 8001b4e:	f7ff f8af 	bl	8000cb0 <test_print>
 8001b52:	4628      	mov	r0, r5
 8001b54:	f7fe ffac 	bl	8000ab0 <test_printn.part.0>
    test_printn(CH_CFG_OPTIMIZE_SPEED);
    test_println("");
 8001b58:	4620      	mov	r0, r4
 8001b5a:	f7ff f889 	bl	8000c70 <test_println>
    test_print("--- CH_CFG_USE_TM:                      ");
 8001b5e:	4873      	ldr	r0, [pc, #460]	; (8001d2c <rt_test_001_003_execute+0x27c>)
 8001b60:	f7ff f8a6 	bl	8000cb0 <test_print>
 8001b64:	4628      	mov	r0, r5
 8001b66:	f7fe ffa3 	bl	8000ab0 <test_printn.part.0>
    test_printn(CH_CFG_USE_TM);
    test_println("");
 8001b6a:	4620      	mov	r0, r4
 8001b6c:	f7ff f880 	bl	8000c70 <test_println>
    test_print("--- CH_CFG_USE_REGISTRY:                ");
 8001b70:	486f      	ldr	r0, [pc, #444]	; (8001d30 <rt_test_001_003_execute+0x280>)
 8001b72:	f7ff f89d 	bl	8000cb0 <test_print>
 8001b76:	4628      	mov	r0, r5
 8001b78:	f7fe ff9a 	bl	8000ab0 <test_printn.part.0>
    test_printn(CH_CFG_USE_REGISTRY);
    test_println("");
 8001b7c:	4620      	mov	r0, r4
 8001b7e:	f7ff f877 	bl	8000c70 <test_println>
    test_print("--- CH_CFG_USE_WAITEXIT:                ");
 8001b82:	486c      	ldr	r0, [pc, #432]	; (8001d34 <rt_test_001_003_execute+0x284>)
 8001b84:	f7ff f894 	bl	8000cb0 <test_print>
 8001b88:	4628      	mov	r0, r5
 8001b8a:	f7fe ff91 	bl	8000ab0 <test_printn.part.0>
    test_printn(CH_CFG_USE_WAITEXIT);
    test_println("");
 8001b8e:	4620      	mov	r0, r4
 8001b90:	f7ff f86e 	bl	8000c70 <test_println>
    test_print("--- CH_CFG_USE_SEMAPHORES:              ");
 8001b94:	4868      	ldr	r0, [pc, #416]	; (8001d38 <rt_test_001_003_execute+0x288>)
 8001b96:	f7ff f88b 	bl	8000cb0 <test_print>
 8001b9a:	4628      	mov	r0, r5
 8001b9c:	f7fe ff88 	bl	8000ab0 <test_printn.part.0>
    test_printn(CH_CFG_USE_SEMAPHORES);
    test_println("");
 8001ba0:	4620      	mov	r0, r4
 8001ba2:	f7ff f865 	bl	8000c70 <test_println>
    test_print("--- CH_CFG_USE_SEMAPHORES_PRIORITY:     ");
 8001ba6:	4865      	ldr	r0, [pc, #404]	; (8001d3c <rt_test_001_003_execute+0x28c>)
 8001ba8:	f7ff f882 	bl	8000cb0 <test_print>
    test_printn(CH_CFG_USE_SEMAPHORES_PRIORITY);
 8001bac:	2000      	movs	r0, #0
 8001bae:	f7fe ffaf 	bl	8000b10 <test_printn>
    test_println("");
 8001bb2:	4620      	mov	r0, r4
 8001bb4:	f7ff f85c 	bl	8000c70 <test_println>
    test_print("--- CH_CFG_USE_MUTEXES:                 ");
 8001bb8:	4861      	ldr	r0, [pc, #388]	; (8001d40 <rt_test_001_003_execute+0x290>)
 8001bba:	f7ff f879 	bl	8000cb0 <test_print>
 8001bbe:	4628      	mov	r0, r5
 8001bc0:	f7fe ff76 	bl	8000ab0 <test_printn.part.0>
    test_printn(CH_CFG_USE_MUTEXES);
    test_println("");
 8001bc4:	4620      	mov	r0, r4
 8001bc6:	f7ff f853 	bl	8000c70 <test_println>
    test_print("--- CH_CFG_USE_MUTEXES_RECURSIVE:       ");
 8001bca:	485e      	ldr	r0, [pc, #376]	; (8001d44 <rt_test_001_003_execute+0x294>)
 8001bcc:	f7ff f870 	bl	8000cb0 <test_print>
    test_printn(CH_CFG_USE_MUTEXES_RECURSIVE);
 8001bd0:	2000      	movs	r0, #0
 8001bd2:	f7fe ff9d 	bl	8000b10 <test_printn>
    test_println("");   
 8001bd6:	4620      	mov	r0, r4
 8001bd8:	f7ff f84a 	bl	8000c70 <test_println>
    test_print("--- CH_CFG_USE_CONDVARS:                ");
 8001bdc:	485a      	ldr	r0, [pc, #360]	; (8001d48 <rt_test_001_003_execute+0x298>)
 8001bde:	f7ff f867 	bl	8000cb0 <test_print>
 8001be2:	4628      	mov	r0, r5
 8001be4:	f7fe ff64 	bl	8000ab0 <test_printn.part.0>
    test_printn(CH_CFG_USE_CONDVARS);
    test_println("");
 8001be8:	4620      	mov	r0, r4
 8001bea:	f7ff f841 	bl	8000c70 <test_println>
    test_print("--- CH_CFG_USE_CONDVARS_TIMEOUT:        ");
 8001bee:	4857      	ldr	r0, [pc, #348]	; (8001d4c <rt_test_001_003_execute+0x29c>)
 8001bf0:	f7ff f85e 	bl	8000cb0 <test_print>
 8001bf4:	4628      	mov	r0, r5
 8001bf6:	f7fe ff5b 	bl	8000ab0 <test_printn.part.0>
    test_printn(CH_CFG_USE_CONDVARS_TIMEOUT);
    test_println("");
 8001bfa:	4620      	mov	r0, r4
 8001bfc:	f7ff f838 	bl	8000c70 <test_println>
    test_print("--- CH_CFG_USE_EVENTS:                  ");
 8001c00:	4853      	ldr	r0, [pc, #332]	; (8001d50 <rt_test_001_003_execute+0x2a0>)
 8001c02:	f7ff f855 	bl	8000cb0 <test_print>
 8001c06:	4628      	mov	r0, r5
 8001c08:	f7fe ff52 	bl	8000ab0 <test_printn.part.0>
    test_printn(CH_CFG_USE_EVENTS);
    test_println("");
 8001c0c:	4620      	mov	r0, r4
 8001c0e:	f7ff f82f 	bl	8000c70 <test_println>
    test_print("--- CH_CFG_USE_EVENTS_TIMEOUT:          ");
 8001c12:	4850      	ldr	r0, [pc, #320]	; (8001d54 <rt_test_001_003_execute+0x2a4>)
 8001c14:	f7ff f84c 	bl	8000cb0 <test_print>
 8001c18:	4628      	mov	r0, r5
 8001c1a:	f7fe ff49 	bl	8000ab0 <test_printn.part.0>
    test_printn(CH_CFG_USE_EVENTS_TIMEOUT);
    test_println("");
 8001c1e:	4620      	mov	r0, r4
 8001c20:	f7ff f826 	bl	8000c70 <test_println>
    test_print("--- CH_CFG_USE_MESSAGES:                ");
 8001c24:	484c      	ldr	r0, [pc, #304]	; (8001d58 <rt_test_001_003_execute+0x2a8>)
 8001c26:	f7ff f843 	bl	8000cb0 <test_print>
 8001c2a:	4628      	mov	r0, r5
 8001c2c:	f7fe ff40 	bl	8000ab0 <test_printn.part.0>
    test_printn(CH_CFG_USE_MESSAGES);
    test_println("");
 8001c30:	4620      	mov	r0, r4
 8001c32:	f7ff f81d 	bl	8000c70 <test_println>
    test_print("--- CH_CFG_USE_MESSAGES_PRIORITY:       ");
 8001c36:	4849      	ldr	r0, [pc, #292]	; (8001d5c <rt_test_001_003_execute+0x2ac>)
 8001c38:	f7ff f83a 	bl	8000cb0 <test_print>
    test_printn(CH_CFG_USE_MESSAGES_PRIORITY);
 8001c3c:	2000      	movs	r0, #0
 8001c3e:	f7fe ff67 	bl	8000b10 <test_printn>
    test_println("");
 8001c42:	4620      	mov	r0, r4
 8001c44:	f7ff f814 	bl	8000c70 <test_println>
    test_print("--- CH_CFG_USE_DYNAMIC:                 ");
 8001c48:	4845      	ldr	r0, [pc, #276]	; (8001d60 <rt_test_001_003_execute+0x2b0>)
 8001c4a:	f7ff f831 	bl	8000cb0 <test_print>
 8001c4e:	4628      	mov	r0, r5
 8001c50:	f7fe ff2e 	bl	8000ab0 <test_printn.part.0>
    test_printn(CH_CFG_USE_DYNAMIC);
    test_println("");
 8001c54:	4620      	mov	r0, r4
 8001c56:	f7ff f80b 	bl	8000c70 <test_println>
    test_print("--- CH_DBG_STATISTICS:                  ");
 8001c5a:	4842      	ldr	r0, [pc, #264]	; (8001d64 <rt_test_001_003_execute+0x2b4>)
 8001c5c:	f7ff f828 	bl	8000cb0 <test_print>
    test_printn(CH_DBG_STATISTICS);
 8001c60:	2000      	movs	r0, #0
 8001c62:	f7fe ff55 	bl	8000b10 <test_printn>
    test_println("");
 8001c66:	4620      	mov	r0, r4
 8001c68:	f7ff f802 	bl	8000c70 <test_println>
    test_print("--- CH_DBG_SYSTEM_STATE_CHECK:          ");
 8001c6c:	483e      	ldr	r0, [pc, #248]	; (8001d68 <rt_test_001_003_execute+0x2b8>)
 8001c6e:	f7ff f81f 	bl	8000cb0 <test_print>
    test_printn(CH_DBG_SYSTEM_STATE_CHECK);
 8001c72:	2000      	movs	r0, #0
 8001c74:	f7fe ff4c 	bl	8000b10 <test_printn>
    test_println("");
 8001c78:	4620      	mov	r0, r4
 8001c7a:	f7fe fff9 	bl	8000c70 <test_println>
    test_print("--- CH_DBG_ENABLE_CHECKS:               ");
 8001c7e:	483b      	ldr	r0, [pc, #236]	; (8001d6c <rt_test_001_003_execute+0x2bc>)
 8001c80:	f7ff f816 	bl	8000cb0 <test_print>
    test_printn(CH_DBG_ENABLE_CHECKS);
 8001c84:	2000      	movs	r0, #0
 8001c86:	f7fe ff43 	bl	8000b10 <test_printn>
    test_println("");
 8001c8a:	4620      	mov	r0, r4
 8001c8c:	f7fe fff0 	bl	8000c70 <test_println>
    test_print("--- CH_DBG_ENABLE_ASSERTS:              ");
 8001c90:	4837      	ldr	r0, [pc, #220]	; (8001d70 <rt_test_001_003_execute+0x2c0>)
 8001c92:	f7ff f80d 	bl	8000cb0 <test_print>
    test_printn(CH_DBG_ENABLE_ASSERTS);
 8001c96:	2000      	movs	r0, #0
 8001c98:	f7fe ff3a 	bl	8000b10 <test_printn>
    test_println("");
 8001c9c:	4620      	mov	r0, r4
 8001c9e:	f7fe ffe7 	bl	8000c70 <test_println>
    test_print("--- CH_DBG_TRACE_MASK:                  ");
 8001ca2:	4834      	ldr	r0, [pc, #208]	; (8001d74 <rt_test_001_003_execute+0x2c4>)
 8001ca4:	f7ff f804 	bl	8000cb0 <test_print>
 8001ca8:	20ff      	movs	r0, #255	; 0xff
 8001caa:	f7fe ff01 	bl	8000ab0 <test_printn.part.0>
    test_printn(CH_DBG_TRACE_MASK);
    test_println("");
 8001cae:	4620      	mov	r0, r4
 8001cb0:	f7fe ffde 	bl	8000c70 <test_println>
    test_print("--- CH_DBG_TRACE_BUFFER_SIZE:           ");
 8001cb4:	4830      	ldr	r0, [pc, #192]	; (8001d78 <rt_test_001_003_execute+0x2c8>)
 8001cb6:	f7fe fffb 	bl	8000cb0 <test_print>
 8001cba:	2080      	movs	r0, #128	; 0x80
 8001cbc:	f7fe fef8 	bl	8000ab0 <test_printn.part.0>
    test_printn(CH_DBG_TRACE_BUFFER_SIZE);
    test_println("");
 8001cc0:	4620      	mov	r0, r4
 8001cc2:	f7fe ffd5 	bl	8000c70 <test_println>
    test_print("--- CH_DBG_ENABLE_STACK_CHECK:          ");
 8001cc6:	482d      	ldr	r0, [pc, #180]	; (8001d7c <rt_test_001_003_execute+0x2cc>)
 8001cc8:	f7fe fff2 	bl	8000cb0 <test_print>
    test_printn(CH_DBG_ENABLE_STACK_CHECK);
 8001ccc:	2000      	movs	r0, #0
 8001cce:	f7fe ff1f 	bl	8000b10 <test_printn>
    test_println("");
 8001cd2:	4620      	mov	r0, r4
 8001cd4:	f7fe ffcc 	bl	8000c70 <test_println>
    test_print("--- CH_DBG_FILL_THREADS:                ");
 8001cd8:	4829      	ldr	r0, [pc, #164]	; (8001d80 <rt_test_001_003_execute+0x2d0>)
 8001cda:	f7fe ffe9 	bl	8000cb0 <test_print>
    test_printn(CH_DBG_FILL_THREADS);
 8001cde:	2000      	movs	r0, #0
 8001ce0:	f7fe ff16 	bl	8000b10 <test_printn>
    test_println("");
 8001ce4:	4620      	mov	r0, r4
 8001ce6:	f7fe ffc3 	bl	8000c70 <test_println>
    test_print("--- CH_DBG_THREADS_PROFILING:           ");
 8001cea:	4826      	ldr	r0, [pc, #152]	; (8001d84 <rt_test_001_003_execute+0x2d4>)
 8001cec:	f7fe ffe0 	bl	8000cb0 <test_print>
    test_printn(CH_DBG_THREADS_PROFILING);
 8001cf0:	2000      	movs	r0, #0
 8001cf2:	f7fe ff0d 	bl	8000b10 <test_printn>
    test_println("");
 8001cf6:	4620      	mov	r0, r4
  }
  test_end_step(1);
}
 8001cf8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    test_println("");
 8001cfc:	f7fe bfb8 	b.w	8000c70 <test_println>
 8001d00:	2000149c 	.word	0x2000149c
 8001d04:	08009bc0 	.word	0x08009bc0
 8001d08:	0800956c 	.word	0x0800956c
 8001d0c:	08009598 	.word	0x08009598
 8001d10:	080095c4 	.word	0x080095c4
 8001d14:	080095f0 	.word	0x080095f0
 8001d18:	0800961c 	.word	0x0800961c
 8001d1c:	08009648 	.word	0x08009648
 8001d20:	08009674 	.word	0x08009674
 8001d24:	080096a0 	.word	0x080096a0
 8001d28:	080096cc 	.word	0x080096cc
 8001d2c:	080096f8 	.word	0x080096f8
 8001d30:	08009724 	.word	0x08009724
 8001d34:	08009750 	.word	0x08009750
 8001d38:	0800977c 	.word	0x0800977c
 8001d3c:	080097a8 	.word	0x080097a8
 8001d40:	080097d4 	.word	0x080097d4
 8001d44:	08009800 	.word	0x08009800
 8001d48:	0800982c 	.word	0x0800982c
 8001d4c:	08009858 	.word	0x08009858
 8001d50:	08009884 	.word	0x08009884
 8001d54:	080098b0 	.word	0x080098b0
 8001d58:	080098dc 	.word	0x080098dc
 8001d5c:	08009908 	.word	0x08009908
 8001d60:	08009934 	.word	0x08009934
 8001d64:	08009960 	.word	0x08009960
 8001d68:	0800998c 	.word	0x0800998c
 8001d6c:	080099b8 	.word	0x080099b8
 8001d70:	080099e4 	.word	0x080099e4
 8001d74:	08009a10 	.word	0x08009a10
 8001d78:	08009a3c 	.word	0x08009a3c
 8001d7c:	08009a68 	.word	0x08009a68
 8001d80:	08009a94 	.word	0x08009a94
 8001d84:	08009ac0 	.word	0x08009ac0
	...

08001d90 <rt_test_001_002_execute>:
static void rt_test_001_002_execute(void) {
 8001d90:	b538      	push	{r3, r4, r5, lr}
  test_set_step(1);
 8001d92:	4b19      	ldr	r3, [pc, #100]	; (8001df8 <rt_test_001_002_execute+0x68>)
    test_println("--- Product:                            ChibiOS/RT");
 8001d94:	4819      	ldr	r0, [pc, #100]	; (8001dfc <rt_test_001_002_execute+0x6c>)
    test_println("");
 8001d96:	4c1a      	ldr	r4, [pc, #104]	; (8001e00 <rt_test_001_002_execute+0x70>)
  test_set_step(1);
 8001d98:	2501      	movs	r5, #1
 8001d9a:	601d      	str	r5, [r3, #0]
    test_println("--- Product:                            ChibiOS/RT");
 8001d9c:	f7fe ff68 	bl	8000c70 <test_println>
    test_print("--- Stable Flag:                        ");
 8001da0:	4818      	ldr	r0, [pc, #96]	; (8001e04 <rt_test_001_002_execute+0x74>)
 8001da2:	f7fe ff85 	bl	8000cb0 <test_print>
 8001da6:	4628      	mov	r0, r5
 8001da8:	f7fe fe82 	bl	8000ab0 <test_printn.part.0>
    test_println("");
 8001dac:	4620      	mov	r0, r4
 8001dae:	f7fe ff5f 	bl	8000c70 <test_println>
    test_print("--- Version String:                     ");
 8001db2:	4815      	ldr	r0, [pc, #84]	; (8001e08 <rt_test_001_002_execute+0x78>)
 8001db4:	f7fe ff7c 	bl	8000cb0 <test_print>
    test_println(CH_KERNEL_VERSION);
 8001db8:	4814      	ldr	r0, [pc, #80]	; (8001e0c <rt_test_001_002_execute+0x7c>)
 8001dba:	f7fe ff59 	bl	8000c70 <test_println>
    test_print("--- Major Number:                       ");
 8001dbe:	4814      	ldr	r0, [pc, #80]	; (8001e10 <rt_test_001_002_execute+0x80>)
 8001dc0:	f7fe ff76 	bl	8000cb0 <test_print>
 8001dc4:	2006      	movs	r0, #6
 8001dc6:	f7fe fe73 	bl	8000ab0 <test_printn.part.0>
    test_println("");
 8001dca:	4620      	mov	r0, r4
 8001dcc:	f7fe ff50 	bl	8000c70 <test_println>
    test_print("--- Minor Number:                       ");
 8001dd0:	4810      	ldr	r0, [pc, #64]	; (8001e14 <rt_test_001_002_execute+0x84>)
 8001dd2:	f7fe ff6d 	bl	8000cb0 <test_print>
 8001dd6:	4628      	mov	r0, r5
 8001dd8:	f7fe fe6a 	bl	8000ab0 <test_printn.part.0>
    test_println("");
 8001ddc:	4620      	mov	r0, r4
 8001dde:	f7fe ff47 	bl	8000c70 <test_println>
    test_print("--- Patch Number:                       ");
 8001de2:	480d      	ldr	r0, [pc, #52]	; (8001e18 <rt_test_001_002_execute+0x88>)
 8001de4:	f7fe ff64 	bl	8000cb0 <test_print>
 8001de8:	4628      	mov	r0, r5
 8001dea:	f7fe fe61 	bl	8000ab0 <test_printn.part.0>
    test_println("");
 8001dee:	4620      	mov	r0, r4
}
 8001df0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    test_println("");
 8001df4:	f7fe bf3c 	b.w	8000c70 <test_println>
 8001df8:	2000149c 	.word	0x2000149c
 8001dfc:	08009aec 	.word	0x08009aec
 8001e00:	08009bc0 	.word	0x08009bc0
 8001e04:	080093f0 	.word	0x080093f0
 8001e08:	0800941c 	.word	0x0800941c
 8001e0c:	08009b20 	.word	0x08009b20
 8001e10:	08009450 	.word	0x08009450
 8001e14:	0800947c 	.word	0x0800947c
 8001e18:	080094a8 	.word	0x080094a8
 8001e1c:	00000000 	.word	0x00000000

08001e20 <rt_test_001_001_execute>:
  test_set_step(1);
 8001e20:	4b1c      	ldr	r3, [pc, #112]	; (8001e94 <rt_test_001_001_execute+0x74>)
    test_print("--- Architecture:                       ");
 8001e22:	481d      	ldr	r0, [pc, #116]	; (8001e98 <rt_test_001_001_execute+0x78>)
static void rt_test_001_001_execute(void) {
 8001e24:	b510      	push	{r4, lr}
  test_set_step(1);
 8001e26:	2201      	movs	r2, #1
 8001e28:	601a      	str	r2, [r3, #0]
    test_print("--- Architecture:                       ");
 8001e2a:	f7fe ff41 	bl	8000cb0 <test_print>
    test_println(PORT_ARCHITECTURE_NAME);
 8001e2e:	481b      	ldr	r0, [pc, #108]	; (8001e9c <rt_test_001_001_execute+0x7c>)
    test_println("");
 8001e30:	4c1b      	ldr	r4, [pc, #108]	; (8001ea0 <rt_test_001_001_execute+0x80>)
    test_println(PORT_ARCHITECTURE_NAME);
 8001e32:	f7fe ff1d 	bl	8000c70 <test_println>
    test_print("--- Core Variant:                       ");
 8001e36:	481b      	ldr	r0, [pc, #108]	; (8001ea4 <rt_test_001_001_execute+0x84>)
 8001e38:	f7fe ff3a 	bl	8000cb0 <test_print>
    test_println(PORT_CORE_VARIANT_NAME);
 8001e3c:	481a      	ldr	r0, [pc, #104]	; (8001ea8 <rt_test_001_001_execute+0x88>)
 8001e3e:	f7fe ff17 	bl	8000c70 <test_println>
    test_print("--- Compiler:                           ");
 8001e42:	481a      	ldr	r0, [pc, #104]	; (8001eac <rt_test_001_001_execute+0x8c>)
 8001e44:	f7fe ff34 	bl	8000cb0 <test_print>
    test_println(PORT_COMPILER_NAME);
 8001e48:	4819      	ldr	r0, [pc, #100]	; (8001eb0 <rt_test_001_001_execute+0x90>)
 8001e4a:	f7fe ff11 	bl	8000c70 <test_println>
    test_print("--- Port Info:                          ");
 8001e4e:	4819      	ldr	r0, [pc, #100]	; (8001eb4 <rt_test_001_001_execute+0x94>)
 8001e50:	f7fe ff2e 	bl	8000cb0 <test_print>
    test_println(PORT_INFO);
 8001e54:	4818      	ldr	r0, [pc, #96]	; (8001eb8 <rt_test_001_001_execute+0x98>)
 8001e56:	f7fe ff0b 	bl	8000c70 <test_println>
    test_print("--- Natural alignment:                  ");
 8001e5a:	4818      	ldr	r0, [pc, #96]	; (8001ebc <rt_test_001_001_execute+0x9c>)
 8001e5c:	f7fe ff28 	bl	8000cb0 <test_print>
 8001e60:	2004      	movs	r0, #4
 8001e62:	f7fe fe25 	bl	8000ab0 <test_printn.part.0>
    test_println("");
 8001e66:	4620      	mov	r0, r4
 8001e68:	f7fe ff02 	bl	8000c70 <test_println>
    test_print("--- Stack alignment:                    ");
 8001e6c:	4814      	ldr	r0, [pc, #80]	; (8001ec0 <rt_test_001_001_execute+0xa0>)
 8001e6e:	f7fe ff1f 	bl	8000cb0 <test_print>
 8001e72:	2008      	movs	r0, #8
 8001e74:	f7fe fe1c 	bl	8000ab0 <test_printn.part.0>
    test_println("");
 8001e78:	4620      	mov	r0, r4
 8001e7a:	f7fe fef9 	bl	8000c70 <test_println>
    test_print("--- Working area alignment:             ");
 8001e7e:	4811      	ldr	r0, [pc, #68]	; (8001ec4 <rt_test_001_001_execute+0xa4>)
 8001e80:	f7fe ff16 	bl	8000cb0 <test_print>
 8001e84:	2008      	movs	r0, #8
 8001e86:	f7fe fe13 	bl	8000ab0 <test_printn.part.0>
    test_println("");
 8001e8a:	4620      	mov	r0, r4
}
 8001e8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    test_println("");
 8001e90:	f7fe beee 	b.w	8000c70 <test_println>
 8001e94:	2000149c 	.word	0x2000149c
 8001e98:	08009b28 	.word	0x08009b28
 8001e9c:	08009b54 	.word	0x08009b54
 8001ea0:	08009bc0 	.word	0x08009bc0
 8001ea4:	08009b60 	.word	0x08009b60
 8001ea8:	08009b8c 	.word	0x08009b8c
 8001eac:	08009b98 	.word	0x08009b98
 8001eb0:	08009bc4 	.word	0x08009bc4
 8001eb4:	08009c04 	.word	0x08009c04
 8001eb8:	08009c30 	.word	0x08009c30
 8001ebc:	08009c48 	.word	0x08009c48
 8001ec0:	08009c74 	.word	0x08009c74
 8001ec4:	08009ca0 	.word	0x08009ca0
	...

08001ed0 <oslib_test_001_001_execute>:
 8001ed0:	f7ff bfa6 	b.w	8001e20 <rt_test_001_001_execute>
	...

08001ee0 <dyn_find_object>:
    chPoolFree(mp, (void *)dep);
  }
}
#endif /* CH_FACTORY_REQUIRES_POOLS */

static dyn_element_t *dyn_find_object(const char *name, dyn_list_t *dlp) {
 8001ee0:	b570      	push	{r4, r5, r6, lr}
  dyn_element_t *p = dlp->next;
 8001ee2:	680c      	ldr	r4, [r1, #0]
  while (p != (dyn_element_t *)dlp) {
 8001ee4:	42a1      	cmp	r1, r4
 8001ee6:	d012      	beq.n	8001f0e <dyn_find_object+0x2e>
 8001ee8:	460d      	mov	r5, r1
 8001eea:	4606      	mov	r6, r0
 8001eec:	e002      	b.n	8001ef4 <dyn_find_object+0x14>
    p = p->next;
 8001eee:	6824      	ldr	r4, [r4, #0]
  while (p != (dyn_element_t *)dlp) {
 8001ef0:	42a5      	cmp	r5, r4
 8001ef2:	d00c      	beq.n	8001f0e <dyn_find_object+0x2e>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 8001ef4:	2208      	movs	r2, #8
 8001ef6:	4631      	mov	r1, r6
 8001ef8:	18a0      	adds	r0, r4, r2
 8001efa:	f007 f813 	bl	8008f24 <strncmp>
 8001efe:	2800      	cmp	r0, #0
 8001f00:	d1f5      	bne.n	8001eee <dyn_find_object+0xe>

  chDbgCheck(name != NULL);

  /* Checking if an object with this name has already been created.*/
  dep = dyn_list_find(name, dlp);
  if (dep != NULL) {
 8001f02:	b114      	cbz	r4, 8001f0a <dyn_find_object+0x2a>
    /* Increasing references counter.*/
    dep->refs++;
 8001f04:	6863      	ldr	r3, [r4, #4]
 8001f06:	3301      	adds	r3, #1
 8001f08:	6063      	str	r3, [r4, #4]
  }

  return dep;
}
 8001f0a:	4620      	mov	r0, r4
 8001f0c:	bd70      	pop	{r4, r5, r6, pc}
  return NULL;
 8001f0e:	2400      	movs	r4, #0
}
 8001f10:	4620      	mov	r0, r4
 8001f12:	bd70      	pop	{r4, r5, r6, pc}
	...

08001f20 <dyn_create_object_pool>:
                                             memory_pool_t *mp) {
 8001f20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  dyn_element_t *p = dlp->next;
 8001f22:	680c      	ldr	r4, [r1, #0]
  while (p != (dyn_element_t *)dlp) {
 8001f24:	42a1      	cmp	r1, r4
                                             memory_pool_t *mp) {
 8001f26:	460d      	mov	r5, r1
 8001f28:	4606      	mov	r6, r0
 8001f2a:	4617      	mov	r7, r2
  while (p != (dyn_element_t *)dlp) {
 8001f2c:	d103      	bne.n	8001f36 <dyn_create_object_pool+0x16>
 8001f2e:	e00d      	b.n	8001f4c <dyn_create_object_pool+0x2c>
    p = p->next;
 8001f30:	6824      	ldr	r4, [r4, #0]
  while (p != (dyn_element_t *)dlp) {
 8001f32:	42a5      	cmp	r5, r4
 8001f34:	d00a      	beq.n	8001f4c <dyn_create_object_pool+0x2c>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 8001f36:	2208      	movs	r2, #8
 8001f38:	4631      	mov	r1, r6
 8001f3a:	18a0      	adds	r0, r4, r2
 8001f3c:	f006 fff2 	bl	8008f24 <strncmp>
 8001f40:	2800      	cmp	r0, #0
 8001f42:	d1f5      	bne.n	8001f30 <dyn_create_object_pool+0x10>
  if (dep != NULL) {
 8001f44:	b114      	cbz	r4, 8001f4c <dyn_create_object_pool+0x2c>
    return NULL;
 8001f46:	4604      	mov	r4, r0
}
 8001f48:	4620      	mov	r0, r4
 8001f4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  dep = (dyn_element_t *)chPoolAlloc(mp);
 8001f4c:	4638      	mov	r0, r7
 8001f4e:	f7fe ff6f 	bl	8000e30 <chPoolAlloc>
  if (dep == NULL) {
 8001f52:	4604      	mov	r4, r0
 8001f54:	2800      	cmp	r0, #0
 8001f56:	d0f7      	beq.n	8001f48 <dyn_create_object_pool+0x28>
  strncpy(dep->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH);
 8001f58:	2208      	movs	r2, #8
 8001f5a:	4631      	mov	r1, r6
 8001f5c:	4410      	add	r0, r2
 8001f5e:	f007 f81f 	bl	8008fa0 <strncpy>
  dep->next = dlp->next;
 8001f62:	682b      	ldr	r3, [r5, #0]
  dep->refs = (ucnt_t)1;
 8001f64:	2201      	movs	r2, #1
  dep->next = dlp->next;
 8001f66:	e9c4 3200 	strd	r3, r2, [r4]
}
 8001f6a:	4620      	mov	r0, r4
  dlp->next = (dyn_element_t *)dep;
 8001f6c:	602c      	str	r4, [r5, #0]
}
 8001f6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001f70 <chThdYield>:
void chThdYield(void) {
 8001f70:	b538      	push	{r3, r4, r5, lr}
 8001f72:	2320      	movs	r3, #32
 8001f74:	f383 8811 	msr	BASEPRI, r3
 */
static inline bool chSchCanYieldS(void) {

  chDbgCheckClassS();

  return firstprio(&ch.rlist.queue) >= currp->prio;
 8001f78:	4a12      	ldr	r2, [pc, #72]	; (8001fc4 <chThdYield+0x54>)
 8001f7a:	6810      	ldr	r0, [r2, #0]
 8001f7c:	6991      	ldr	r1, [r2, #24]
 */
static inline void chSchDoYieldS(void) {

  chDbgCheckClassS();

  if (chSchCanYieldS()) {
 8001f7e:	6883      	ldr	r3, [r0, #8]
  return firstprio(&ch.rlist.queue) >= currp->prio;
 8001f80:	688c      	ldr	r4, [r1, #8]
  if (chSchCanYieldS()) {
 8001f82:	42a3      	cmp	r3, r4
 8001f84:	d203      	bcs.n	8001f8e <chThdYield+0x1e>
 8001f86:	2300      	movs	r3, #0
 8001f88:	f383 8811 	msr	BASEPRI, r3
}
 8001f8c:	bd38      	pop	{r3, r4, r5, pc}
  tqp->next             = tp->queue.next;
 8001f8e:	6803      	ldr	r3, [r0, #0]
 8001f90:	6013      	str	r3, [r2, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 8001f92:	605a      	str	r2, [r3, #4]
void chSchDoRescheduleBehind(void) {
  thread_t *otp = currp;

  /* Picks the first thread from the ready queue and makes it current.*/
  currp = queue_fifo_remove(&ch.rlist.queue);
  currp->state = CH_STATE_CURRENT;
 8001f94:	2501      	movs	r5, #1
  currp = queue_fifo_remove(&ch.rlist.queue);
 8001f96:	6190      	str	r0, [r2, #24]
  tp->state = CH_STATE_READY;
 8001f98:	2200      	movs	r2, #0
  currp->state = CH_STATE_CURRENT;
 8001f9a:	f880 5020 	strb.w	r5, [r0, #32]
  tp->state = CH_STATE_READY;
 8001f9e:	f881 2020 	strb.w	r2, [r1, #32]
  cp = (thread_t *)&ch.rlist.queue;
 8001fa2:	e000      	b.n	8001fa6 <chThdYield+0x36>
 8001fa4:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 8001fa6:	689a      	ldr	r2, [r3, #8]
 8001fa8:	4294      	cmp	r4, r2
 8001faa:	d9fb      	bls.n	8001fa4 <chThdYield+0x34>
  tp->queue.prev             = cp->queue.prev;
 8001fac:	685a      	ldr	r2, [r3, #4]
 8001fae:	e9c1 3200 	strd	r3, r2, [r1]
  tp->queue.prev->queue.next = tp;
 8001fb2:	6011      	str	r1, [r2, #0]
  cp->queue.prev             = tp;
 8001fb4:	6059      	str	r1, [r3, #4]

  /* Placing in ready list behind peers.*/
  otp = chSchReadyI(otp);

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
 8001fb6:	f7fe f983 	bl	80002c0 <_port_switch>
 8001fba:	2300      	movs	r3, #0
 8001fbc:	f383 8811 	msr	BASEPRI, r3
 8001fc0:	bd38      	pop	{r3, r4, r5, pc}
 8001fc2:	bf00      	nop
 8001fc4:	200009b0 	.word	0x200009b0
	...

08001fd0 <bmk_thread8>:
static THD_FUNCTION(bmk_thread8, p) {
 8001fd0:	b538      	push	{r3, r4, r5, lr}
 8001fd2:	4d09      	ldr	r5, [pc, #36]	; (8001ff8 <bmk_thread8+0x28>)
 8001fd4:	4604      	mov	r4, r0
    chThdYield();
 8001fd6:	f7ff ffcb 	bl	8001f70 <chThdYield>
    chThdYield();
 8001fda:	f7ff ffc9 	bl	8001f70 <chThdYield>
    chThdYield();
 8001fde:	f7ff ffc7 	bl	8001f70 <chThdYield>
    chThdYield();
 8001fe2:	f7ff ffc5 	bl	8001f70 <chThdYield>
    (*(uint32_t *)p) += 4;
 8001fe6:	6823      	ldr	r3, [r4, #0]
  return (bool)((chThdGetSelfX()->flags & CH_FLAG_TERMINATE) != (tmode_t)0);
 8001fe8:	69aa      	ldr	r2, [r5, #24]
 8001fea:	3304      	adds	r3, #4
 8001fec:	6023      	str	r3, [r4, #0]
  } while(!chThdShouldTerminateX());
 8001fee:	f892 3021 	ldrb.w	r3, [r2, #33]	; 0x21
 8001ff2:	075b      	lsls	r3, r3, #29
 8001ff4:	d5ef      	bpl.n	8001fd6 <bmk_thread8+0x6>
}
 8001ff6:	bd38      	pop	{r3, r4, r5, pc}
 8001ff8:	200009b0 	.word	0x200009b0
 8001ffc:	00000000 	.word	0x00000000

08002000 <chSchWakeupS>:
  thread_t *otp = currp;
 8002000:	4a15      	ldr	r2, [pc, #84]	; (8002058 <chSchWakeupS+0x58>)
void chSchWakeupS(thread_t *ntp, msg_t msg) {
 8002002:	b470      	push	{r4, r5, r6}
  thread_t *otp = currp;
 8002004:	6996      	ldr	r6, [r2, #24]
  if (ntp->prio <= otp->prio) {
 8002006:	6885      	ldr	r5, [r0, #8]
 8002008:	68b4      	ldr	r4, [r6, #8]
  ntp->u.rdymsg = msg;
 800200a:	6241      	str	r1, [r0, #36]	; 0x24
  if (ntp->prio <= otp->prio) {
 800200c:	42a5      	cmp	r5, r4
 800200e:	d80e      	bhi.n	800202e <chSchWakeupS+0x2e>
  tp->state = CH_STATE_READY;
 8002010:	2100      	movs	r1, #0
  cp = (thread_t *)&ch.rlist.queue;
 8002012:	4613      	mov	r3, r2
  tp->state = CH_STATE_READY;
 8002014:	f880 1020 	strb.w	r1, [r0, #32]
    cp = cp->queue.next;
 8002018:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 800201a:	689a      	ldr	r2, [r3, #8]
 800201c:	4295      	cmp	r5, r2
 800201e:	d9fb      	bls.n	8002018 <chSchWakeupS+0x18>
  tp->queue.prev             = cp->queue.prev;
 8002020:	685a      	ldr	r2, [r3, #4]
}
 8002022:	bc70      	pop	{r4, r5, r6}
  tp->queue.prev             = cp->queue.prev;
 8002024:	e9c0 3200 	strd	r3, r2, [r0]
  tp->queue.prev->queue.next = tp;
 8002028:	6010      	str	r0, [r2, #0]
  cp->queue.prev             = tp;
 800202a:	6058      	str	r0, [r3, #4]
}
 800202c:	4770      	bx	lr
  tp->state = CH_STATE_READY;
 800202e:	2300      	movs	r3, #0
 8002030:	f886 3020 	strb.w	r3, [r6, #32]
  cp = (thread_t *)&ch.rlist.queue;
 8002034:	4613      	mov	r3, r2
    cp = cp->queue.next;
 8002036:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio > tp->prio);
 8002038:	6899      	ldr	r1, [r3, #8]
 800203a:	428c      	cmp	r4, r1
 800203c:	d3fb      	bcc.n	8002036 <chSchWakeupS+0x36>
  tp->queue.prev             = cp->queue.prev;
 800203e:	6859      	ldr	r1, [r3, #4]
 8002040:	6071      	str	r1, [r6, #4]
    ntp->state = CH_STATE_CURRENT;
 8002042:	2401      	movs	r4, #1
  tp->queue.next             = cp;
 8002044:	6033      	str	r3, [r6, #0]
  tp->queue.prev->queue.next = tp;
 8002046:	600e      	str	r6, [r1, #0]
  cp->queue.prev             = tp;
 8002048:	605e      	str	r6, [r3, #4]
    chSysSwitch(ntp, otp);
 800204a:	4631      	mov	r1, r6
    ntp->state = CH_STATE_CURRENT;
 800204c:	f880 4020 	strb.w	r4, [r0, #32]
}
 8002050:	bc70      	pop	{r4, r5, r6}
    currp = ntp;
 8002052:	6190      	str	r0, [r2, #24]
    chSysSwitch(ntp, otp);
 8002054:	f7fe b934 	b.w	80002c0 <_port_switch>
 8002058:	200009b0 	.word	0x200009b0
 800205c:	00000000 	.word	0x00000000

08002060 <chThdCreateStatic.constprop.0>:
thread_t *chThdCreateStatic(void *wsp, size_t size,
 8002060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002062:	4604      	mov	r4, r0
 8002064:	2020      	movs	r0, #32
 8002066:	f380 8811 	msr	BASEPRI, r0
  REG_INSERT(tp);
 800206a:	4f1a      	ldr	r7, [pc, #104]	; (80020d4 <chThdCreateStatic.constprop.0+0x74>)
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 800206c:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8002070:	f104 03dc 	add.w	r3, r4, #220	; 0xdc
 8002074:	f8c4 20dc 	str.w	r2, [r4, #220]	; 0xdc
  tp->prio      = prio;
 8002078:	f8c4 1108 	str.w	r1, [r4, #264]	; 0x108
  REG_INSERT(tp);
 800207c:	697a      	ldr	r2, [r7, #20]
  tp->realprio  = prio;
 800207e:	f8c4 113c 	str.w	r1, [r4, #316]	; 0x13c
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 8002082:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
 8002086:	4d14      	ldr	r5, [pc, #80]	; (80020d8 <chThdCreateStatic.constprop.0+0x78>)
  tp->name      = name;
 8002088:	4b14      	ldr	r3, [pc, #80]	; (80020dc <chThdCreateStatic.constprop.0+0x7c>)
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 800208a:	f8c4 50fc 	str.w	r5, [r4, #252]	; 0xfc
  tp->refs      = (trefs_t)1;
 800208e:	2101      	movs	r1, #1
  tp = (thread_t *)((uint8_t *)wsp + size -
 8002090:	f504 7580 	add.w	r5, r4, #256	; 0x100
  tp->refs      = (trefs_t)1;
 8002094:	f884 1122 	strb.w	r1, [r4, #290]	; 0x122
  tp->name      = name;
 8002098:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
  tp->mtxlist   = NULL;
 800209c:	2600      	movs	r6, #0
  queue_init(&tp->msgqueue);
 800209e:	f504 7396 	add.w	r3, r4, #300	; 0x12c
  list_init(&tp->waiting);
 80020a2:	f504 7194 	add.w	r1, r4, #296	; 0x128
  tp->state     = CH_STATE_WTSTART;
 80020a6:	2002      	movs	r0, #2
 80020a8:	f8a4 0120 	strh.w	r0, [r4, #288]	; 0x120
  tp->epending  = (eventmask_t)0;
 80020ac:	e9c4 664d 	strd	r6, r6, [r4, #308]	; 0x134
  REG_INSERT(tp);
 80020b0:	e9c4 7244 	strd	r7, r2, [r4, #272]	; 0x110
  tp->wabase = (stkalign_t *)wsp;
 80020b4:	f8c4 411c 	str.w	r4, [r4, #284]	; 0x11c
  chSchWakeupS(tp, MSG_OK);
 80020b8:	4628      	mov	r0, r5
  REG_INSERT(tp);
 80020ba:	6115      	str	r5, [r2, #16]
  tqp->next = (thread_t *)tqp;
 80020bc:	e9c4 134a 	strd	r1, r3, [r4, #296]	; 0x128
  tqp->prev = (thread_t *)tqp;
 80020c0:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
  chSchWakeupS(tp, MSG_OK);
 80020c4:	4631      	mov	r1, r6
  REG_INSERT(tp);
 80020c6:	617d      	str	r5, [r7, #20]
  chSchWakeupS(tp, MSG_OK);
 80020c8:	f7ff ff9a 	bl	8002000 <chSchWakeupS>
 80020cc:	f386 8811 	msr	BASEPRI, r6
}
 80020d0:	4628      	mov	r0, r5
 80020d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80020d4:	200009b0 	.word	0x200009b0
 80020d8:	080002d1 	.word	0x080002d1
 80020dc:	08009ccc 	.word	0x08009ccc

080020e0 <chThdResume.constprop.0>:
void chThdResume(thread_reference_t *trp, msg_t msg) {
 80020e0:	b508      	push	{r3, lr}
 80020e2:	2220      	movs	r2, #32
 80020e4:	4603      	mov	r3, r0
 80020e6:	f382 8811 	msr	BASEPRI, r2
  if (*trp != NULL) {
 80020ea:	6800      	ldr	r0, [r0, #0]
 80020ec:	b118      	cbz	r0, 80020f6 <chThdResume.constprop.0+0x16>
    *trp = NULL;
 80020ee:	2100      	movs	r1, #0
 80020f0:	6019      	str	r1, [r3, #0]
    chSchWakeupS(tp, msg);
 80020f2:	f7ff ff85 	bl	8002000 <chSchWakeupS>
 80020f6:	2300      	movs	r3, #0
 80020f8:	f383 8811 	msr	BASEPRI, r3
}
 80020fc:	bd08      	pop	{r3, pc}
 80020fe:	bf00      	nop

08002100 <Thread1.lto_priv.2>:
 * @api
 */
static inline void chRegSetThreadName(const char *name) {

#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.current->name = name;
 8002100:	4b08      	ldr	r3, [pc, #32]	; (8002124 <Thread1.lto_priv.2+0x24>)
 * This is a periodic thread that does absolutely nothing except flashing
 * a LED.
 */
static THD_WORKING_AREA(waThread1, 128);
static THD_FUNCTION(Thread1, arg) {
	trg2 = arg;
 8002102:	4e09      	ldr	r6, [pc, #36]	; (8002128 <Thread1.lto_priv.2+0x28>)
 8002104:	699b      	ldr	r3, [r3, #24]
 8002106:	4a09      	ldr	r2, [pc, #36]	; (800212c <Thread1.lto_priv.2+0x2c>)
//		//it2 = SysTick->VAL;
//	//	delta = 0x00FFFFFF & (it1 - it2);
//	    chThdSleepMilliseconds(600);
//	    palClearPad(GPIOD, GPIOD_LED4);
//		palSetPad(GPIOD, GPIOD_LED5); /* Orange.  */
	    palSetPad(GPIOD, GPIOD_LED3);       /* Orange.  */
 8002108:	4c09      	ldr	r4, [pc, #36]	; (8002130 <Thread1.lto_priv.2+0x30>)
	trg2 = arg;
 800210a:	6030      	str	r0, [r6, #0]
	    palSetPad(GPIOD, GPIOD_LED3);       /* Orange.  */
 800210c:	f44f 5500 	mov.w	r5, #8192	; 0x2000
static THD_FUNCTION(Thread1, arg) {
 8002110:	b580      	push	{r7, lr}
 8002112:	619a      	str	r2, [r3, #24]
	    palSetPad(GPIOD, GPIOD_LED3);       /* Orange.  */
 8002114:	462f      	mov	r7, r5
 8002116:	8327      	strh	r7, [r4, #24]
	    chThdResume(&(trg2->threadp),(msg_t) 0);
 8002118:	f7ff ffe2 	bl	80020e0 <chThdResume.constprop.0>
	    palClearPad(GPIOD, GPIOD_LED3);     /* Orange.  */
 800211c:	6830      	ldr	r0, [r6, #0]
 800211e:	8365      	strh	r5, [r4, #26]
	while (true) {
 8002120:	e7f9      	b.n	8002116 <Thread1.lto_priv.2+0x16>
 8002122:	bf00      	nop
 8002124:	200009b0 	.word	0x200009b0
 8002128:	200014cc 	.word	0x200014cc
 800212c:	08009cd4 	.word	0x08009cd4
 8002130:	40020c00 	.word	0x40020c00
	...

08002140 <chCondSignal.constprop.0>:
void chCondSignal(condition_variable_t *cp) {
 8002140:	b508      	push	{r3, lr}
 8002142:	2320      	movs	r3, #32
 8002144:	f383 8811 	msr	BASEPRI, r3
  return (bool)(tqp->next != (const thread_t *)tqp);
 8002148:	4b06      	ldr	r3, [pc, #24]	; (8002164 <chCondSignal.constprop.0+0x24>)
 800214a:	6818      	ldr	r0, [r3, #0]
  if (queue_notempty(&cp->queue)) {
 800214c:	4298      	cmp	r0, r3
 800214e:	d005      	beq.n	800215c <chCondSignal.constprop.0+0x1c>
  tqp->next             = tp->queue.next;
 8002150:	6802      	ldr	r2, [r0, #0]
 8002152:	601a      	str	r2, [r3, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 8002154:	6053      	str	r3, [r2, #4]
    chSchWakeupS(queue_fifo_remove(&cp->queue), MSG_OK);
 8002156:	2100      	movs	r1, #0
 8002158:	f7ff ff52 	bl	8002000 <chSchWakeupS>
 800215c:	2300      	movs	r3, #0
 800215e:	f383 8811 	msr	BASEPRI, r3
}
 8002162:	bd08      	pop	{r3, pc}
 8002164:	20000800 	.word	0x20000800
	...

08002170 <chThdCreateFromMemoryPool.constprop.0>:
 *                      the thread into the working space area.
 * @retval  NULL        if the memory pool is empty.
 *
 * @api
 */
thread_t *chThdCreateFromMemoryPool(memory_pool_t *mp, const char *name,
 8002170:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  thread_t *tp;
  void *wsp;

  chDbgCheck(mp != NULL);

  wsp = chPoolAlloc(mp);
 8002174:	4f14      	ldr	r7, [pc, #80]	; (80021c8 <chThdCreateFromMemoryPool.constprop.0+0x58>)
thread_t *chThdCreateFromMemoryPool(memory_pool_t *mp, const char *name,
 8002176:	b086      	sub	sp, #24
 8002178:	4680      	mov	r8, r0
  wsp = chPoolAlloc(mp);
 800217a:	4638      	mov	r0, r7
thread_t *chThdCreateFromMemoryPool(memory_pool_t *mp, const char *name,
 800217c:	460e      	mov	r6, r1
 800217e:	4615      	mov	r5, r2
  wsp = chPoolAlloc(mp);
 8002180:	f7fe fe56 	bl	8000e30 <chPoolAlloc>
  if (wsp == NULL) {
 8002184:	4604      	mov	r4, r0
 8002186:	b1d0      	cbz	r0, 80021be <chThdCreateFromMemoryPool.constprop.0+0x4e>
  }

  thread_descriptor_t td = {
    name,
    wsp,
    (stkalign_t *)((uint8_t *)wsp + mp->object_size),
 8002188:	687b      	ldr	r3, [r7, #4]
  thread_descriptor_t td = {
 800218a:	4a10      	ldr	r2, [pc, #64]	; (80021cc <chThdCreateFromMemoryPool.constprop.0+0x5c>)
 800218c:	f8cd 8000 	str.w	r8, [sp]
    (stkalign_t *)((uint8_t *)wsp + mp->object_size),
 8002190:	4403      	add	r3, r0
  thread_descriptor_t td = {
 8002192:	9302      	str	r3, [sp, #8]
 8002194:	9001      	str	r0, [sp, #4]
 8002196:	9603      	str	r6, [sp, #12]
 8002198:	9505      	str	r5, [sp, #20]
 800219a:	9204      	str	r2, [sp, #16]
 800219c:	2320      	movs	r3, #32
 800219e:	f383 8811 	msr	BASEPRI, r3
                  (uint8_t *)wsp + mp->object_size,
                  CH_DBG_STACK_FILL_VALUE);
#endif

  chSysLock();
  tp = chThdCreateSuspendedI(&td);
 80021a2:	4668      	mov	r0, sp
 80021a4:	f7fe ffbc 	bl	8001120 <chThdCreateSuspendedI>
  tp->flags = CH_FLAG_MODE_MPOOL;
 80021a8:	2302      	movs	r3, #2
 80021aa:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
  tp->mpool = mp;
 80021ae:	6407      	str	r7, [r0, #64]	; 0x40
  chSchWakeupS(tp, MSG_OK);
 80021b0:	2100      	movs	r1, #0
  tp = chThdCreateSuspendedI(&td);
 80021b2:	4604      	mov	r4, r0
  chSchWakeupS(tp, MSG_OK);
 80021b4:	f7ff ff24 	bl	8002000 <chSchWakeupS>
 80021b8:	2300      	movs	r3, #0
 80021ba:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return tp;
}
 80021be:	4620      	mov	r0, r4
 80021c0:	b006      	add	sp, #24
 80021c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80021c6:	bf00      	nop
 80021c8:	20000c40 	.word	0x20000c40
 80021cc:	08000c61 	.word	0x08000c61

080021d0 <chSemSignal>:
void chSemSignal(semaphore_t *sp) {
 80021d0:	b508      	push	{r3, lr}
 80021d2:	2220      	movs	r2, #32
 80021d4:	f382 8811 	msr	BASEPRI, r2
  if (++sp->cnt <= (cnt_t)0) {
 80021d8:	6882      	ldr	r2, [r0, #8]
 80021da:	3201      	adds	r2, #1
 80021dc:	2a00      	cmp	r2, #0
 80021de:	6082      	str	r2, [r0, #8]
 80021e0:	dd03      	ble.n	80021ea <chSemSignal+0x1a>
 80021e2:	2300      	movs	r3, #0
 80021e4:	f383 8811 	msr	BASEPRI, r3
}
 80021e8:	bd08      	pop	{r3, pc}
 80021ea:	4603      	mov	r3, r0
  thread_t *tp = tqp->next;
 80021ec:	6800      	ldr	r0, [r0, #0]
  tqp->next             = tp->queue.next;
 80021ee:	6802      	ldr	r2, [r0, #0]
 80021f0:	601a      	str	r2, [r3, #0]
    chSchWakeupS(queue_fifo_remove(&sp->queue), MSG_OK);
 80021f2:	2100      	movs	r1, #0
  tqp->next->queue.prev = (thread_t *)tqp;
 80021f4:	6053      	str	r3, [r2, #4]
 80021f6:	f7ff ff03 	bl	8002000 <chSchWakeupS>
 80021fa:	2300      	movs	r3, #0
 80021fc:	f383 8811 	msr	BASEPRI, r3
}
 8002200:	bd08      	pop	{r3, pc}
 8002202:	bf00      	nop
	...

08002210 <chThdCreate>:
thread_t *chThdCreate(const thread_descriptor_t *tdp) {
 8002210:	b510      	push	{r4, lr}
 8002212:	2320      	movs	r3, #32
 8002214:	f383 8811 	msr	BASEPRI, r3
  tp = chThdCreateSuspendedI(tdp);
 8002218:	f7fe ff82 	bl	8001120 <chThdCreateSuspendedI>
  chSchWakeupS(tp, MSG_OK);
 800221c:	2100      	movs	r1, #0
  tp = chThdCreateSuspendedI(tdp);
 800221e:	4604      	mov	r4, r0
  chSchWakeupS(tp, MSG_OK);
 8002220:	f7ff feee 	bl	8002000 <chSchWakeupS>
 8002224:	2300      	movs	r3, #0
 8002226:	f383 8811 	msr	BASEPRI, r3
}
 800222a:	4620      	mov	r0, r4
 800222c:	bd10      	pop	{r4, pc}
 800222e:	bf00      	nop

08002230 <chSchGoSleepS>:
  thread_t *otp = currp;
 8002230:	4b08      	ldr	r3, [pc, #32]	; (8002254 <chSchGoSleepS+0x24>)
 8002232:	6999      	ldr	r1, [r3, #24]
  thread_t *tp = tqp->next;
 8002234:	681a      	ldr	r2, [r3, #0]
void chSchGoSleepS(tstate_t newstate) {
 8002236:	b410      	push	{r4}
  otp->state = newstate;
 8002238:	f881 0020 	strb.w	r0, [r1, #32]
  tqp->next             = tp->queue.next;
 800223c:	6810      	ldr	r0, [r2, #0]
 800223e:	6018      	str	r0, [r3, #0]
  currp->state = CH_STATE_CURRENT;
 8002240:	2401      	movs	r4, #1
  tqp->next->queue.prev = (thread_t *)tqp;
 8002242:	6043      	str	r3, [r0, #4]
 8002244:	f882 4020 	strb.w	r4, [r2, #32]
}
 8002248:	bc10      	pop	{r4}
  currp = queue_fifo_remove(&ch.rlist.queue);
 800224a:	619a      	str	r2, [r3, #24]
  chSysSwitch(currp, otp);
 800224c:	4610      	mov	r0, r2
 800224e:	f7fe b837 	b.w	80002c0 <_port_switch>
 8002252:	bf00      	nop
 8002254:	200009b0 	.word	0x200009b0
	...

08002260 <chEvtWaitOne.constprop.0>:
 * @return              The mask of the lowest event id served and cleared.
 *
 * @api
 */
eventmask_t chEvtWaitOne(eventmask_t events) {
  thread_t *ctp = currp;
 8002260:	4a0c      	ldr	r2, [pc, #48]	; (8002294 <chEvtWaitOne.constprop.0+0x34>)
eventmask_t chEvtWaitOne(eventmask_t events) {
 8002262:	b510      	push	{r4, lr}
 8002264:	2320      	movs	r3, #32
  thread_t *ctp = currp;
 8002266:	6994      	ldr	r4, [r2, #24]
 8002268:	f383 8811 	msr	BASEPRI, r3
  eventmask_t m;

  chSysLock();
  m = ctp->epending & events;
 800226c:	6b60      	ldr	r0, [r4, #52]	; 0x34
  if (m == (eventmask_t)0) {
 800226e:	b140      	cbz	r0, 8002282 <chEvtWaitOne.constprop.0+0x22>
    ctp->u.ewmask = events;
    chSchGoSleepS(CH_STATE_WTOREVT);
    m = ctp->epending & events;
  }
  m ^= m & (m - (eventmask_t)1);
 8002270:	4243      	negs	r3, r0
  ctp->epending &= ~m;
 8002272:	ea20 0203 	bic.w	r2, r0, r3
 8002276:	6362      	str	r2, [r4, #52]	; 0x34
  m ^= m & (m - (eventmask_t)1);
 8002278:	4018      	ands	r0, r3
 800227a:	2300      	movs	r3, #0
 800227c:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return m;
}
 8002280:	bd10      	pop	{r4, pc}
    ctp->u.ewmask = events;
 8002282:	f04f 33ff 	mov.w	r3, #4294967295
    chSchGoSleepS(CH_STATE_WTOREVT);
 8002286:	200a      	movs	r0, #10
    ctp->u.ewmask = events;
 8002288:	6263      	str	r3, [r4, #36]	; 0x24
    chSchGoSleepS(CH_STATE_WTOREVT);
 800228a:	f7ff ffd1 	bl	8002230 <chSchGoSleepS>
    m = ctp->epending & events;
 800228e:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8002290:	e7ee      	b.n	8002270 <chEvtWaitOne.constprop.0+0x10>
 8002292:	bf00      	nop
 8002294:	200009b0 	.word	0x200009b0
	...

080022a0 <chEvtWaitAny.constprop.0>:
 * @return              The mask of the served and cleared events.
 *
 * @api
 */
eventmask_t chEvtWaitAny(eventmask_t events) {
  thread_t *ctp = currp;
 80022a0:	4a0c      	ldr	r2, [pc, #48]	; (80022d4 <chEvtWaitAny.constprop.0+0x34>)
eventmask_t chEvtWaitAny(eventmask_t events) {
 80022a2:	b510      	push	{r4, lr}
 80022a4:	2320      	movs	r3, #32
  thread_t *ctp = currp;
 80022a6:	6994      	ldr	r4, [r2, #24]
 80022a8:	f383 8811 	msr	BASEPRI, r3
  eventmask_t m;

  chSysLock();
  m = ctp->epending & events;
 80022ac:	6b60      	ldr	r0, [r4, #52]	; 0x34
  if (m == (eventmask_t)0) {
 80022ae:	b120      	cbz	r0, 80022ba <chEvtWaitAny.constprop.0+0x1a>
    ctp->u.ewmask = events;
    chSchGoSleepS(CH_STATE_WTOREVT);
    m = ctp->epending & events;
  }
  ctp->epending &= ~m;
 80022b0:	2300      	movs	r3, #0
 80022b2:	6363      	str	r3, [r4, #52]	; 0x34
 80022b4:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return m;
}
 80022b8:	bd10      	pop	{r4, pc}
    ctp->u.ewmask = events;
 80022ba:	f04f 33ff 	mov.w	r3, #4294967295
 80022be:	6263      	str	r3, [r4, #36]	; 0x24
    chSchGoSleepS(CH_STATE_WTOREVT);
 80022c0:	200a      	movs	r0, #10
 80022c2:	f7ff ffb5 	bl	8002230 <chSchGoSleepS>
  ctp->epending &= ~m;
 80022c6:	2300      	movs	r3, #0
    m = ctp->epending & events;
 80022c8:	6b60      	ldr	r0, [r4, #52]	; 0x34
  ctp->epending &= ~m;
 80022ca:	6363      	str	r3, [r4, #52]	; 0x34
 80022cc:	f383 8811 	msr	BASEPRI, r3
}
 80022d0:	bd10      	pop	{r4, pc}
 80022d2:	bf00      	nop
 80022d4:	200009b0 	.word	0x200009b0
	...

080022e0 <chEvtWaitAll.constprop.0>:
 * @return              The mask of the served and cleared events.
 *
 * @api
 */
eventmask_t chEvtWaitAll(eventmask_t events) {
  thread_t *ctp = currp;
 80022e0:	4a0c      	ldr	r2, [pc, #48]	; (8002314 <chEvtWaitAll.constprop.0+0x34>)
eventmask_t chEvtWaitAll(eventmask_t events) {
 80022e2:	b510      	push	{r4, lr}
 80022e4:	2320      	movs	r3, #32
  thread_t *ctp = currp;
 80022e6:	6994      	ldr	r4, [r2, #24]
 80022e8:	f383 8811 	msr	BASEPRI, r3

  chSysLock();
  if ((ctp->epending & events) != events) {
 80022ec:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80022ee:	f003 0205 	and.w	r2, r3, #5
 80022f2:	2a05      	cmp	r2, #5
 80022f4:	d005      	beq.n	8002302 <chEvtWaitAll.constprop.0+0x22>
    ctp->u.ewmask = events;
 80022f6:	2305      	movs	r3, #5
 80022f8:	6263      	str	r3, [r4, #36]	; 0x24
    chSchGoSleepS(CH_STATE_WTANDEVT);
 80022fa:	200b      	movs	r0, #11
 80022fc:	f7ff ff98 	bl	8002230 <chSchGoSleepS>
 8002300:	6b63      	ldr	r3, [r4, #52]	; 0x34
  }
  ctp->epending &= ~events;
 8002302:	f023 0305 	bic.w	r3, r3, #5
 8002306:	6363      	str	r3, [r4, #52]	; 0x34
 8002308:	2300      	movs	r3, #0
 800230a:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return events;
}
 800230e:	2005      	movs	r0, #5
 8002310:	bd10      	pop	{r4, pc}
 8002312:	bf00      	nop
 8002314:	200009b0 	.word	0x200009b0
	...

08002320 <bmk_thread4>:
  return ch.rlist.current;
 8002320:	4a07      	ldr	r2, [pc, #28]	; (8002340 <bmk_thread4+0x20>)
static THD_FUNCTION(bmk_thread4, p) {
 8002322:	b510      	push	{r4, lr}
 8002324:	2320      	movs	r3, #32
 8002326:	6994      	ldr	r4, [r2, #24]
 8002328:	f383 8811 	msr	BASEPRI, r3
    chSchGoSleepS(CH_STATE_SUSPENDED);
 800232c:	2003      	movs	r0, #3
 800232e:	f7ff ff7f 	bl	8002230 <chSchGoSleepS>
  } while (msg == MSG_OK);
 8002332:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002334:	2b00      	cmp	r3, #0
 8002336:	d0f9      	beq.n	800232c <bmk_thread4+0xc>
 8002338:	2300      	movs	r3, #0
 800233a:	f383 8811 	msr	BASEPRI, r3
}
 800233e:	bd10      	pop	{r4, pc}
 8002340:	200009b0 	.word	0x200009b0
	...

08002350 <chSchGoSleepTimeoutS>:
msg_t chSchGoSleepTimeoutS(tstate_t newstate, sysinterval_t timeout) {
 8002350:	b530      	push	{r4, r5, lr}
  if (TIME_INFINITE != timeout) {
 8002352:	1c4b      	adds	r3, r1, #1
msg_t chSchGoSleepTimeoutS(tstate_t newstate, sysinterval_t timeout) {
 8002354:	b087      	sub	sp, #28
  if (TIME_INFINITE != timeout) {
 8002356:	d012      	beq.n	800237e <chSchGoSleepTimeoutS+0x2e>
    chVTDoSetI(&vt, timeout, wakeup, currp);
 8002358:	4d0c      	ldr	r5, [pc, #48]	; (800238c <chSchGoSleepTimeoutS+0x3c>)
 800235a:	4a0d      	ldr	r2, [pc, #52]	; (8002390 <chSchGoSleepTimeoutS+0x40>)
 800235c:	69ab      	ldr	r3, [r5, #24]
 800235e:	4604      	mov	r4, r0
 8002360:	a801      	add	r0, sp, #4
 8002362:	f7ff f905 	bl	8001570 <chVTDoSetI>
    chSchGoSleepS(newstate);
 8002366:	4620      	mov	r0, r4
 8002368:	f7ff ff62 	bl	8002230 <chSchGoSleepS>
    if (chVTIsArmedI(&vt)) {
 800236c:	9b04      	ldr	r3, [sp, #16]
 800236e:	b113      	cbz	r3, 8002376 <chSchGoSleepTimeoutS+0x26>
      chVTDoResetI(&vt);
 8002370:	a801      	add	r0, sp, #4
 8002372:	f7ff f8bd 	bl	80014f0 <chVTDoResetI>
  return currp->u.rdymsg;
 8002376:	69ab      	ldr	r3, [r5, #24]
}
 8002378:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800237a:	b007      	add	sp, #28
 800237c:	bd30      	pop	{r4, r5, pc}
    chSchGoSleepS(newstate);
 800237e:	4d03      	ldr	r5, [pc, #12]	; (800238c <chSchGoSleepTimeoutS+0x3c>)
 8002380:	f7ff ff56 	bl	8002230 <chSchGoSleepS>
  return currp->u.rdymsg;
 8002384:	69ab      	ldr	r3, [r5, #24]
}
 8002386:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8002388:	b007      	add	sp, #28
 800238a:	bd30      	pop	{r4, r5, pc}
 800238c:	200009b0 	.word	0x200009b0
 8002390:	080011a1 	.word	0x080011a1
	...

080023a0 <chSemWaitTimeout.constprop.0>:
 80023a0:	2320      	movs	r3, #32
 80023a2:	f383 8811 	msr	BASEPRI, r3
  if (--sp->cnt < (cnt_t)0) {
 80023a6:	4b10      	ldr	r3, [pc, #64]	; (80023e8 <chSemWaitTimeout.constprop.0+0x48>)
 80023a8:	6899      	ldr	r1, [r3, #8]
 80023aa:	1e4a      	subs	r2, r1, #1
 80023ac:	2a00      	cmp	r2, #0
 80023ae:	609a      	str	r2, [r3, #8]
 80023b0:	db04      	blt.n	80023bc <chSemWaitTimeout.constprop.0+0x1c>
  return MSG_OK;
 80023b2:	2000      	movs	r0, #0
 80023b4:	2300      	movs	r3, #0
 80023b6:	f383 8811 	msr	BASEPRI, r3
}
 80023ba:	4770      	bx	lr
    if (TIME_IMMEDIATE == timeout) {
 80023bc:	b180      	cbz	r0, 80023e0 <chSemWaitTimeout.constprop.0+0x40>
    currp->u.wtsemp = sp;
 80023be:	4a0b      	ldr	r2, [pc, #44]	; (80023ec <chSemWaitTimeout.constprop.0+0x4c>)
msg_t chSemWaitTimeout(semaphore_t *sp, sysinterval_t timeout) {
 80023c0:	b510      	push	{r4, lr}
    currp->u.wtsemp = sp;
 80023c2:	6992      	ldr	r2, [r2, #24]
  tp->queue.prev             = tqp->prev;
 80023c4:	685c      	ldr	r4, [r3, #4]
 80023c6:	6253      	str	r3, [r2, #36]	; 0x24
 80023c8:	e9c2 3400 	strd	r3, r4, [r2]
    return chSchGoSleepTimeoutS(CH_STATE_WTSEM, timeout);
 80023cc:	4601      	mov	r1, r0
  tp->queue.prev->queue.next = tp;
 80023ce:	6022      	str	r2, [r4, #0]
 80023d0:	2005      	movs	r0, #5
  tqp->prev                  = tp;
 80023d2:	605a      	str	r2, [r3, #4]
 80023d4:	f7ff ffbc 	bl	8002350 <chSchGoSleepTimeoutS>
 80023d8:	2300      	movs	r3, #0
 80023da:	f383 8811 	msr	BASEPRI, r3
}
 80023de:	bd10      	pop	{r4, pc}
      sp->cnt++;
 80023e0:	6099      	str	r1, [r3, #8]
      return MSG_TIMEOUT;
 80023e2:	f04f 30ff 	mov.w	r0, #4294967295
 80023e6:	e7e5      	b.n	80023b4 <chSemWaitTimeout.constprop.0+0x14>
 80023e8:	20000d70 	.word	0x20000d70
 80023ec:	200009b0 	.word	0x200009b0

080023f0 <rt_test_009_006_execute>:
static void rt_test_009_006_execute(void) {
 80023f0:	b570      	push	{r4, r5, r6, lr}
  test_set_step(1);
 80023f2:	4d58      	ldr	r5, [pc, #352]	; (8002554 <rt_test_009_006_execute+0x164>)
 * @retval 0            if the operation has timed out.
 *
 * @api
 */
eventmask_t chEvtWaitOneTimeout(eventmask_t events, sysinterval_t timeout) {
  thread_t *ctp = currp;
 80023f4:	4c58      	ldr	r4, [pc, #352]	; (8002558 <rt_test_009_006_execute+0x168>)
 80023f6:	2001      	movs	r0, #1
 80023f8:	69a2      	ldr	r2, [r4, #24]
 80023fa:	6028      	str	r0, [r5, #0]
 80023fc:	2320      	movs	r3, #32
 80023fe:	f383 8811 	msr	BASEPRI, r3
  eventmask_t m;

  chSysLock();
  m = ctp->epending & events;
 8002402:	6b53      	ldr	r3, [r2, #52]	; 0x34
  if (m == (eventmask_t)0) {
 8002404:	b933      	cbnz	r3, 8002414 <rt_test_009_006_execute+0x24>
 8002406:	f383 8811 	msr	BASEPRI, r3
    test_assert(m == 0, "spurious event");
 800240a:	4954      	ldr	r1, [pc, #336]	; (800255c <rt_test_009_006_execute+0x16c>)
 800240c:	f7fe fae8 	bl	80009e0 <_test_assert>
 8002410:	b180      	cbz	r0, 8002434 <rt_test_009_006_execute+0x44>
}
 8002412:	bd70      	pop	{r4, r5, r6, pc}
      chSysUnlock();
      return (eventmask_t)0;
    }
    m = ctp->epending & events;
  }
  m ^= m & (m - (eventmask_t)1);
 8002414:	4258      	negs	r0, r3
  ctp->epending &= ~m;
 8002416:	ea23 0100 	bic.w	r1, r3, r0
 800241a:	6351      	str	r1, [r2, #52]	; 0x34
  m ^= m & (m - (eventmask_t)1);
 800241c:	4018      	ands	r0, r3
 800241e:	2300      	movs	r3, #0
 8002420:	f383 8811 	msr	BASEPRI, r3
 8002424:	fab0 f080 	clz	r0, r0
    test_assert(m == 0, "spurious event");
 8002428:	494c      	ldr	r1, [pc, #304]	; (800255c <rt_test_009_006_execute+0x16c>)
 800242a:	0940      	lsrs	r0, r0, #5
 800242c:	f7fe fad8 	bl	80009e0 <_test_assert>
 8002430:	2800      	cmp	r0, #0
 8002432:	d1ee      	bne.n	8002412 <rt_test_009_006_execute+0x22>
 * @retval 0            if the operation has timed out.
 *
 * @api
 */
eventmask_t chEvtWaitAnyTimeout(eventmask_t events, sysinterval_t timeout) {
  thread_t *ctp = currp;
 8002434:	69a3      	ldr	r3, [r4, #24]
 8002436:	2220      	movs	r2, #32
 8002438:	f382 8811 	msr	BASEPRI, r2
  eventmask_t m;

  chSysLock();
  m = ctp->epending & events;
  if (m == (eventmask_t)0) {
 800243c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800243e:	2a00      	cmp	r2, #0
 8002440:	d167      	bne.n	8002512 <rt_test_009_006_execute+0x122>
 8002442:	f380 8811 	msr	BASEPRI, r0
 8002446:	2001      	movs	r0, #1
    test_assert(m == 0, "spurious event");
 8002448:	4944      	ldr	r1, [pc, #272]	; (800255c <rt_test_009_006_execute+0x16c>)
 800244a:	f7fe fac9 	bl	80009e0 <_test_assert>
 800244e:	2800      	cmp	r0, #0
 8002450:	d1df      	bne.n	8002412 <rt_test_009_006_execute+0x22>
 * @retval 0            if the operation has timed out.
 *
 * @api
 */
eventmask_t chEvtWaitAllTimeout(eventmask_t events, sysinterval_t timeout) {
  thread_t *ctp = currp;
 8002452:	69a3      	ldr	r3, [r4, #24]
 8002454:	2220      	movs	r2, #32
 8002456:	f382 8811 	msr	BASEPRI, r2

  chSysLock();
  if ((ctp->epending & events) != events) {
 800245a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800245c:	3201      	adds	r2, #1
 800245e:	d05c      	beq.n	800251a <rt_test_009_006_execute+0x12a>
 8002460:	f380 8811 	msr	BASEPRI, r0
 8002464:	2001      	movs	r0, #1
    test_assert(m == 0, "spurious event");
 8002466:	493d      	ldr	r1, [pc, #244]	; (800255c <rt_test_009_006_execute+0x16c>)
 8002468:	f7fe faba 	bl	80009e0 <_test_assert>
 800246c:	2800      	cmp	r0, #0
 800246e:	d1d0      	bne.n	8002412 <rt_test_009_006_execute+0x22>
  test_set_step(2);
 8002470:	2302      	movs	r3, #2
 8002472:	602b      	str	r3, [r5, #0]
  thread_t *ctp = currp;
 8002474:	69a6      	ldr	r6, [r4, #24]
 8002476:	2320      	movs	r3, #32
 8002478:	f383 8811 	msr	BASEPRI, r3
  m = ctp->epending & events;
 800247c:	6b75      	ldr	r5, [r6, #52]	; 0x34
  if (m == (eventmask_t)0) {
 800247e:	b955      	cbnz	r5, 8002496 <rt_test_009_006_execute+0xa6>
    ctp->u.ewmask = events;
 8002480:	f04f 33ff 	mov.w	r3, #4294967295
 8002484:	6273      	str	r3, [r6, #36]	; 0x24
    if (chSchGoSleepTimeoutS(CH_STATE_WTOREVT, timeout) < MSG_OK) {
 8002486:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800248a:	200a      	movs	r0, #10
 800248c:	f7ff ff60 	bl	8002350 <chSchGoSleepTimeoutS>
 8002490:	2800      	cmp	r0, #0
 8002492:	db52      	blt.n	800253a <rt_test_009_006_execute+0x14a>
    m = ctp->epending & events;
 8002494:	6b75      	ldr	r5, [r6, #52]	; 0x34
  m ^= m & (m - (eventmask_t)1);
 8002496:	4268      	negs	r0, r5
  ctp->epending &= ~m;
 8002498:	ea25 0300 	bic.w	r3, r5, r0
 800249c:	6373      	str	r3, [r6, #52]	; 0x34
  m ^= m & (m - (eventmask_t)1);
 800249e:	4028      	ands	r0, r5
 80024a0:	2300      	movs	r3, #0
 80024a2:	f383 8811 	msr	BASEPRI, r3
 80024a6:	fab0 f080 	clz	r0, r0
 80024aa:	0940      	lsrs	r0, r0, #5
    test_assert(m == 0, "spurious event");
 80024ac:	492b      	ldr	r1, [pc, #172]	; (800255c <rt_test_009_006_execute+0x16c>)
 80024ae:	f7fe fa97 	bl	80009e0 <_test_assert>
 80024b2:	2800      	cmp	r0, #0
 80024b4:	d1ad      	bne.n	8002412 <rt_test_009_006_execute+0x22>
  thread_t *ctp = currp;
 80024b6:	69a6      	ldr	r6, [r4, #24]
 80024b8:	2320      	movs	r3, #32
 80024ba:	f383 8811 	msr	BASEPRI, r3
  m = ctp->epending & events;
 80024be:	6b75      	ldr	r5, [r6, #52]	; 0x34
  if (m == (eventmask_t)0) {
 80024c0:	b37d      	cbz	r5, 8002522 <rt_test_009_006_execute+0x132>
  ctp->epending &= ~m;
 80024c2:	2300      	movs	r3, #0
 80024c4:	6373      	str	r3, [r6, #52]	; 0x34
 80024c6:	f383 8811 	msr	BASEPRI, r3
 80024ca:	fab5 f085 	clz	r0, r5
 80024ce:	0940      	lsrs	r0, r0, #5
    test_assert(m == 0, "spurious event");
 80024d0:	4922      	ldr	r1, [pc, #136]	; (800255c <rt_test_009_006_execute+0x16c>)
 80024d2:	f7fe fa85 	bl	80009e0 <_test_assert>
 80024d6:	4605      	mov	r5, r0
 80024d8:	2800      	cmp	r0, #0
 80024da:	d19a      	bne.n	8002412 <rt_test_009_006_execute+0x22>
  thread_t *ctp = currp;
 80024dc:	69a4      	ldr	r4, [r4, #24]
 80024de:	2320      	movs	r3, #32
 80024e0:	f383 8811 	msr	BASEPRI, r3
  if ((ctp->epending & events) != events) {
 80024e4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80024e6:	3301      	adds	r3, #1
 80024e8:	d009      	beq.n	80024fe <rt_test_009_006_execute+0x10e>
    if (TIME_IMMEDIATE == timeout) {
      chSysUnlock();
      return (eventmask_t)0;
    }
    ctp->u.ewmask = events;
 80024ea:	f04f 33ff 	mov.w	r3, #4294967295
 80024ee:	6263      	str	r3, [r4, #36]	; 0x24
    if (chSchGoSleepTimeoutS(CH_STATE_WTANDEVT, timeout) < MSG_OK) {
 80024f0:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80024f4:	200b      	movs	r0, #11
 80024f6:	f7ff ff2b 	bl	8002350 <chSchGoSleepTimeoutS>
 80024fa:	2800      	cmp	r0, #0
 80024fc:	db25      	blt.n	800254a <rt_test_009_006_execute+0x15a>
      chSysUnlock();
      return (eventmask_t)0;
    }
  }
  ctp->epending &= ~events;
 80024fe:	2300      	movs	r3, #0
 8002500:	6363      	str	r3, [r4, #52]	; 0x34
 8002502:	f383 8811 	msr	BASEPRI, r3
    test_assert(m == 0, "spurious event");
 8002506:	4628      	mov	r0, r5
 8002508:	4914      	ldr	r1, [pc, #80]	; (800255c <rt_test_009_006_execute+0x16c>)
}
 800250a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    test_assert(m == 0, "spurious event");
 800250e:	f7fe ba67 	b.w	80009e0 <_test_assert>
  ctp->epending &= ~m;
 8002512:	6358      	str	r0, [r3, #52]	; 0x34
 8002514:	f380 8811 	msr	BASEPRI, r0
 8002518:	e796      	b.n	8002448 <rt_test_009_006_execute+0x58>
  ctp->epending &= ~events;
 800251a:	6358      	str	r0, [r3, #52]	; 0x34
 800251c:	f380 8811 	msr	BASEPRI, r0
 8002520:	e7a1      	b.n	8002466 <rt_test_009_006_execute+0x76>
    ctp->u.ewmask = events;
 8002522:	f04f 33ff 	mov.w	r3, #4294967295
 8002526:	6273      	str	r3, [r6, #36]	; 0x24
    if (chSchGoSleepTimeoutS(CH_STATE_WTOREVT, timeout) < MSG_OK) {
 8002528:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800252c:	200a      	movs	r0, #10
 800252e:	f7ff ff0f 	bl	8002350 <chSchGoSleepTimeoutS>
 8002532:	2800      	cmp	r0, #0
 8002534:	db05      	blt.n	8002542 <rt_test_009_006_execute+0x152>
    m = ctp->epending & events;
 8002536:	6b75      	ldr	r5, [r6, #52]	; 0x34
 8002538:	e7c3      	b.n	80024c2 <rt_test_009_006_execute+0xd2>
 800253a:	f385 8811 	msr	BASEPRI, r5
 800253e:	2001      	movs	r0, #1
 8002540:	e7b4      	b.n	80024ac <rt_test_009_006_execute+0xbc>
 8002542:	f385 8811 	msr	BASEPRI, r5
 8002546:	2001      	movs	r0, #1
 8002548:	e7c2      	b.n	80024d0 <rt_test_009_006_execute+0xe0>
 800254a:	f385 8811 	msr	BASEPRI, r5
 800254e:	2501      	movs	r5, #1
 8002550:	e7d9      	b.n	8002506 <rt_test_009_006_execute+0x116>
 8002552:	bf00      	nop
 8002554:	2000149c 	.word	0x2000149c
 8002558:	200009b0 	.word	0x200009b0
 800255c:	08009cdc 	.word	0x08009cdc

08002560 <chGuardedPoolAllocTimeout>:
 * @retval NULL         if the operation timed out.
 *
 * @api
 */
void *chGuardedPoolAllocTimeout(guarded_memory_pool_t *gmp,
                                sysinterval_t timeout) {
 8002560:	b510      	push	{r4, lr}
 8002562:	2320      	movs	r3, #32
 8002564:	4604      	mov	r4, r0
 8002566:	f383 8811 	msr	BASEPRI, r3
  if (--sp->cnt < (cnt_t)0) {
 800256a:	6882      	ldr	r2, [r0, #8]
 800256c:	1e53      	subs	r3, r2, #1
 800256e:	2b00      	cmp	r3, #0
 8002570:	6083      	str	r3, [r0, #8]
 8002572:	db07      	blt.n	8002584 <chGuardedPoolAllocTimeout+0x24>
  objp = mp->next;
 8002574:	68e0      	ldr	r0, [r4, #12]
  if (objp != NULL) {
 8002576:	b1c8      	cbz	r0, 80025ac <chGuardedPoolAllocTimeout+0x4c>
    mp->next = mp->next->next;
 8002578:	6803      	ldr	r3, [r0, #0]
 800257a:	60e3      	str	r3, [r4, #12]
 800257c:	2300      	movs	r3, #0
 800257e:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  p = chGuardedPoolAllocTimeoutS(gmp, timeout);
  chSysUnlock();

  return p;
}
 8002582:	bd10      	pop	{r4, pc}
    if (TIME_IMMEDIATE == timeout) {
 8002584:	4608      	mov	r0, r1
 8002586:	b1d9      	cbz	r1, 80025c0 <chGuardedPoolAllocTimeout+0x60>
    currp->u.wtsemp = sp;
 8002588:	4b0e      	ldr	r3, [pc, #56]	; (80025c4 <chGuardedPoolAllocTimeout+0x64>)
 800258a:	699b      	ldr	r3, [r3, #24]
 800258c:	625c      	str	r4, [r3, #36]	; 0x24
  tp->queue.prev             = tqp->prev;
 800258e:	6862      	ldr	r2, [r4, #4]
    return chSchGoSleepTimeoutS(CH_STATE_WTSEM, timeout);
 8002590:	2005      	movs	r0, #5
 8002592:	e9c3 4200 	strd	r4, r2, [r3]
  tp->queue.prev->queue.next = tp;
 8002596:	6013      	str	r3, [r2, #0]
  tqp->prev                  = tp;
 8002598:	6063      	str	r3, [r4, #4]
 800259a:	f7ff fed9 	bl	8002350 <chSchGoSleepTimeoutS>
  if (msg != MSG_OK) {
 800259e:	2800      	cmp	r0, #0
 80025a0:	d0e8      	beq.n	8002574 <chGuardedPoolAllocTimeout+0x14>
    return NULL;
 80025a2:	2000      	movs	r0, #0
 80025a4:	2300      	movs	r3, #0
 80025a6:	f383 8811 	msr	BASEPRI, r3
}
 80025aa:	bd10      	pop	{r4, pc}
  else if (mp->provider != NULL) {
 80025ac:	69a3      	ldr	r3, [r4, #24]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d0f7      	beq.n	80025a2 <chGuardedPoolAllocTimeout+0x42>
    objp = mp->provider(mp->object_size, mp->align);
 80025b2:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
 80025b6:	4798      	blx	r3
 80025b8:	2300      	movs	r3, #0
 80025ba:	f383 8811 	msr	BASEPRI, r3
}
 80025be:	bd10      	pop	{r4, pc}
      sp->cnt++;
 80025c0:	60a2      	str	r2, [r4, #8]
  if (msg != MSG_OK) {
 80025c2:	e7db      	b.n	800257c <chGuardedPoolAllocTimeout+0x1c>
 80025c4:	200009b0 	.word	0x200009b0
	...

080025d0 <oslib_test_007_003_execute>:

static void oslib_test_007_003_execute(void) {
 80025d0:	b508      	push	{r3, lr}

  /* [7.3.1] Trying to allocate with 100mS timeout, must fail because
     the pool is empty.*/
  test_set_step(1);
 80025d2:	4b08      	ldr	r3, [pc, #32]	; (80025f4 <oslib_test_007_003_execute+0x24>)
  {
    test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_MS2I(100)) == NULL, "list not empty");
 80025d4:	4808      	ldr	r0, [pc, #32]	; (80025f8 <oslib_test_007_003_execute+0x28>)
  test_set_step(1);
 80025d6:	2201      	movs	r2, #1
    test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_MS2I(100)) == NULL, "list not empty");
 80025d8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
  test_set_step(1);
 80025dc:	601a      	str	r2, [r3, #0]
    test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_MS2I(100)) == NULL, "list not empty");
 80025de:	f7ff ffbf 	bl	8002560 <chGuardedPoolAllocTimeout>
 80025e2:	fab0 f080 	clz	r0, r0
  }
  test_end_step(1);
}
 80025e6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_MS2I(100)) == NULL, "list not empty");
 80025ea:	4904      	ldr	r1, [pc, #16]	; (80025fc <oslib_test_007_003_execute+0x2c>)
 80025ec:	0940      	lsrs	r0, r0, #5
 80025ee:	f7fe b9f7 	b.w	80009e0 <_test_assert>
 80025f2:	bf00      	nop
 80025f4:	2000149c 	.word	0x2000149c
 80025f8:	20000810 	.word	0x20000810
 80025fc:	08009044 	.word	0x08009044

08002600 <chThdEnqueueTimeoutS>:
  if (TIME_IMMEDIATE == timeout) {
 8002600:	b161      	cbz	r1, 800261c <chThdEnqueueTimeoutS+0x1c>
  queue_insert(currp, tqp);
 8002602:	4a08      	ldr	r2, [pc, #32]	; (8002624 <chThdEnqueueTimeoutS+0x24>)
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, sysinterval_t timeout) {
 8002604:	b410      	push	{r4}
  queue_insert(currp, tqp);
 8002606:	6992      	ldr	r2, [r2, #24]
  tp->queue.prev             = tqp->prev;
 8002608:	6844      	ldr	r4, [r0, #4]
 800260a:	4603      	mov	r3, r0
 800260c:	e9c2 3400 	strd	r3, r4, [r2]
  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 8002610:	2004      	movs	r0, #4
  tp->queue.prev->queue.next = tp;
 8002612:	6022      	str	r2, [r4, #0]
}
 8002614:	bc10      	pop	{r4}
  tqp->prev                  = tp;
 8002616:	605a      	str	r2, [r3, #4]
  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 8002618:	f7ff be9a 	b.w	8002350 <chSchGoSleepTimeoutS>
}
 800261c:	f04f 30ff 	mov.w	r0, #4294967295
 8002620:	4770      	bx	lr
 8002622:	bf00      	nop
 8002624:	200009b0 	.word	0x200009b0
	...

08002630 <oqWriteTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t oqWriteTimeout(output_queue_t *oqp, const uint8_t *bp,
                      size_t n, sysinterval_t timeout) {
 8002630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002634:	b085      	sub	sp, #20
 8002636:	e9cd 3202 	strd	r3, r2, [sp, #8]
  qnotify_t nfy = oqp->q_notify;
 800263a:	69c7      	ldr	r7, [r0, #28]
 800263c:	f04f 0920 	mov.w	r9, #32
 8002640:	f389 8811 	msr	BASEPRI, r9

  osalDbgCheck(n > 0U);

  osalSysLock();

  while (n > 0U) {
 8002644:	b3a2      	cbz	r2, 80026b0 <oqWriteTimeout+0x80>
 8002646:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800264a:	4604      	mov	r4, r0
 800264c:	460e      	mov	r6, r1
 800264e:	f04f 0a00 	mov.w	sl, #0
  if (n > oqGetEmptyI(oqp)) {
 8002652:	68a2      	ldr	r2, [r4, #8]
 8002654:	4593      	cmp	fp, r2
  s1 = (size_t)(oqp->q_top - oqp->q_wrptr);
 8002656:	e9d4 2004 	ldrd	r2, r0, [r4, #16]
    n = oqGetEmptyI(oqp);
 800265a:	bf8c      	ite	hi
 800265c:	68a5      	ldrhi	r5, [r4, #8]
  if (n > oqGetEmptyI(oqp)) {
 800265e:	465d      	movls	r5, fp
  s1 = (size_t)(oqp->q_top - oqp->q_wrptr);
 8002660:	eba2 0800 	sub.w	r8, r2, r0
  if (n < s1) {
 8002664:	45a8      	cmp	r8, r5
 8002666:	d844      	bhi.n	80026f2 <oqWriteTimeout+0xc2>
  else if (n > s1) {
 8002668:	d229      	bcs.n	80026be <oqWriteTimeout+0x8e>
    s2 = n - s1;
 800266a:	eba5 0308 	sub.w	r3, r5, r8
    memcpy((void *)oqp->q_wrptr, (const void *)bp, s1);
 800266e:	4642      	mov	r2, r8
 8002670:	4631      	mov	r1, r6
    s2 = n - s1;
 8002672:	9301      	str	r3, [sp, #4]
    memcpy((void *)oqp->q_wrptr, (const void *)bp, s1);
 8002674:	f7fd fe3a 	bl	80002ec <memcpy>
    memcpy((void *)oqp->q_buffer, (const void *)bp, s2);
 8002678:	eb06 0108 	add.w	r1, r6, r8
 800267c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8002680:	68e0      	ldr	r0, [r4, #12]
 8002682:	4642      	mov	r2, r8
 8002684:	f7fd fe32 	bl	80002ec <memcpy>
  oqp->q_counter -= n;
 8002688:	68a2      	ldr	r2, [r4, #8]
    oqp->q_wrptr = oqp->q_buffer + s2;
 800268a:	68e1      	ldr	r1, [r4, #12]
 800268c:	4643      	mov	r3, r8
 800268e:	18cb      	adds	r3, r1, r3
  oqp->q_counter -= n;
 8002690:	1b52      	subs	r2, r2, r5
    oqp->q_wrptr = oqp->q_buffer + s2;
 8002692:	6163      	str	r3, [r4, #20]
  oqp->q_counter -= n;
 8002694:	60a2      	str	r2, [r4, #8]
      }
    }
    else {
      /* Inform the low side that the queue has at least one character
         available.*/
      if (nfy != NULL) {
 8002696:	b10f      	cbz	r7, 800269c <oqWriteTimeout+0x6c>
        nfy(oqp);
 8002698:	4620      	mov	r0, r4
 800269a:	47b8      	blx	r7
 800269c:	f38a 8811 	msr	BASEPRI, sl
      }

      /* Giving a preemption chance in a controlled point.*/
      osalSysUnlock();

      n  -= done;
 80026a0:	ebab 0b05 	sub.w	fp, fp, r5
      bp += done;
 80026a4:	442e      	add	r6, r5
 80026a6:	f389 8811 	msr	BASEPRI, r9
  while (n > 0U) {
 80026aa:	f1bb 0f00 	cmp.w	fp, #0
 80026ae:	d1d0      	bne.n	8002652 <oqWriteTimeout+0x22>
  if (n > oqGetEmptyI(oqp)) {
 80026b0:	9803      	ldr	r0, [sp, #12]
 80026b2:	2300      	movs	r3, #0
 80026b4:	f383 8811 	msr	BASEPRI, r3
    }
  }

  osalSysUnlock();
  return max - n;
}
 80026b8:	b005      	add	sp, #20
 80026ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    memcpy((void *)oqp->q_wrptr, (const void *)bp, n);
 80026be:	462a      	mov	r2, r5
 80026c0:	4631      	mov	r1, r6
 80026c2:	f7fd fe13 	bl	80002ec <memcpy>
    oqp->q_wrptr = oqp->q_buffer;
 80026c6:	68e2      	ldr	r2, [r4, #12]
 80026c8:	6162      	str	r2, [r4, #20]
  oqp->q_counter -= n;
 80026ca:	68a2      	ldr	r2, [r4, #8]
 80026cc:	1b52      	subs	r2, r2, r5
 80026ce:	60a2      	str	r2, [r4, #8]
    if (done == (size_t)0) {
 80026d0:	2d00      	cmp	r5, #0
 80026d2:	d1e0      	bne.n	8002696 <oqWriteTimeout+0x66>
 * @sclass
 */
static inline msg_t osalThreadEnqueueTimeoutS(threads_queue_t *tqp,
                                              sysinterval_t timeout) {

  return chThdEnqueueTimeoutS(tqp, timeout);
 80026d4:	9902      	ldr	r1, [sp, #8]
 80026d6:	4620      	mov	r0, r4
 80026d8:	f7ff ff92 	bl	8002600 <chThdEnqueueTimeoutS>
      if (msg != MSG_OK) {
 80026dc:	2800      	cmp	r0, #0
 80026de:	d0b8      	beq.n	8002652 <oqWriteTimeout+0x22>
 80026e0:	9b03      	ldr	r3, [sp, #12]
 80026e2:	eba3 000b 	sub.w	r0, r3, fp
 80026e6:	2300      	movs	r3, #0
 80026e8:	f383 8811 	msr	BASEPRI, r3
}
 80026ec:	b005      	add	sp, #20
 80026ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    memcpy((void *)oqp->q_wrptr, (const void *)bp, n);
 80026f2:	462a      	mov	r2, r5
 80026f4:	4631      	mov	r1, r6
 80026f6:	f7fd fdf9 	bl	80002ec <memcpy>
    oqp->q_wrptr += n;
 80026fa:	6962      	ldr	r2, [r4, #20]
 80026fc:	442a      	add	r2, r5
 80026fe:	6162      	str	r2, [r4, #20]
 8002700:	e7e3      	b.n	80026ca <oqWriteTimeout+0x9a>
 8002702:	bf00      	nop
	...

08002710 <_writet>:
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp, n, timeout);
 8002710:	3030      	adds	r0, #48	; 0x30
 8002712:	f7ff bf8d 	b.w	8002630 <oqWriteTimeout>
 8002716:	bf00      	nop
	...

08002720 <_write>:
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp,
 8002720:	3030      	adds	r0, #48	; 0x30
 8002722:	f04f 33ff 	mov.w	r3, #4294967295
 8002726:	f7ff bf83 	b.w	8002630 <oqWriteTimeout>
 800272a:	bf00      	nop
 800272c:	0000      	movs	r0, r0
	...

08002730 <oqPutTimeout>:
msg_t oqPutTimeout(output_queue_t *oqp, uint8_t b, sysinterval_t timeout) {
 8002730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002732:	4604      	mov	r4, r0
 8002734:	460f      	mov	r7, r1
 8002736:	4616      	mov	r6, r2
 8002738:	2320      	movs	r3, #32
 800273a:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chSysLock(void) {

  port_lock();
  _stats_start_measure_crit_thd();
  _dbg_check_lock();
 800273e:	e003      	b.n	8002748 <oqPutTimeout+0x18>
 8002740:	f7ff ff5e 	bl	8002600 <chThdEnqueueTimeoutS>
    if (msg < MSG_OK) {
 8002744:	2800      	cmp	r0, #0
 8002746:	db18      	blt.n	800277a <oqPutTimeout+0x4a>
  while (oqIsFullI(oqp)) {
 8002748:	68a5      	ldr	r5, [r4, #8]
 800274a:	4631      	mov	r1, r6
 800274c:	4620      	mov	r0, r4
 800274e:	2d00      	cmp	r5, #0
 8002750:	d0f6      	beq.n	8002740 <oqPutTimeout+0x10>
  *oqp->q_wrptr++ = b;
 8002752:	6962      	ldr	r2, [r4, #20]
  oqp->q_counter--;
 8002754:	68a3      	ldr	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
 8002756:	1c51      	adds	r1, r2, #1
  oqp->q_counter--;
 8002758:	3b01      	subs	r3, #1
  *oqp->q_wrptr++ = b;
 800275a:	6161      	str	r1, [r4, #20]
  oqp->q_counter--;
 800275c:	60a3      	str	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
 800275e:	7017      	strb	r7, [r2, #0]
  if (oqp->q_wrptr >= oqp->q_top) {
 8002760:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 8002764:	429a      	cmp	r2, r3
    oqp->q_wrptr = oqp->q_buffer;
 8002766:	bf24      	itt	cs
 8002768:	68e3      	ldrcs	r3, [r4, #12]
 800276a:	6163      	strcs	r3, [r4, #20]
  if (oqp->q_notify != NULL) {
 800276c:	69e3      	ldr	r3, [r4, #28]
 800276e:	b103      	cbz	r3, 8002772 <oqPutTimeout+0x42>
    oqp->q_notify(oqp);
 8002770:	4798      	blx	r3
 8002772:	2000      	movs	r0, #0
 8002774:	f380 8811 	msr	BASEPRI, r0
}
 8002778:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800277a:	f385 8811 	msr	BASEPRI, r5
 800277e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002780 <_putt>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, timeout);
 8002780:	3030      	adds	r0, #48	; 0x30
 8002782:	f7ff bfd5 	b.w	8002730 <oqPutTimeout>
 8002786:	bf00      	nop
	...

08002790 <_put>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, TIME_INFINITE);
 8002790:	3030      	adds	r0, #48	; 0x30
 8002792:	f04f 32ff 	mov.w	r2, #4294967295
 8002796:	f7ff bfcb 	b.w	8002730 <oqPutTimeout>
 800279a:	bf00      	nop
 800279c:	0000      	movs	r0, r0
	...

080027a0 <iqReadTimeout>:
                     size_t n, sysinterval_t timeout) {
 80027a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80027a4:	b085      	sub	sp, #20
 80027a6:	e9cd 3202 	strd	r3, r2, [sp, #8]
  qnotify_t nfy = iqp->q_notify;
 80027aa:	69c7      	ldr	r7, [r0, #28]
 80027ac:	f04f 0920 	mov.w	r9, #32
 80027b0:	f389 8811 	msr	BASEPRI, r9
  while (n > 0U) {
 80027b4:	2a00      	cmp	r2, #0
 80027b6:	d034      	beq.n	8002822 <iqReadTimeout+0x82>
 80027b8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80027bc:	4604      	mov	r4, r0
 80027be:	460e      	mov	r6, r1
 80027c0:	f04f 0a00 	mov.w	sl, #0
  if (n > iqGetFullI(iqp)) {
 80027c4:	68a2      	ldr	r2, [r4, #8]
  s1 = (size_t)(iqp->q_top - iqp->q_rdptr);
 80027c6:	69a1      	ldr	r1, [r4, #24]
  if (n > iqGetFullI(iqp)) {
 80027c8:	4593      	cmp	fp, r2
  s1 = (size_t)(iqp->q_top - iqp->q_rdptr);
 80027ca:	6922      	ldr	r2, [r4, #16]
    n = iqGetFullI(iqp);
 80027cc:	bf8c      	ite	hi
 80027ce:	68a5      	ldrhi	r5, [r4, #8]
  if (n > iqGetFullI(iqp)) {
 80027d0:	465d      	movls	r5, fp
  s1 = (size_t)(iqp->q_top - iqp->q_rdptr);
 80027d2:	eba2 0801 	sub.w	r8, r2, r1
  if (n < s1) {
 80027d6:	45a8      	cmp	r8, r5
 80027d8:	d844      	bhi.n	8002864 <iqReadTimeout+0xc4>
  else if (n > s1) {
 80027da:	d229      	bcs.n	8002830 <iqReadTimeout+0x90>
    s2 = n - s1;
 80027dc:	eba5 0308 	sub.w	r3, r5, r8
    memcpy((void *)bp, (void *)iqp->q_rdptr, s1);
 80027e0:	4642      	mov	r2, r8
 80027e2:	4630      	mov	r0, r6
    s2 = n - s1;
 80027e4:	9301      	str	r3, [sp, #4]
    memcpy((void *)bp, (void *)iqp->q_rdptr, s1);
 80027e6:	f7fd fd81 	bl	80002ec <memcpy>
    memcpy((void *)bp, (void *)iqp->q_buffer, s2);
 80027ea:	eb06 0008 	add.w	r0, r6, r8
 80027ee:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80027f2:	68e1      	ldr	r1, [r4, #12]
 80027f4:	4642      	mov	r2, r8
 80027f6:	f7fd fd79 	bl	80002ec <memcpy>
  iqp->q_counter -= n;
 80027fa:	68a2      	ldr	r2, [r4, #8]
    iqp->q_rdptr = iqp->q_buffer + s2;
 80027fc:	68e1      	ldr	r1, [r4, #12]
 80027fe:	4643      	mov	r3, r8
 8002800:	18cb      	adds	r3, r1, r3
  iqp->q_counter -= n;
 8002802:	1b52      	subs	r2, r2, r5
    iqp->q_rdptr = iqp->q_buffer + s2;
 8002804:	61a3      	str	r3, [r4, #24]
  iqp->q_counter -= n;
 8002806:	60a2      	str	r2, [r4, #8]
      if (nfy != NULL) {
 8002808:	b10f      	cbz	r7, 800280e <iqReadTimeout+0x6e>
        nfy(iqp);
 800280a:	4620      	mov	r0, r4
 800280c:	47b8      	blx	r7
 800280e:	f38a 8811 	msr	BASEPRI, sl
      n  -= done;
 8002812:	ebab 0b05 	sub.w	fp, fp, r5
      bp += done;
 8002816:	442e      	add	r6, r5
 8002818:	f389 8811 	msr	BASEPRI, r9
  while (n > 0U) {
 800281c:	f1bb 0f00 	cmp.w	fp, #0
 8002820:	d1d0      	bne.n	80027c4 <iqReadTimeout+0x24>
  if (n > iqGetFullI(iqp)) {
 8002822:	9803      	ldr	r0, [sp, #12]
 8002824:	2300      	movs	r3, #0
 8002826:	f383 8811 	msr	BASEPRI, r3
}
 800282a:	b005      	add	sp, #20
 800282c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    memcpy((void *)bp, (void *)iqp->q_rdptr, n);
 8002830:	462a      	mov	r2, r5
 8002832:	4630      	mov	r0, r6
 8002834:	f7fd fd5a 	bl	80002ec <memcpy>
    iqp->q_rdptr = iqp->q_buffer;
 8002838:	68e2      	ldr	r2, [r4, #12]
 800283a:	61a2      	str	r2, [r4, #24]
  iqp->q_counter -= n;
 800283c:	68a2      	ldr	r2, [r4, #8]
 800283e:	1b52      	subs	r2, r2, r5
 8002840:	60a2      	str	r2, [r4, #8]
    if (done == (size_t)0) {
 8002842:	2d00      	cmp	r5, #0
 8002844:	d1e0      	bne.n	8002808 <iqReadTimeout+0x68>
 8002846:	9902      	ldr	r1, [sp, #8]
 8002848:	4620      	mov	r0, r4
 800284a:	f7ff fed9 	bl	8002600 <chThdEnqueueTimeoutS>
      if (msg != MSG_OK) {
 800284e:	2800      	cmp	r0, #0
 8002850:	d0b8      	beq.n	80027c4 <iqReadTimeout+0x24>
 8002852:	9b03      	ldr	r3, [sp, #12]
 8002854:	eba3 000b 	sub.w	r0, r3, fp
 8002858:	2300      	movs	r3, #0
 800285a:	f383 8811 	msr	BASEPRI, r3
}
 800285e:	b005      	add	sp, #20
 8002860:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    memcpy((void *)bp, (void *)iqp->q_rdptr, n);
 8002864:	462a      	mov	r2, r5
 8002866:	4630      	mov	r0, r6
 8002868:	f7fd fd40 	bl	80002ec <memcpy>
    iqp->q_rdptr += n;
 800286c:	69a2      	ldr	r2, [r4, #24]
 800286e:	442a      	add	r2, r5
 8002870:	61a2      	str	r2, [r4, #24]
 8002872:	e7e3      	b.n	800283c <iqReadTimeout+0x9c>
	...

08002880 <_readt>:
  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp, n, timeout);
 8002880:	300c      	adds	r0, #12
 8002882:	f7ff bf8d 	b.w	80027a0 <iqReadTimeout>
 8002886:	bf00      	nop
	...

08002890 <_read>:
  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp,
 8002890:	300c      	adds	r0, #12
 8002892:	f04f 33ff 	mov.w	r3, #4294967295
 8002896:	f7ff bf83 	b.w	80027a0 <iqReadTimeout>
 800289a:	bf00      	nop
 800289c:	0000      	movs	r0, r0
	...

080028a0 <iqGetTimeout>:
msg_t iqGetTimeout(input_queue_t *iqp, sysinterval_t timeout) {
 80028a0:	b570      	push	{r4, r5, r6, lr}
 80028a2:	2320      	movs	r3, #32
 80028a4:	4605      	mov	r5, r0
 80028a6:	460e      	mov	r6, r1
 80028a8:	f383 8811 	msr	BASEPRI, r3
 80028ac:	e003      	b.n	80028b6 <iqGetTimeout+0x16>
 80028ae:	f7ff fea7 	bl	8002600 <chThdEnqueueTimeoutS>
    if (msg < MSG_OK) {
 80028b2:	2800      	cmp	r0, #0
 80028b4:	db1a      	blt.n	80028ec <iqGetTimeout+0x4c>
  while (iqIsEmptyI(iqp)) {
 80028b6:	68ac      	ldr	r4, [r5, #8]
 80028b8:	4631      	mov	r1, r6
 80028ba:	4628      	mov	r0, r5
 80028bc:	2c00      	cmp	r4, #0
 80028be:	d0f6      	beq.n	80028ae <iqGetTimeout+0xe>
  b = *iqp->q_rdptr++;
 80028c0:	69a9      	ldr	r1, [r5, #24]
  iqp->q_counter--;
 80028c2:	68ab      	ldr	r3, [r5, #8]
  if (iqp->q_rdptr >= iqp->q_top) {
 80028c4:	6928      	ldr	r0, [r5, #16]
  b = *iqp->q_rdptr++;
 80028c6:	1c4a      	adds	r2, r1, #1
  iqp->q_counter--;
 80028c8:	3b01      	subs	r3, #1
  if (iqp->q_rdptr >= iqp->q_top) {
 80028ca:	4282      	cmp	r2, r0
  iqp->q_counter--;
 80028cc:	60ab      	str	r3, [r5, #8]
  b = *iqp->q_rdptr++;
 80028ce:	61aa      	str	r2, [r5, #24]
    iqp->q_rdptr = iqp->q_buffer;
 80028d0:	bf28      	it	cs
 80028d2:	68eb      	ldrcs	r3, [r5, #12]
  b = *iqp->q_rdptr++;
 80028d4:	780c      	ldrb	r4, [r1, #0]
    iqp->q_rdptr = iqp->q_buffer;
 80028d6:	bf28      	it	cs
 80028d8:	61ab      	strcs	r3, [r5, #24]
  if (iqp->q_notify != NULL) {
 80028da:	69eb      	ldr	r3, [r5, #28]
 80028dc:	b10b      	cbz	r3, 80028e2 <iqGetTimeout+0x42>
    iqp->q_notify(iqp);
 80028de:	4628      	mov	r0, r5
 80028e0:	4798      	blx	r3
 80028e2:	2300      	movs	r3, #0
 80028e4:	f383 8811 	msr	BASEPRI, r3
  return (msg_t)b;
 80028e8:	4620      	mov	r0, r4
}
 80028ea:	bd70      	pop	{r4, r5, r6, pc}
 80028ec:	f384 8811 	msr	BASEPRI, r4
 80028f0:	bd70      	pop	{r4, r5, r6, pc}
 80028f2:	bf00      	nop
	...

08002900 <_gett>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, timeout);
 8002900:	300c      	adds	r0, #12
 8002902:	f7ff bfcd 	b.w	80028a0 <iqGetTimeout>
 8002906:	bf00      	nop
	...

08002910 <_get>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, TIME_INFINITE);
 8002910:	300c      	adds	r0, #12
 8002912:	f04f 31ff 	mov.w	r1, #4294967295
 8002916:	f7ff bfc3 	b.w	80028a0 <iqGetTimeout>
 800291a:	bf00      	nop
 800291c:	0000      	movs	r0, r0
	...

08002920 <chThdSleep>:
void chThdSleep(sysinterval_t time) {
 8002920:	b508      	push	{r3, lr}
 8002922:	4601      	mov	r1, r0
 8002924:	2320      	movs	r3, #32
 8002926:	f383 8811 	msr	BASEPRI, r3
  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, ticks);
 800292a:	2008      	movs	r0, #8
 800292c:	f7ff fd10 	bl	8002350 <chSchGoSleepTimeoutS>
 8002930:	2300      	movs	r3, #0
 8002932:	f383 8811 	msr	BASEPRI, r3
}
 8002936:	bd08      	pop	{r3, pc}
	...

08002940 <test_execute.constprop.0>:
 * @retval false        if no errors occurred.
 * @retval true         if one or more tests failed.
 *
 * @api
 */
msg_t test_execute(BaseSequentialStream *stream, const testsuite_t *tsp) {
 8002940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002944:	4680      	mov	r8, r0
  int tseq, tcase;

  test_chp = stream;
 8002946:	f8df b32c 	ldr.w	fp, [pc, #812]	; 8002c74 <test_execute.constprop.0+0x334>
 800294a:	4ba9      	ldr	r3, [pc, #676]	; (8002bf0 <test_execute.constprop.0+0x2b0>)
  test_println("");
 800294c:	48a9      	ldr	r0, [pc, #676]	; (8002bf4 <test_execute.constprop.0+0x2b4>)
  test_chp = stream;
 800294e:	f8cb 3000 	str.w	r3, [fp]
msg_t test_execute(BaseSequentialStream *stream, const testsuite_t *tsp) {
 8002952:	b083      	sub	sp, #12
  test_println("");
 8002954:	f7fe f98c 	bl	8000c70 <test_println>
  if (tsp->name != NULL) {
 8002958:	f8d8 3000 	ldr.w	r3, [r8]
 800295c:	2b00      	cmp	r3, #0
 800295e:	f000 81fb 	beq.w	8002d58 <test_execute.constprop.0+0x418>
 8002962:	4ca5      	ldr	r4, [pc, #660]	; (8002bf8 <test_execute.constprop.0+0x2b8>)
  while (*msgp)
 8002964:	212a      	movs	r1, #42	; 0x2a
    streamPut(test_chp, *msgp++);
 8002966:	f8db 0000 	ldr.w	r0, [fp]
 800296a:	6803      	ldr	r3, [r0, #0]
 800296c:	68db      	ldr	r3, [r3, #12]
 800296e:	4798      	blx	r3
  while (*msgp)
 8002970:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8002974:	2900      	cmp	r1, #0
 8002976:	d1f6      	bne.n	8002966 <test_execute.constprop.0+0x26>
    test_print("*** ");
    test_println(tsp->name);
 8002978:	f8d8 0000 	ldr.w	r0, [r8]
 800297c:	f7fe f978 	bl	8000c70 <test_println>
  }
  else {
    test_println("*** Test Suite");
  }
  test_println("***");
 8002980:	489e      	ldr	r0, [pc, #632]	; (8002bfc <test_execute.constprop.0+0x2bc>)
 8002982:	4c9f      	ldr	r4, [pc, #636]	; (8002c00 <test_execute.constprop.0+0x2c0>)
 8002984:	f7fe f974 	bl	8000c70 <test_println>
  while (*msgp)
 8002988:	212a      	movs	r1, #42	; 0x2a
    streamPut(test_chp, *msgp++);
 800298a:	f8db 0000 	ldr.w	r0, [fp]
 800298e:	6803      	ldr	r3, [r0, #0]
 8002990:	68db      	ldr	r3, [r3, #12]
 8002992:	4798      	blx	r3
  while (*msgp)
 8002994:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8002998:	2900      	cmp	r1, #0
 800299a:	d1f6      	bne.n	800298a <test_execute.constprop.0+0x4a>
  test_print("*** Compiled:     ");
  test_println(__DATE__ " - " __TIME__);
 800299c:	4899      	ldr	r0, [pc, #612]	; (8002c04 <test_execute.constprop.0+0x2c4>)
 800299e:	4c9a      	ldr	r4, [pc, #616]	; (8002c08 <test_execute.constprop.0+0x2c8>)
 80029a0:	f7fe f966 	bl	8000c70 <test_println>
  while (*msgp)
 80029a4:	212a      	movs	r1, #42	; 0x2a
    streamPut(test_chp, *msgp++);
 80029a6:	f8db 0000 	ldr.w	r0, [fp]
 80029aa:	6803      	ldr	r3, [r0, #0]
 80029ac:	68db      	ldr	r3, [r3, #12]
 80029ae:	4798      	blx	r3
  while (*msgp)
 80029b0:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 80029b4:	2900      	cmp	r1, #0
 80029b6:	d1f6      	bne.n	80029a6 <test_execute.constprop.0+0x66>
#if defined(PLATFORM_NAME)
  test_print("*** Platform:     ");
  test_println(PLATFORM_NAME);
 80029b8:	4894      	ldr	r0, [pc, #592]	; (8002c0c <test_execute.constprop.0+0x2cc>)
 80029ba:	4c95      	ldr	r4, [pc, #596]	; (8002c10 <test_execute.constprop.0+0x2d0>)
 80029bc:	f7fe f958 	bl	8000c70 <test_println>
  while (*msgp)
 80029c0:	212a      	movs	r1, #42	; 0x2a
    streamPut(test_chp, *msgp++);
 80029c2:	f8db 0000 	ldr.w	r0, [fp]
 80029c6:	6803      	ldr	r3, [r0, #0]
 80029c8:	68db      	ldr	r3, [r3, #12]
 80029ca:	4798      	blx	r3
  while (*msgp)
 80029cc:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 80029d0:	2900      	cmp	r1, #0
 80029d2:	d1f6      	bne.n	80029c2 <test_execute.constprop.0+0x82>
#endif
#if defined(BOARD_NAME)
  test_print("*** Test Board:   ");
  test_println(BOARD_NAME);
 80029d4:	488f      	ldr	r0, [pc, #572]	; (8002c14 <test_execute.constprop.0+0x2d4>)
  {
    extern uint8_t __text_base__,   __text_end__,
                   __rodata_base__, __rodata_end__,
                   __data_base__,   __data_end__,
                   __bss_base__,    __bss_end__;
    test_println("***");
 80029d6:	4c90      	ldr	r4, [pc, #576]	; (8002c18 <test_execute.constprop.0+0x2d8>)
  test_println(BOARD_NAME);
 80029d8:	f7fe f94a 	bl	8000c70 <test_println>
    test_println("***");
 80029dc:	4887      	ldr	r0, [pc, #540]	; (8002bfc <test_execute.constprop.0+0x2bc>)
 80029de:	f7fe f947 	bl	8000c70 <test_println>
  while (*msgp)
 80029e2:	212a      	movs	r1, #42	; 0x2a
    streamPut(test_chp, *msgp++);
 80029e4:	f8db 0000 	ldr.w	r0, [fp]
 80029e8:	6803      	ldr	r3, [r0, #0]
 80029ea:	68db      	ldr	r3, [r3, #12]
 80029ec:	4798      	blx	r3
  while (*msgp)
 80029ee:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 80029f2:	2900      	cmp	r1, #0
 80029f4:	d1f6      	bne.n	80029e4 <test_execute.constprop.0+0xa4>
    test_print("*** Text size:    ");
    test_printn((uint32_t)(&__text_end__ - &__text_base__));
 80029f6:	4b89      	ldr	r3, [pc, #548]	; (8002c1c <test_execute.constprop.0+0x2dc>)
 80029f8:	4889      	ldr	r0, [pc, #548]	; (8002c20 <test_execute.constprop.0+0x2e0>)
    test_println(" bytes");
 80029fa:	4c8a      	ldr	r4, [pc, #552]	; (8002c24 <test_execute.constprop.0+0x2e4>)
    test_printn((uint32_t)(&__text_end__ - &__text_base__));
 80029fc:	1ac0      	subs	r0, r0, r3
 80029fe:	f7fe f887 	bl	8000b10 <test_printn>
    test_println(" bytes");
 8002a02:	4889      	ldr	r0, [pc, #548]	; (8002c28 <test_execute.constprop.0+0x2e8>)
 8002a04:	f7fe f934 	bl	8000c70 <test_println>
  while (*msgp)
 8002a08:	212a      	movs	r1, #42	; 0x2a
    streamPut(test_chp, *msgp++);
 8002a0a:	f8db 0000 	ldr.w	r0, [fp]
 8002a0e:	6803      	ldr	r3, [r0, #0]
 8002a10:	68db      	ldr	r3, [r3, #12]
 8002a12:	4798      	blx	r3
  while (*msgp)
 8002a14:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8002a18:	2900      	cmp	r1, #0
 8002a1a:	d1f6      	bne.n	8002a0a <test_execute.constprop.0+0xca>
    test_print("*** RO data size: ");
    test_printn((uint32_t)(&__rodata_end__ - &__rodata_base__));
 8002a1c:	4b83      	ldr	r3, [pc, #524]	; (8002c2c <test_execute.constprop.0+0x2ec>)
 8002a1e:	4884      	ldr	r0, [pc, #528]	; (8002c30 <test_execute.constprop.0+0x2f0>)
    test_println(" bytes");
 8002a20:	4c84      	ldr	r4, [pc, #528]	; (8002c34 <test_execute.constprop.0+0x2f4>)
    test_printn((uint32_t)(&__rodata_end__ - &__rodata_base__));
 8002a22:	1ac0      	subs	r0, r0, r3
 8002a24:	f7fe f874 	bl	8000b10 <test_printn>
    test_println(" bytes");
 8002a28:	487f      	ldr	r0, [pc, #508]	; (8002c28 <test_execute.constprop.0+0x2e8>)
 8002a2a:	f7fe f921 	bl	8000c70 <test_println>
  while (*msgp)
 8002a2e:	212a      	movs	r1, #42	; 0x2a
    streamPut(test_chp, *msgp++);
 8002a30:	f8db 0000 	ldr.w	r0, [fp]
 8002a34:	6803      	ldr	r3, [r0, #0]
 8002a36:	68db      	ldr	r3, [r3, #12]
 8002a38:	4798      	blx	r3
  while (*msgp)
 8002a3a:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8002a3e:	2900      	cmp	r1, #0
 8002a40:	d1f6      	bne.n	8002a30 <test_execute.constprop.0+0xf0>
    test_print("*** Data size:    ");
    test_printn((uint32_t)(&__data_end__ - &__data_base__));
 8002a42:	4b7d      	ldr	r3, [pc, #500]	; (8002c38 <test_execute.constprop.0+0x2f8>)
 8002a44:	487d      	ldr	r0, [pc, #500]	; (8002c3c <test_execute.constprop.0+0x2fc>)
    test_println(" bytes");
 8002a46:	4c7e      	ldr	r4, [pc, #504]	; (8002c40 <test_execute.constprop.0+0x300>)
    test_printn((uint32_t)(&__data_end__ - &__data_base__));
 8002a48:	1ac0      	subs	r0, r0, r3
 8002a4a:	f7fe f861 	bl	8000b10 <test_printn>
    test_println(" bytes");
 8002a4e:	4876      	ldr	r0, [pc, #472]	; (8002c28 <test_execute.constprop.0+0x2e8>)
 8002a50:	f7fe f90e 	bl	8000c70 <test_println>
  while (*msgp)
 8002a54:	212a      	movs	r1, #42	; 0x2a
    streamPut(test_chp, *msgp++);
 8002a56:	f8db 0000 	ldr.w	r0, [fp]
 8002a5a:	6803      	ldr	r3, [r0, #0]
 8002a5c:	68db      	ldr	r3, [r3, #12]
 8002a5e:	4798      	blx	r3
  while (*msgp)
 8002a60:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8002a64:	2900      	cmp	r1, #0
 8002a66:	d1f6      	bne.n	8002a56 <test_execute.constprop.0+0x116>
    test_print("*** BSS size:     ");
    test_printn((uint32_t)(&__bss_end__ - &__bss_base__));
 8002a68:	4b76      	ldr	r3, [pc, #472]	; (8002c44 <test_execute.constprop.0+0x304>)
 8002a6a:	4877      	ldr	r0, [pc, #476]	; (8002c48 <test_execute.constprop.0+0x308>)
 8002a6c:	9101      	str	r1, [sp, #4]
 8002a6e:	1ac0      	subs	r0, r0, r3
 8002a70:	f7fe f84e 	bl	8000b10 <test_printn>
    test_println(" bytes");
 8002a74:	486c      	ldr	r0, [pc, #432]	; (8002c28 <test_execute.constprop.0+0x2e8>)
 8002a76:	f7fe f8fb 	bl	8000c70 <test_println>
  }
#endif
#if defined(TEST_REPORT_HOOK_HEADER)
  TEST_REPORT_HOOK_HEADER
#endif
  test_println("");
 8002a7a:	485e      	ldr	r0, [pc, #376]	; (8002bf4 <test_execute.constprop.0+0x2b4>)
 8002a7c:	f7fe f8f8 	bl	8000c70 <test_println>

  test_global_fail = false;
  tseq = 0;
  while (tsp->sequences[tseq] != NULL) {
 8002a80:	f8d8 3004 	ldr.w	r3, [r8, #4]
  test_global_fail = false;
 8002a84:	4a71      	ldr	r2, [pc, #452]	; (8002c4c <test_execute.constprop.0+0x30c>)
  while (tsp->sequences[tseq] != NULL) {
 8002a86:	681b      	ldr	r3, [r3, #0]
  test_global_fail = false;
 8002a88:	9901      	ldr	r1, [sp, #4]
 8002a8a:	7011      	strb	r1, [r2, #0]
  while (tsp->sequences[tseq] != NULL) {
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	f000 80fa 	beq.w	8002c86 <test_execute.constprop.0+0x346>
 8002a92:	468a      	mov	sl, r1
  tseq = 0;
 8002a94:	4689      	mov	r9, r1
 8002a96:	244c      	movs	r4, #76	; 0x4c
    streamPut(test_chp, '=');
 8002a98:	f8db 0000 	ldr.w	r0, [fp]
 8002a9c:	6803      	ldr	r3, [r0, #0]
 8002a9e:	213d      	movs	r1, #61	; 0x3d
 8002aa0:	68db      	ldr	r3, [r3, #12]
 8002aa2:	4798      	blx	r3
  for (i = 0; i < 76; i++)
 8002aa4:	3c01      	subs	r4, #1
 8002aa6:	d1f7      	bne.n	8002a98 <test_execute.constprop.0+0x158>
  streamWrite(test_chp, (const uint8_t *)"\r\n", 2);
 8002aa8:	f8db 0000 	ldr.w	r0, [fp]
 8002aac:	4968      	ldr	r1, [pc, #416]	; (8002c50 <test_execute.constprop.0+0x310>)
 8002aae:	6803      	ldr	r3, [r0, #0]
 8002ab0:	4c68      	ldr	r4, [pc, #416]	; (8002c54 <test_execute.constprop.0+0x314>)
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	2202      	movs	r2, #2
 8002ab6:	4798      	blx	r3
  while (*msgp)
 8002ab8:	213d      	movs	r1, #61	; 0x3d
    streamPut(test_chp, *msgp++);
 8002aba:	f8db 0000 	ldr.w	r0, [fp]
 8002abe:	6803      	ldr	r3, [r0, #0]
 8002ac0:	68db      	ldr	r3, [r3, #12]
 8002ac2:	4798      	blx	r3
  while (*msgp)
 8002ac4:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8002ac8:	2900      	cmp	r1, #0
 8002aca:	d1f6      	bne.n	8002aba <test_execute.constprop.0+0x17a>
#if TEST_CFG_SHOW_SEQUENCES == TRUE
    print_fat_line();
    test_print("=== Test Sequence ");
    test_printn(tseq + 1);
 8002acc:	f109 0901 	add.w	r9, r9, #1
 8002ad0:	4648      	mov	r0, r9
 8002ad2:	4c61      	ldr	r4, [pc, #388]	; (8002c58 <test_execute.constprop.0+0x318>)
 8002ad4:	f7fe f81c 	bl	8000b10 <test_printn>
  while (*msgp)
 8002ad8:	2120      	movs	r1, #32
    streamPut(test_chp, *msgp++);
 8002ada:	f8db 0000 	ldr.w	r0, [fp]
 8002ade:	6803      	ldr	r3, [r0, #0]
 8002ae0:	68db      	ldr	r3, [r3, #12]
 8002ae2:	4798      	blx	r3
  while (*msgp)
 8002ae4:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8002ae8:	2900      	cmp	r1, #0
 8002aea:	d1f6      	bne.n	8002ada <test_execute.constprop.0+0x19a>
    test_print(" (");
    test_print(tsp->sequences[tseq]->name);
 8002aec:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8002af0:	f853 300a 	ldr.w	r3, [r3, sl]
 8002af4:	681c      	ldr	r4, [r3, #0]
  while (*msgp)
 8002af6:	7821      	ldrb	r1, [r4, #0]
 8002af8:	b141      	cbz	r1, 8002b0c <test_execute.constprop.0+0x1cc>
    streamPut(test_chp, *msgp++);
 8002afa:	f8db 0000 	ldr.w	r0, [fp]
 8002afe:	6803      	ldr	r3, [r0, #0]
 8002b00:	68db      	ldr	r3, [r3, #12]
 8002b02:	4798      	blx	r3
  while (*msgp)
 8002b04:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8002b08:	2900      	cmp	r1, #0
 8002b0a:	d1f6      	bne.n	8002afa <test_execute.constprop.0+0x1ba>
    test_println(")");
 8002b0c:	4853      	ldr	r0, [pc, #332]	; (8002c5c <test_execute.constprop.0+0x31c>)
 8002b0e:	f7fe f8af 	bl	8000c70 <test_println>
#endif
    tcase = 0;
    while (tsp->sequences[tseq]->cases[tcase] != NULL) {
 8002b12:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8002b16:	f852 300a 	ldr.w	r3, [r2, sl]
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	f000 80aa 	beq.w	8002c78 <test_execute.constprop.0+0x338>
 8002b24:	4d4e      	ldr	r5, [pc, #312]	; (8002c60 <test_execute.constprop.0+0x320>)
    tcase = 0;
 8002b26:	2600      	movs	r6, #0
      print_line();
 8002b28:	4f4e      	ldr	r7, [pc, #312]	; (8002c64 <test_execute.constprop.0+0x324>)
 8002b2a:	f7fe f929 	bl	8000d80 <print_line>
 8002b2e:	00b4      	lsls	r4, r6, #2
  while (*msgp)
 8002b30:	212d      	movs	r1, #45	; 0x2d
    streamPut(test_chp, *msgp++);
 8002b32:	f8db 0000 	ldr.w	r0, [fp]
 8002b36:	6803      	ldr	r3, [r0, #0]
 8002b38:	68db      	ldr	r3, [r3, #12]
 8002b3a:	4798      	blx	r3
  while (*msgp)
 8002b3c:	f817 1f01 	ldrb.w	r1, [r7, #1]!
 8002b40:	2900      	cmp	r1, #0
 8002b42:	d1f6      	bne.n	8002b32 <test_execute.constprop.0+0x1f2>
      test_print("--- Test Case ");
      test_printn(tseq + 1);
 8002b44:	4648      	mov	r0, r9
 8002b46:	f7fd ffe3 	bl	8000b10 <test_printn>
    streamPut(test_chp, *msgp++);
 8002b4a:	f8db 0000 	ldr.w	r0, [fp]
      test_print(".");
      test_printn(tcase + 1);
 8002b4e:	4f42      	ldr	r7, [pc, #264]	; (8002c58 <test_execute.constprop.0+0x318>)
    streamPut(test_chp, *msgp++);
 8002b50:	6803      	ldr	r3, [r0, #0]
 8002b52:	212e      	movs	r1, #46	; 0x2e
 8002b54:	68db      	ldr	r3, [r3, #12]
      test_printn(tcase + 1);
 8002b56:	3601      	adds	r6, #1
    streamPut(test_chp, *msgp++);
 8002b58:	4798      	blx	r3
      test_printn(tcase + 1);
 8002b5a:	4630      	mov	r0, r6
 8002b5c:	f7fd ffd8 	bl	8000b10 <test_printn>
  while (*msgp)
 8002b60:	2120      	movs	r1, #32
    streamPut(test_chp, *msgp++);
 8002b62:	f8db 0000 	ldr.w	r0, [fp]
 8002b66:	6803      	ldr	r3, [r0, #0]
 8002b68:	68db      	ldr	r3, [r3, #12]
 8002b6a:	4798      	blx	r3
  while (*msgp)
 8002b6c:	f817 1f01 	ldrb.w	r1, [r7, #1]!
 8002b70:	2900      	cmp	r1, #0
 8002b72:	d1f6      	bne.n	8002b62 <test_execute.constprop.0+0x222>
      test_print(" (");
      test_print(tsp->sequences[tseq]->cases[tcase]->name);
 8002b74:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8002b78:	f853 300a 	ldr.w	r3, [r3, sl]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	591b      	ldr	r3, [r3, r4]
 8002b80:	681f      	ldr	r7, [r3, #0]
  while (*msgp)
 8002b82:	7839      	ldrb	r1, [r7, #0]
 8002b84:	b141      	cbz	r1, 8002b98 <test_execute.constprop.0+0x258>
    streamPut(test_chp, *msgp++);
 8002b86:	f8db 0000 	ldr.w	r0, [fp]
 8002b8a:	6803      	ldr	r3, [r0, #0]
 8002b8c:	68db      	ldr	r3, [r3, #12]
 8002b8e:	4798      	blx	r3
  while (*msgp)
 8002b90:	f817 1f01 	ldrb.w	r1, [r7, #1]!
 8002b94:	2900      	cmp	r1, #0
 8002b96:	d1f6      	bne.n	8002b86 <test_execute.constprop.0+0x246>
      test_println(")");
 8002b98:	4830      	ldr	r0, [pc, #192]	; (8002c5c <test_execute.constprop.0+0x31c>)
 8002b9a:	f7fe f869 	bl	8000c70 <test_println>
  chThdSleep(delay);
 8002b9e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002ba2:	f7ff febd 	bl	8002920 <chThdSleep>
#if TEST_CFG_DELAY_BETWEEN_TESTS > 0
      osalThreadSleepMilliseconds(TEST_CFG_DELAY_BETWEEN_TESTS);
#endif
      execute_test(tsp->sequences[tseq]->cases[tcase]);
 8002ba6:	f8d8 3004 	ldr.w	r3, [r8, #4]
  test_tokp = test_tokens_buffer;
 8002baa:	4a2f      	ldr	r2, [pc, #188]	; (8002c68 <test_execute.constprop.0+0x328>)
      execute_test(tsp->sequences[tseq]->cases[tcase]);
 8002bac:	f853 300a 	ldr.w	r3, [r3, sl]
  test_local_fail = false;
 8002bb0:	492e      	ldr	r1, [pc, #184]	; (8002c6c <test_execute.constprop.0+0x32c>)
      execute_test(tsp->sequences[tseq]->cases[tcase]);
 8002bb2:	685b      	ldr	r3, [r3, #4]
  test_tokp = test_tokens_buffer;
 8002bb4:	602a      	str	r2, [r5, #0]
      execute_test(tsp->sequences[tseq]->cases[tcase]);
 8002bb6:	591f      	ldr	r7, [r3, r4]
  if (tcp->setup != NULL)
 8002bb8:	687b      	ldr	r3, [r7, #4]
  test_local_fail = false;
 8002bba:	2200      	movs	r2, #0
 8002bbc:	700a      	strb	r2, [r1, #0]
  if (tcp->setup != NULL)
 8002bbe:	b103      	cbz	r3, 8002bc2 <test_execute.constprop.0+0x282>
    tcp->setup();
 8002bc0:	4798      	blx	r3
  tcp->execute();
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	4798      	blx	r3
  if (tcp->teardown != NULL)
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	b103      	cbz	r3, 8002bcc <test_execute.constprop.0+0x28c>
    tcp->teardown();
 8002bca:	4798      	blx	r3
      if (test_local_fail) {
 8002bcc:	4b27      	ldr	r3, [pc, #156]	; (8002c6c <test_execute.constprop.0+0x32c>)
 8002bce:	781b      	ldrb	r3, [r3, #0]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d174      	bne.n	8002cbe <test_execute.constprop.0+0x37e>
        test_print("] \"");
        test_print(test_failure_message);
        test_println("\")");
      }
      else {
        test_println("--- Result: SUCCESS");
 8002bd4:	4826      	ldr	r0, [pc, #152]	; (8002c70 <test_execute.constprop.0+0x330>)
 8002bd6:	f7fe f84b 	bl	8000c70 <test_println>
    while (tsp->sequences[tseq]->cases[tcase] != NULL) {
 8002bda:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8002bde:	f852 300a 	ldr.w	r3, [r2, sl]
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	441c      	add	r4, r3
 8002be6:	6863      	ldr	r3, [r4, #4]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d19d      	bne.n	8002b28 <test_execute.constprop.0+0x1e8>
 8002bec:	e044      	b.n	8002c78 <test_execute.constprop.0+0x338>
 8002bee:	bf00      	nop
 8002bf0:	200008e0 	.word	0x200008e0
 8002bf4:	08009bc0 	.word	0x08009bc0
 8002bf8:	08009cec 	.word	0x08009cec
 8002bfc:	08009de8 	.word	0x08009de8
 8002c00:	08009cf4 	.word	0x08009cf4
 8002c04:	08009dec 	.word	0x08009dec
 8002c08:	08009d08 	.word	0x08009d08
 8002c0c:	08009e04 	.word	0x08009e04
 8002c10:	08009d1c 	.word	0x08009d1c
 8002c14:	08009e30 	.word	0x08009e30
 8002c18:	08009d30 	.word	0x08009d30
 8002c1c:	080001e0 	.word	0x080001e0
 8002c20:	08009008 	.word	0x08009008
 8002c24:	08009d44 	.word	0x08009d44
 8002c28:	080094e4 	.word	0x080094e4
 8002c2c:	08009008 	.word	0x08009008
 8002c30:	0800b688 	.word	0x0800b688
 8002c34:	08009d58 	.word	0x08009d58
 8002c38:	20000800 	.word	0x20000800
 8002c3c:	200008dc 	.word	0x200008dc
 8002c40:	08009d6c 	.word	0x08009d6c
 8002c44:	200008e0 	.word	0x200008e0
 8002c48:	20001ce0 	.word	0x20001ce0
 8002c4c:	200013f8 	.word	0x200013f8
 8002c50:	0800901c 	.word	0x0800901c
 8002c54:	08009d80 	.word	0x08009d80
 8002c58:	08009d94 	.word	0x08009d94
 8002c5c:	08009e58 	.word	0x08009e58
 8002c60:	200014b0 	.word	0x200014b0
 8002c64:	08009d98 	.word	0x08009d98
 8002c68:	200014a0 	.word	0x200014a0
 8002c6c:	20001498 	.word	0x20001498
 8002c70:	08009e60 	.word	0x08009e60
 8002c74:	200013f0 	.word	0x200013f0
  while (tsp->sequences[tseq] != NULL) {
 8002c78:	f10a 0a04 	add.w	sl, sl, #4
 8002c7c:	f852 300a 	ldr.w	r3, [r2, sl]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	f47f af08 	bne.w	8002a96 <test_execute.constprop.0+0x156>
      }
      tcase++;
    }
    tseq++;
  }
  print_line();
 8002c86:	f7fe f87b 	bl	8000d80 <print_line>
  test_println("");
 8002c8a:	4c35      	ldr	r4, [pc, #212]	; (8002d60 <test_execute.constprop.0+0x420>)
 8002c8c:	4835      	ldr	r0, [pc, #212]	; (8002d64 <test_execute.constprop.0+0x424>)
 8002c8e:	f7fd ffef 	bl	8000c70 <test_println>
  while (*msgp)
 8002c92:	2146      	movs	r1, #70	; 0x46
    streamPut(test_chp, *msgp++);
 8002c94:	f8db 0000 	ldr.w	r0, [fp]
 8002c98:	6803      	ldr	r3, [r0, #0]
 8002c9a:	68db      	ldr	r3, [r3, #12]
 8002c9c:	4798      	blx	r3
  while (*msgp)
 8002c9e:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8002ca2:	2900      	cmp	r1, #0
 8002ca4:	d1f6      	bne.n	8002c94 <test_execute.constprop.0+0x354>
  test_print("Final result: ");
  if (test_global_fail)
 8002ca6:	4b30      	ldr	r3, [pc, #192]	; (8002d68 <test_execute.constprop.0+0x428>)
 8002ca8:	781b      	ldrb	r3, [r3, #0]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d04c      	beq.n	8002d48 <test_execute.constprop.0+0x408>
    test_println("FAILURE");
 8002cae:	482f      	ldr	r0, [pc, #188]	; (8002d6c <test_execute.constprop.0+0x42c>)
 8002cb0:	f7fd ffde 	bl	8000c70 <test_println>
#if defined(TEST_REPORT_HOOK_END)
  TEST_REPORT_HOOK_END
#endif

  return (msg_t)test_global_fail;
}
 8002cb4:	4b2c      	ldr	r3, [pc, #176]	; (8002d68 <test_execute.constprop.0+0x428>)
 8002cb6:	7818      	ldrb	r0, [r3, #0]
 8002cb8:	b003      	add	sp, #12
 8002cba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (test_local_fail) {
 8002cbe:	4f2c      	ldr	r7, [pc, #176]	; (8002d70 <test_execute.constprop.0+0x430>)
  while (*msgp)
 8002cc0:	212d      	movs	r1, #45	; 0x2d
    streamPut(test_chp, *msgp++);
 8002cc2:	f8db 0000 	ldr.w	r0, [fp]
 8002cc6:	6803      	ldr	r3, [r0, #0]
 8002cc8:	68db      	ldr	r3, [r3, #12]
 8002cca:	4798      	blx	r3
  while (*msgp)
 8002ccc:	f817 1f01 	ldrb.w	r1, [r7, #1]!
 8002cd0:	2900      	cmp	r1, #0
 8002cd2:	d1f6      	bne.n	8002cc2 <test_execute.constprop.0+0x382>
        test_printn(test_step);
 8002cd4:	4b27      	ldr	r3, [pc, #156]	; (8002d74 <test_execute.constprop.0+0x434>)
 8002cd6:	4f28      	ldr	r7, [pc, #160]	; (8002d78 <test_execute.constprop.0+0x438>)
 8002cd8:	6818      	ldr	r0, [r3, #0]
 8002cda:	f7fd ff19 	bl	8000b10 <test_printn>
  while (*msgp)
 8002cde:	2120      	movs	r1, #32
    streamPut(test_chp, *msgp++);
 8002ce0:	f8db 0000 	ldr.w	r0, [fp]
 8002ce4:	6803      	ldr	r3, [r0, #0]
 8002ce6:	68db      	ldr	r3, [r3, #12]
 8002ce8:	4798      	blx	r3
  while (*msgp)
 8002cea:	f817 1f01 	ldrb.w	r1, [r7, #1]!
 8002cee:	2900      	cmp	r1, #0
 8002cf0:	d1f6      	bne.n	8002ce0 <test_execute.constprop.0+0x3a0>
  while (cp < test_tokp)
 8002cf2:	682b      	ldr	r3, [r5, #0]
 8002cf4:	4a21      	ldr	r2, [pc, #132]	; (8002d7c <test_execute.constprop.0+0x43c>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d90a      	bls.n	8002d10 <test_execute.constprop.0+0x3d0>
  char *cp = test_tokens_buffer;
 8002cfa:	4f20      	ldr	r7, [pc, #128]	; (8002d7c <test_execute.constprop.0+0x43c>)
    streamPut(test_chp, *cp++);
 8002cfc:	f8db 0000 	ldr.w	r0, [fp]
 8002d00:	f817 1b01 	ldrb.w	r1, [r7], #1
 8002d04:	6803      	ldr	r3, [r0, #0]
 8002d06:	68db      	ldr	r3, [r3, #12]
 8002d08:	4798      	blx	r3
  while (cp < test_tokp)
 8002d0a:	682b      	ldr	r3, [r5, #0]
 8002d0c:	429f      	cmp	r7, r3
 8002d0e:	d3f5      	bcc.n	8002cfc <test_execute.constprop.0+0x3bc>
  while (*msgp)
 8002d10:	4f1b      	ldr	r7, [pc, #108]	; (8002d80 <test_execute.constprop.0+0x440>)
 8002d12:	215d      	movs	r1, #93	; 0x5d
    streamPut(test_chp, *msgp++);
 8002d14:	f8db 0000 	ldr.w	r0, [fp]
 8002d18:	6803      	ldr	r3, [r0, #0]
 8002d1a:	68db      	ldr	r3, [r3, #12]
 8002d1c:	4798      	blx	r3
  while (*msgp)
 8002d1e:	f817 1f01 	ldrb.w	r1, [r7, #1]!
 8002d22:	2900      	cmp	r1, #0
 8002d24:	d1f6      	bne.n	8002d14 <test_execute.constprop.0+0x3d4>
        test_print(test_failure_message);
 8002d26:	4b17      	ldr	r3, [pc, #92]	; (8002d84 <test_execute.constprop.0+0x444>)
 8002d28:	681f      	ldr	r7, [r3, #0]
  while (*msgp)
 8002d2a:	7839      	ldrb	r1, [r7, #0]
 8002d2c:	b141      	cbz	r1, 8002d40 <test_execute.constprop.0+0x400>
    streamPut(test_chp, *msgp++);
 8002d2e:	f8db 0000 	ldr.w	r0, [fp]
 8002d32:	6803      	ldr	r3, [r0, #0]
 8002d34:	68db      	ldr	r3, [r3, #12]
 8002d36:	4798      	blx	r3
  while (*msgp)
 8002d38:	f817 1f01 	ldrb.w	r1, [r7, #1]!
 8002d3c:	2900      	cmp	r1, #0
 8002d3e:	d1f6      	bne.n	8002d2e <test_execute.constprop.0+0x3ee>
        test_println("\")");
 8002d40:	4811      	ldr	r0, [pc, #68]	; (8002d88 <test_execute.constprop.0+0x448>)
 8002d42:	f7fd ff95 	bl	8000c70 <test_println>
 8002d46:	e748      	b.n	8002bda <test_execute.constprop.0+0x29a>
    test_println("SUCCESS");
 8002d48:	4810      	ldr	r0, [pc, #64]	; (8002d8c <test_execute.constprop.0+0x44c>)
 8002d4a:	f7fd ff91 	bl	8000c70 <test_println>
}
 8002d4e:	4b06      	ldr	r3, [pc, #24]	; (8002d68 <test_execute.constprop.0+0x428>)
 8002d50:	7818      	ldrb	r0, [r3, #0]
 8002d52:	b003      	add	sp, #12
 8002d54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    test_println("*** Test Suite");
 8002d58:	480d      	ldr	r0, [pc, #52]	; (8002d90 <test_execute.constprop.0+0x450>)
 8002d5a:	f7fd ff89 	bl	8000c70 <test_println>
 8002d5e:	e60f      	b.n	8002980 <test_execute.constprop.0+0x40>
 8002d60:	08009dc8 	.word	0x08009dc8
 8002d64:	08009bc0 	.word	0x08009bc0
 8002d68:	200013f8 	.word	0x200013f8
 8002d6c:	08009e74 	.word	0x08009e74
 8002d70:	08009da8 	.word	0x08009da8
 8002d74:	2000149c 	.word	0x2000149c
 8002d78:	08009dc0 	.word	0x08009dc0
 8002d7c:	200014a0 	.word	0x200014a0
 8002d80:	08009dc4 	.word	0x08009dc4
 8002d84:	200013f4 	.word	0x200013f4
 8002d88:	08009e5c 	.word	0x08009e5c
 8002d8c:	08009e6c 	.word	0x08009e6c
 8002d90:	08009dd8 	.word	0x08009dd8
	...

08002da0 <Thread2>:

	}
}

static THD_WORKING_AREA(waThread2, 128);
static THD_FUNCTION(Thread2, arg) {
 8002da0:	b508      	push	{r3, lr}
 8002da2:	4b06      	ldr	r3, [pc, #24]	; (8002dbc <Thread2+0x1c>)
 8002da4:	4a06      	ldr	r2, [pc, #24]	; (8002dc0 <Thread2+0x20>)
 8002da6:	699b      	ldr	r3, [r3, #24]
 8002da8:	619a      	str	r2, [r3, #24]
	(void) arg;
	chRegSetThreadName("master");
	while (true) {
        chThdSleep(TIME_INFINITE);
 8002daa:	f04f 30ff 	mov.w	r0, #4294967295
 8002dae:	f7ff fdb7 	bl	8002920 <chThdSleep>
		//palSetPad(GPIOD, GPIOD_LED3); /* Orange.  */
        chThdSleep(TIME_INFINITE);
 8002db2:	f04f 30ff 	mov.w	r0, #4294967295
 8002db6:	f7ff fdb3 	bl	8002920 <chThdSleep>
	while (true) {
 8002dba:	e7f6      	b.n	8002daa <Thread2+0xa>
 8002dbc:	200009b0 	.word	0x200009b0
 8002dc0:	08009e7c 	.word	0x08009e7c
	...

08002dd0 <job_slow>:

static jobs_queue_t jq;
static job_descriptor_t jobs[JOBS_QUEUE_SIZE];
static msg_t msg_queue[JOBS_QUEUE_SIZE];

static void job_slow(void *arg) {
 8002dd0:	b508      	push	{r3, lr}

  test_emit_token((int)arg);
 8002dd2:	b2c0      	uxtb	r0, r0
 8002dd4:	f7fd feac 	bl	8000b30 <test_emit_token>
  chThdSleepMilliseconds(10);
}
 8002dd8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  chThdSleepMilliseconds(10);
 8002ddc:	2064      	movs	r0, #100	; 0x64
 8002dde:	f7ff bd9f 	b.w	8002920 <chThdSleep>
 8002de2:	bf00      	nop
	...

08002df0 <rt_test_004_001_execute>:
 * - [4.1.5] Function chThdSleepUntil() is tested with a timeline of
 *   "now" + 100 ticks.
 * .
 */

static void rt_test_004_001_execute(void) {
 8002df0:	b570      	push	{r4, r5, r6, lr}
  systime_t time;

  /* [4.1.1] The current system time is read then a sleep is performed
     for 100 system ticks and on exit the system time is verified
     again.*/
  test_set_step(1);
 8002df2:	4e2c      	ldr	r6, [pc, #176]	; (8002ea4 <rt_test_004_001_execute+0xb4>)
 8002df4:	2301      	movs	r3, #1
  return (systime_t)STM32_ST_TIM->CNT;
 8002df6:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
 8002dfa:	6033      	str	r3, [r6, #0]
 8002dfc:	6a6c      	ldr	r4, [r5, #36]	; 0x24
  {
    time = chVTGetSystemTimeX();
    chThdSleep(100);
 8002dfe:	2064      	movs	r0, #100	; 0x64
 8002e00:	f7ff fd8e 	bl	8002920 <chThdSleep>
    test_assert_time_window(chTimeAddX(time, 100),
 8002e04:	f104 0167 	add.w	r1, r4, #103	; 0x67
 8002e08:	f104 0064 	add.w	r0, r4, #100	; 0x64
 8002e0c:	f7fd fb80 	bl	8000510 <_test_assert_time_window.constprop.0>
 8002e10:	b100      	cbz	r0, 8002e14 <rt_test_004_001_execute+0x24>
    test_assert_time_window(chTimeAddX(time, 100),
                            chTimeAddX(time, 100 + CH_CFG_ST_TIMEDELTA + 1),
                            "out of time window");
  }
  test_end_step(5);
}
 8002e12:	bd70      	pop	{r4, r5, r6, pc}
  test_set_step(2);
 8002e14:	2302      	movs	r3, #2
 8002e16:	6033      	str	r3, [r6, #0]
 8002e18:	6a6c      	ldr	r4, [r5, #36]	; 0x24
    chThdSleepMicroseconds(100000);
 8002e1a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002e1e:	f7ff fd7f 	bl	8002920 <chThdSleep>
    test_assert_time_window(chTimeAddX(time, TIME_US2I(100000)),
 8002e22:	f204 31eb 	addw	r1, r4, #1003	; 0x3eb
 8002e26:	f504 707a 	add.w	r0, r4, #1000	; 0x3e8
 8002e2a:	f7fd fb71 	bl	8000510 <_test_assert_time_window.constprop.0>
 8002e2e:	2800      	cmp	r0, #0
 8002e30:	d1ef      	bne.n	8002e12 <rt_test_004_001_execute+0x22>
  test_set_step(3);
 8002e32:	2303      	movs	r3, #3
 8002e34:	6033      	str	r3, [r6, #0]
 8002e36:	6a6c      	ldr	r4, [r5, #36]	; 0x24
    chThdSleepMilliseconds(100);
 8002e38:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002e3c:	f7ff fd70 	bl	8002920 <chThdSleep>
    test_assert_time_window(chTimeAddX(time, TIME_MS2I(100)),
 8002e40:	f204 31eb 	addw	r1, r4, #1003	; 0x3eb
 8002e44:	f504 707a 	add.w	r0, r4, #1000	; 0x3e8
 8002e48:	f7fd fb62 	bl	8000510 <_test_assert_time_window.constprop.0>
 8002e4c:	2800      	cmp	r0, #0
 8002e4e:	d1e0      	bne.n	8002e12 <rt_test_004_001_execute+0x22>
  test_set_step(4);
 8002e50:	2304      	movs	r3, #4
 8002e52:	6033      	str	r3, [r6, #0]
 8002e54:	6a6c      	ldr	r4, [r5, #36]	; 0x24
    chThdSleepSeconds(1);
 8002e56:	f242 7010 	movw	r0, #10000	; 0x2710
 8002e5a:	f7ff fd61 	bl	8002920 <chThdSleep>
    test_assert_time_window(chTimeAddX(time, TIME_S2I(1)),
 8002e5e:	f504 511c 	add.w	r1, r4, #9984	; 0x2700
 8002e62:	4608      	mov	r0, r1
 8002e64:	3010      	adds	r0, #16
 8002e66:	3113      	adds	r1, #19
 8002e68:	f7fd fb52 	bl	8000510 <_test_assert_time_window.constprop.0>
 8002e6c:	2800      	cmp	r0, #0
 8002e6e:	d1d0      	bne.n	8002e12 <rt_test_004_001_execute+0x22>
  test_set_step(5);
 8002e70:	2305      	movs	r3, #5
 8002e72:	6033      	str	r3, [r6, #0]
 8002e74:	6a6e      	ldr	r6, [r5, #36]	; 0x24
 8002e76:	2320      	movs	r3, #32
 8002e78:	f106 0464 	add.w	r4, r6, #100	; 0x64
 8002e7c:	f383 8811 	msr	BASEPRI, r3
 8002e80:	6a69      	ldr	r1, [r5, #36]	; 0x24
  if (interval > (sysinterval_t)0) {
 8002e82:	1a61      	subs	r1, r4, r1
 8002e84:	d109      	bne.n	8002e9a <rt_test_004_001_execute+0xaa>
 8002e86:	2300      	movs	r3, #0
 8002e88:	f383 8811 	msr	BASEPRI, r3
    test_assert_time_window(chTimeAddX(time, 100),
 8002e8c:	f106 0167 	add.w	r1, r6, #103	; 0x67
 8002e90:	4620      	mov	r0, r4
}
 8002e92:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    test_assert_time_window(chTimeAddX(time, 100),
 8002e96:	f7fd bb3b 	b.w	8000510 <_test_assert_time_window.constprop.0>
 8002e9a:	2008      	movs	r0, #8
 8002e9c:	f7ff fa58 	bl	8002350 <chSchGoSleepTimeoutS>
 8002ea0:	e7f1      	b.n	8002e86 <rt_test_004_001_execute+0x96>
 8002ea2:	bf00      	nop
 8002ea4:	2000149c 	.word	0x2000149c
	...

08002eb0 <test_wait_tick>:
}

/*
 * Delays execution until next system time tick.
 */
systime_t test_wait_tick(void) {
 8002eb0:	b508      	push	{r3, lr}

  chThdSleep(1);
 8002eb2:	2001      	movs	r0, #1
 8002eb4:	f7ff fd34 	bl	8002920 <chThdSleep>
 8002eb8:	2320      	movs	r3, #32
 8002eba:	f383 8811 	msr	BASEPRI, r3
 8002ebe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	6a50      	ldr	r0, [r2, #36]	; 0x24
 8002ec6:	f383 8811 	msr	BASEPRI, r3
  return chVTGetSystemTime();
}
 8002eca:	bd08      	pop	{r3, pc}
 8002ecc:	0000      	movs	r0, r0
	...

08002ed0 <rt_test_011_009_execute>:
static void rt_test_011_009_execute(void) {
 8002ed0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  test_set_step(1);
 8002ed4:	f8df b090 	ldr.w	fp, [pc, #144]	; 8002f68 <rt_test_011_009_execute+0x98>
      chVTDoSetI(&vt1, 1, tmo, NULL);
 8002ed8:	4f1e      	ldr	r7, [pc, #120]	; (8002f54 <rt_test_011_009_execute+0x84>)
 8002eda:	4e1f      	ldr	r6, [pc, #124]	; (8002f58 <rt_test_011_009_execute+0x88>)
      chVTDoSetI(&vt2, 10000, tmo, NULL);
 8002edc:	4d1f      	ldr	r5, [pc, #124]	; (8002f5c <rt_test_011_009_execute+0x8c>)
  test_set_step(1);
 8002ede:	2301      	movs	r3, #1
 8002ee0:	f8cb 3000 	str.w	r3, [fp]
    start = test_wait_tick();
 8002ee4:	f7ff ffe4 	bl	8002eb0 <test_wait_tick>
    n = 0;
 8002ee8:	2400      	movs	r4, #0
    start = test_wait_tick();
 8002eea:	4680      	mov	r8, r0
      chVTDoSetI(&vt1, 1, tmo, NULL);
 8002eec:	46a2      	mov	sl, r4
 8002eee:	f04f 0920 	mov.w	r9, #32
 8002ef2:	f389 8811 	msr	BASEPRI, r9
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	463a      	mov	r2, r7
 8002efa:	4630      	mov	r0, r6
 8002efc:	2101      	movs	r1, #1
 8002efe:	f7fe fb37 	bl	8001570 <chVTDoSetI>
      chVTDoSetI(&vt2, 10000, tmo, NULL);
 8002f02:	463a      	mov	r2, r7
 8002f04:	2300      	movs	r3, #0
 8002f06:	f242 7110 	movw	r1, #10000	; 0x2710
 8002f0a:	4628      	mov	r0, r5
 8002f0c:	f7fe fb30 	bl	8001570 <chVTDoSetI>
      chVTDoResetI(&vt1);
 8002f10:	4630      	mov	r0, r6
 8002f12:	f7fe faed 	bl	80014f0 <chVTDoResetI>
      chVTDoResetI(&vt2);
 8002f16:	4628      	mov	r0, r5
 8002f18:	f7fe faea 	bl	80014f0 <chVTDoResetI>
 8002f1c:	f38a 8811 	msr	BASEPRI, sl
 8002f20:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    } while (chVTIsSystemTimeWithinX(start, end));
 8002f24:	f242 720f 	movw	r2, #9999	; 0x270f
 8002f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  return (bool)((systime_t)((systime_t)time - (systime_t)start) <
 8002f2a:	eba3 0308 	sub.w	r3, r3, r8
 8002f2e:	4293      	cmp	r3, r2
      n++;
 8002f30:	f104 0401 	add.w	r4, r4, #1
    } while (chVTIsSystemTimeWithinX(start, end));
 8002f34:	d9dd      	bls.n	8002ef2 <rt_test_011_009_execute+0x22>
  test_set_step(2);
 8002f36:	2302      	movs	r3, #2
    test_print("--- Score : ");
 8002f38:	4809      	ldr	r0, [pc, #36]	; (8002f60 <rt_test_011_009_execute+0x90>)
  test_set_step(2);
 8002f3a:	f8cb 3000 	str.w	r3, [fp]
    test_print("--- Score : ");
 8002f3e:	f7fd feb7 	bl	8000cb0 <test_print>
    test_printn(n * 2);
 8002f42:	0060      	lsls	r0, r4, #1
 8002f44:	f7fd fde4 	bl	8000b10 <test_printn>
}
 8002f48:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    test_println(" timers/S");
 8002f4c:	4805      	ldr	r0, [pc, #20]	; (8002f64 <rt_test_011_009_execute+0x94>)
 8002f4e:	f7fd be8f 	b.w	8000c70 <test_println>
 8002f52:	bf00      	nop
 8002f54:	080007f1 	.word	0x080007f1
 8002f58:	200014d0 	.word	0x200014d0
 8002f5c:	200014e4 	.word	0x200014e4
 8002f60:	08009e84 	.word	0x08009e84
 8002f64:	08009e94 	.word	0x08009e94
 8002f68:	2000149c 	.word	0x2000149c
 8002f6c:	00000000 	.word	0x00000000

08002f70 <chMsgWaitS>:
 *
 * @return              A pointer to the thread carrying the message.
 *
 * @sclass
 */
thread_t *chMsgWaitS(void) {
 8002f70:	b510      	push	{r4, lr}
  thread_t *tp;

  chDbgCheckClassS();

  if (!chMsgIsPendingI(currp)) {
 8002f72:	4c0b      	ldr	r4, [pc, #44]	; (8002fa0 <chMsgWaitS+0x30>)
 8002f74:	69a2      	ldr	r2, [r4, #24]
 */
static inline bool chMsgIsPendingI(thread_t *tp) {

  chDbgCheckClassI();

  return (bool)(tp->msgqueue.next != (thread_t *)&tp->msgqueue);
 8002f76:	4613      	mov	r3, r2
 8002f78:	f853 0f2c 	ldr.w	r0, [r3, #44]!
 8002f7c:	4298      	cmp	r0, r3
 8002f7e:	d006      	beq.n	8002f8e <chMsgWaitS+0x1e>
  tqp->next             = tp->queue.next;
 8002f80:	6801      	ldr	r1, [r0, #0]
 8002f82:	62d1      	str	r1, [r2, #44]	; 0x2c
    chSchGoSleepS(CH_STATE_WTMSG);
  }
  tp = queue_fifo_remove(&currp->msgqueue);
  tp->state = CH_STATE_SNDMSG;
 8002f84:	220d      	movs	r2, #13
  tqp->next->queue.prev = (thread_t *)tqp;
 8002f86:	604b      	str	r3, [r1, #4]
 8002f88:	f880 2020 	strb.w	r2, [r0, #32]

  return tp;
}
 8002f8c:	bd10      	pop	{r4, pc}
    chSchGoSleepS(CH_STATE_WTMSG);
 8002f8e:	200e      	movs	r0, #14
 8002f90:	f7ff f94e 	bl	8002230 <chSchGoSleepS>
 8002f94:	69a2      	ldr	r2, [r4, #24]
 8002f96:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
 8002f98:	f102 032c 	add.w	r3, r2, #44	; 0x2c
 8002f9c:	e7f0      	b.n	8002f80 <chMsgWaitS+0x10>
 8002f9e:	bf00      	nop
 8002fa0:	200009b0 	.word	0x200009b0
	...

08002fb0 <bmk_thread1>:
static THD_FUNCTION(bmk_thread1, p) {
 8002fb0:	b570      	push	{r4, r5, r6, lr}
 8002fb2:	2620      	movs	r6, #32
 8002fb4:	2500      	movs	r5, #0
 8002fb6:	f386 8811 	msr	BASEPRI, r6
  tp = chMsgWaitS();
 8002fba:	f7ff ffd9 	bl	8002f70 <chMsgWaitS>
 8002fbe:	f385 8811 	msr	BASEPRI, r5
    msg = chMsgGet(tp);
 8002fc2:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8002fc4:	f386 8811 	msr	BASEPRI, r6
 */
static inline void chMsgReleaseS(thread_t *tp, msg_t msg) {

  chDbgCheckClassS();

  chSchWakeupS(tp, msg);
 8002fc8:	4621      	mov	r1, r4
 8002fca:	f7ff f819 	bl	8002000 <chSchWakeupS>
 8002fce:	f385 8811 	msr	BASEPRI, r5
  } while (msg);
 8002fd2:	2c00      	cmp	r4, #0
 8002fd4:	d1ef      	bne.n	8002fb6 <bmk_thread1+0x6>
}
 8002fd6:	bd70      	pop	{r4, r5, r6, pc}
	...

08002fe0 <chMsgSend>:
  thread_t *ctp = currp;
 8002fe0:	4b0e      	ldr	r3, [pc, #56]	; (800301c <chMsgSend+0x3c>)
msg_t chMsgSend(thread_t *tp, msg_t msg) {
 8002fe2:	b510      	push	{r4, lr}
 8002fe4:	2220      	movs	r2, #32
  thread_t *ctp = currp;
 8002fe6:	699c      	ldr	r4, [r3, #24]
 8002fe8:	f382 8811 	msr	BASEPRI, r2
  ctp->u.sentmsg = msg;
 8002fec:	6261      	str	r1, [r4, #36]	; 0x24
  tp->queue.prev             = tqp->prev;
 8002fee:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8002ff0:	6062      	str	r2, [r4, #4]
  msg_insert(ctp, &tp->msgqueue);
 8002ff2:	f100 012c 	add.w	r1, r0, #44	; 0x2c
  tp->queue.next             = (thread_t *)tqp;
 8002ff6:	6021      	str	r1, [r4, #0]
  tp->queue.prev->queue.next = tp;
 8002ff8:	6014      	str	r4, [r2, #0]
  if (tp->state == CH_STATE_WTMSG) {
 8002ffa:	f890 2020 	ldrb.w	r2, [r0, #32]
  tqp->prev                  = tp;
 8002ffe:	6304      	str	r4, [r0, #48]	; 0x30
 8003000:	2a0e      	cmp	r2, #14
 8003002:	d007      	beq.n	8003014 <chMsgSend+0x34>
  chSchGoSleepS(CH_STATE_SNDMSGQ);
 8003004:	200c      	movs	r0, #12
 8003006:	f7ff f913 	bl	8002230 <chSchGoSleepS>
  msg = ctp->u.rdymsg;
 800300a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800300c:	2300      	movs	r3, #0
 800300e:	f383 8811 	msr	BASEPRI, r3
}
 8003012:	bd10      	pop	{r4, pc}
    (void) chSchReadyI(tp);
 8003014:	f7fe f8fc 	bl	8001210 <chSchReadyI>
 8003018:	e7f4      	b.n	8003004 <chMsgSend+0x24>
 800301a:	bf00      	nop
 800301c:	200009b0 	.word	0x200009b0

08003020 <msg_loop_test>:
NOINLINE static unsigned int msg_loop_test(thread_t *tp) {
 8003020:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003024:	4605      	mov	r5, r0
  start = test_wait_tick();
 8003026:	f7ff ff43 	bl	8002eb0 <test_wait_tick>
  uint32_t n = 0;
 800302a:	2400      	movs	r4, #0
  start = test_wait_tick();
 800302c:	4606      	mov	r6, r0
 800302e:	f04f 4880 	mov.w	r8, #1073741824	; 0x40000000
  } while (chVTIsSystemTimeWithinX(start, end));
 8003032:	f242 770f 	movw	r7, #9999	; 0x270f
    (void)chMsgSend(tp, 1);
 8003036:	2101      	movs	r1, #1
 8003038:	4628      	mov	r0, r5
 800303a:	f7ff ffd1 	bl	8002fe0 <chMsgSend>
 800303e:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
 8003042:	1b9b      	subs	r3, r3, r6
  } while (chVTIsSystemTimeWithinX(start, end));
 8003044:	42bb      	cmp	r3, r7
    n++;
 8003046:	f104 0401 	add.w	r4, r4, #1
  } while (chVTIsSystemTimeWithinX(start, end));
 800304a:	d9f4      	bls.n	8003036 <msg_loop_test+0x16>
  (void)chMsgSend(tp, 0);
 800304c:	4628      	mov	r0, r5
 800304e:	2100      	movs	r1, #0
 8003050:	f7ff ffc6 	bl	8002fe0 <chMsgSend>
}
 8003054:	4620      	mov	r0, r4
 8003056:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800305a:	bf00      	nop
 800305c:	0000      	movs	r0, r0
	...

08003060 <msg_thread1>:

/****************************************************************************
 * Shared code.
 ****************************************************************************/

static THD_FUNCTION(msg_thread1, p) {
 8003060:	b510      	push	{r4, lr}

  chMsgSend(p, 'A');
 8003062:	2141      	movs	r1, #65	; 0x41
static THD_FUNCTION(msg_thread1, p) {
 8003064:	4604      	mov	r4, r0
  chMsgSend(p, 'A');
 8003066:	f7ff ffbb 	bl	8002fe0 <chMsgSend>
  chMsgSend(p, 'B');
 800306a:	4620      	mov	r0, r4
 800306c:	2142      	movs	r1, #66	; 0x42
 800306e:	f7ff ffb7 	bl	8002fe0 <chMsgSend>
  chMsgSend(p, 'C');
 8003072:	4620      	mov	r0, r4
 8003074:	2143      	movs	r1, #67	; 0x43
 8003076:	f7ff ffb3 	bl	8002fe0 <chMsgSend>
  chMsgSend(p, 'D');
 800307a:	4620      	mov	r0, r4
 800307c:	2144      	movs	r1, #68	; 0x44
}
 800307e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  chMsgSend(p, 'D');
 8003082:	f7ff bfad 	b.w	8002fe0 <chMsgSend>
 8003086:	bf00      	nop
	...

08003090 <chDelegateCallVeneer>:
 * @param[in] veneer    pointer to the veneer function to be called
 * @param[in] ...       variable number of parameters
 * @return              The function return value casted to msg_t. It is
 *                      garbage for functions returning @p void.
 */
msg_t chDelegateCallVeneer(thread_t *tp, delegate_veneer_t veneer, ...) {
 8003090:	b40e      	push	{r1, r2, r3}
 8003092:	b510      	push	{r4, lr}
 8003094:	b085      	sub	sp, #20
 8003096:	ab07      	add	r3, sp, #28

  va_start(args, veneer);

  /* Preparing the call message.*/
  cm.veneer = veneer;
  cm.argsp  = &args;
 8003098:	aa01      	add	r2, sp, #4
msg_t chDelegateCallVeneer(thread_t *tp, delegate_veneer_t veneer, ...) {
 800309a:	f853 4b04 	ldr.w	r4, [r3], #4
  va_start(args, veneer);
 800309e:	9301      	str	r3, [sp, #4]
  (void)cm; /* Suppresses a lint warning.*/

  /* Sending the message to the dispatcher thread, the return value is
     contained in the returned message.*/
  msg = chMsgSend(tp, (msg_t)&cm);
 80030a0:	a902      	add	r1, sp, #8
  cm.argsp  = &args;
 80030a2:	e9cd 4202 	strd	r4, r2, [sp, #8]
  msg = chMsgSend(tp, (msg_t)&cm);
 80030a6:	f7ff ff9b 	bl	8002fe0 <chMsgSend>

  va_end(args);

  return msg;
}
 80030aa:	b005      	add	sp, #20
 80030ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80030b0:	b003      	add	sp, #12
 80030b2:	4770      	bx	lr
	...

080030c0 <chMtxLockS>:
void chMtxLockS(mutex_t *mp) {
 80030c0:	b570      	push	{r4, r5, r6, lr}
  thread_t *ctp = currp;
 80030c2:	4b2e      	ldr	r3, [pc, #184]	; (800317c <chMtxLockS+0xbc>)
void chMtxLockS(mutex_t *mp) {
 80030c4:	4604      	mov	r4, r0
  if (mp->owner != NULL) {
 80030c6:	6880      	ldr	r0, [r0, #8]
  thread_t *ctp = currp;
 80030c8:	699d      	ldr	r5, [r3, #24]
  if (mp->owner != NULL) {
 80030ca:	b330      	cbz	r0, 800311a <chMtxLockS+0x5a>
      while (tp->prio < ctp->prio) {
 80030cc:	68aa      	ldr	r2, [r5, #8]
 80030ce:	6883      	ldr	r3, [r0, #8]
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d207      	bcs.n	80030e4 <chMtxLockS+0x24>
        switch (tp->state) {
 80030d4:	f890 3020 	ldrb.w	r3, [r0, #32]
        tp->prio = ctp->prio;
 80030d8:	6082      	str	r2, [r0, #8]
        switch (tp->state) {
 80030da:	2b06      	cmp	r3, #6
 80030dc:	d035      	beq.n	800314a <chMtxLockS+0x8a>
 80030de:	2b07      	cmp	r3, #7
 80030e0:	d020      	beq.n	8003124 <chMtxLockS+0x64>
 80030e2:	b19b      	cbz	r3, 800310c <chMtxLockS+0x4c>
  thread_t *cp = (thread_t *)tqp;
 80030e4:	4623      	mov	r3, r4
 80030e6:	e003      	b.n	80030f0 <chMtxLockS+0x30>
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 80030e8:	6899      	ldr	r1, [r3, #8]
 80030ea:	68aa      	ldr	r2, [r5, #8]
 80030ec:	4291      	cmp	r1, r2
 80030ee:	d302      	bcc.n	80030f6 <chMtxLockS+0x36>
    cp = cp->queue.next;
 80030f0:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 80030f2:	429c      	cmp	r4, r3
 80030f4:	d1f8      	bne.n	80030e8 <chMtxLockS+0x28>
  tp->queue.prev             = cp->queue.prev;
 80030f6:	685a      	ldr	r2, [r3, #4]
      chSchGoSleepS(CH_STATE_WTMTX);
 80030f8:	2006      	movs	r0, #6
 80030fa:	e9c5 3200 	strd	r3, r2, [r5]
  tp->queue.prev->queue.next = tp;
 80030fe:	6015      	str	r5, [r2, #0]
  cp->queue.prev             = tp;
 8003100:	605d      	str	r5, [r3, #4]
      ctp->u.wtmtxp = mp;
 8003102:	626c      	str	r4, [r5, #36]	; 0x24
}
 8003104:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      chSchGoSleepS(CH_STATE_WTMTX);
 8003108:	f7ff b892 	b.w	8002230 <chSchGoSleepS>
  tp->queue.prev->queue.next = tp->queue.next;
 800310c:	e9d0 3200 	ldrd	r3, r2, [r0]
 8003110:	6013      	str	r3, [r2, #0]
  tp->queue.next->queue.prev = tp->queue.prev;
 8003112:	605a      	str	r2, [r3, #4]
          (void) chSchReadyI(queue_dequeue(tp));
 8003114:	f7fe f87c 	bl	8001210 <chSchReadyI>
          break;
 8003118:	e7e4      	b.n	80030e4 <chMtxLockS+0x24>
    mp->next = ctp->mtxlist;
 800311a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800311c:	e9c4 5302 	strd	r5, r3, [r4, #8]
    ctp->mtxlist = mp;
 8003120:	63ac      	str	r4, [r5, #56]	; 0x38
}
 8003122:	bd70      	pop	{r4, r5, r6, pc}
  tp->queue.prev->queue.next = tp->queue.next;
 8003124:	e9d0 3100 	ldrd	r3, r1, [r0]
          queue_prio_insert(queue_dequeue(tp), &tp->u.wtmtxp->queue);
 8003128:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800312a:	600b      	str	r3, [r1, #0]
  tp->queue.next->queue.prev = tp->queue.prev;
 800312c:	6059      	str	r1, [r3, #4]
  thread_t *cp = (thread_t *)tqp;
 800312e:	4633      	mov	r3, r6
 8003130:	e002      	b.n	8003138 <chMtxLockS+0x78>
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 8003132:	6899      	ldr	r1, [r3, #8]
 8003134:	428a      	cmp	r2, r1
 8003136:	d802      	bhi.n	800313e <chMtxLockS+0x7e>
    cp = cp->queue.next;
 8003138:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 800313a:	429e      	cmp	r6, r3
 800313c:	d1f9      	bne.n	8003132 <chMtxLockS+0x72>
  tp->queue.prev             = cp->queue.prev;
 800313e:	685a      	ldr	r2, [r3, #4]
 8003140:	e9c0 3200 	strd	r3, r2, [r0]
  tp->queue.prev->queue.next = tp;
 8003144:	6010      	str	r0, [r2, #0]
  cp->queue.prev             = tp;
 8003146:	6058      	str	r0, [r3, #4]
 8003148:	e7cc      	b.n	80030e4 <chMtxLockS+0x24>
  tp->queue.prev->queue.next = tp->queue.next;
 800314a:	e9d0 3100 	ldrd	r3, r1, [r0]
          queue_prio_insert(queue_dequeue(tp), &tp->u.wtmtxp->queue);
 800314e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8003150:	600b      	str	r3, [r1, #0]
  tp->queue.next->queue.prev = tp->queue.prev;
 8003152:	6059      	str	r1, [r3, #4]
  thread_t *cp = (thread_t *)tqp;
 8003154:	4633      	mov	r3, r6
 8003156:	e002      	b.n	800315e <chMtxLockS+0x9e>
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 8003158:	6899      	ldr	r1, [r3, #8]
 800315a:	428a      	cmp	r2, r1
 800315c:	d802      	bhi.n	8003164 <chMtxLockS+0xa4>
    cp = cp->queue.next;
 800315e:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 8003160:	429e      	cmp	r6, r3
 8003162:	d1f9      	bne.n	8003158 <chMtxLockS+0x98>
  tp->queue.prev             = cp->queue.prev;
 8003164:	685a      	ldr	r2, [r3, #4]
 8003166:	e9c0 3200 	strd	r3, r2, [r0]
  tp->queue.prev->queue.next = tp;
 800316a:	6010      	str	r0, [r2, #0]
  cp->queue.prev             = tp;
 800316c:	6058      	str	r0, [r3, #4]
          tp = tp->u.wtmtxp->owner;
 800316e:	68b0      	ldr	r0, [r6, #8]
      while (tp->prio < ctp->prio) {
 8003170:	68aa      	ldr	r2, [r5, #8]
 8003172:	6883      	ldr	r3, [r0, #8]
 8003174:	4293      	cmp	r3, r2
 8003176:	d3ad      	bcc.n	80030d4 <chMtxLockS+0x14>
 8003178:	e7b4      	b.n	80030e4 <chMtxLockS+0x24>
 800317a:	bf00      	nop
 800317c:	200009b0 	.word	0x200009b0

08003180 <chMtxLock>:
void chMtxLock(mutex_t *mp) {
 8003180:	b508      	push	{r3, lr}
 8003182:	2320      	movs	r3, #32
 8003184:	f383 8811 	msr	BASEPRI, r3
  chMtxLockS(mp);
 8003188:	f7ff ff9a 	bl	80030c0 <chMtxLockS>
 800318c:	2300      	movs	r3, #0
 800318e:	f383 8811 	msr	BASEPRI, r3
}
 8003192:	bd08      	pop	{r3, pc}
	...

080031a0 <chSemWaitS.part.0>:
msg_t chSemWaitS(semaphore_t *sp) {
 80031a0:	b510      	push	{r4, lr}
    currp->u.wtsemp = sp;
 80031a2:	4c07      	ldr	r4, [pc, #28]	; (80031c0 <chSemWaitS.part.0+0x20>)
 80031a4:	69a2      	ldr	r2, [r4, #24]
 80031a6:	6250      	str	r0, [r2, #36]	; 0x24
  tp->queue.prev             = tqp->prev;
 80031a8:	6841      	ldr	r1, [r0, #4]
msg_t chSemWaitS(semaphore_t *sp) {
 80031aa:	4603      	mov	r3, r0
 80031ac:	e9c2 0100 	strd	r0, r1, [r2]
  tp->queue.prev->queue.next = tp;
 80031b0:	600a      	str	r2, [r1, #0]
    chSchGoSleepS(CH_STATE_WTSEM);
 80031b2:	2005      	movs	r0, #5
  tqp->prev                  = tp;
 80031b4:	605a      	str	r2, [r3, #4]
 80031b6:	f7ff f83b 	bl	8002230 <chSchGoSleepS>
    return currp->u.rdymsg;
 80031ba:	69a3      	ldr	r3, [r4, #24]
}
 80031bc:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80031be:	bd10      	pop	{r4, pc}
 80031c0:	200009b0 	.word	0x200009b0
	...

080031d0 <chCacheGetObject.constprop.0>:
oc_object_t *chCacheGetObject(objects_cache_t *ocp,
 80031d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80031d4:	2320      	movs	r3, #32
 80031d6:	b082      	sub	sp, #8
 80031d8:	4604      	mov	r4, r0
 80031da:	f383 8811 	msr	BASEPRI, r3
  objp = hash_get_s(ocp, group, key);
 80031de:	4d3a      	ldr	r5, [pc, #232]	; (80032c8 <chCacheGetObject.constprop.0+0xf8>)
  hhp  = &ocp->hashp[OC_HASH_FUNCTION(ocp, group, key)];
 80031e0:	e9d5 3100 	ldrd	r3, r1, [r5]
 80031e4:	3b01      	subs	r3, #1
 80031e6:	4003      	ands	r3, r0
 80031e8:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
  objp = hhp->hash_next;
 80031ec:	f851 1033 	ldr.w	r1, [r1, r3, lsl #3]
  while (objp != (oc_object_t *)hhp) {
 80031f0:	428a      	cmp	r2, r1
 80031f2:	d103      	bne.n	80031fc <chCacheGetObject.constprop.0+0x2c>
 80031f4:	e01c      	b.n	8003230 <chCacheGetObject.constprop.0+0x60>
    objp = objp->hash_next;
 80031f6:	6809      	ldr	r1, [r1, #0]
  while (objp != (oc_object_t *)hhp) {
 80031f8:	428a      	cmp	r2, r1
 80031fa:	d019      	beq.n	8003230 <chCacheGetObject.constprop.0+0x60>
    if ((objp->obj_key == key) && (objp->obj_group == group)) {
 80031fc:	694b      	ldr	r3, [r1, #20]
 80031fe:	429c      	cmp	r4, r3
 8003200:	d1f9      	bne.n	80031f6 <chCacheGetObject.constprop.0+0x26>
 8003202:	690b      	ldr	r3, [r1, #16]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d1f6      	bne.n	80031f6 <chCacheGetObject.constprop.0+0x26>
    if (chSemGetCounterI(&objp->obj_sem) > (cnt_t)0) {
 8003208:	6a0b      	ldr	r3, [r1, #32]
 800320a:	2b00      	cmp	r3, #0
 800320c:	dd39      	ble.n	8003282 <chCacheGetObject.constprop.0+0xb2>
      objp->obj_flags &= ~OC_FLAG_INLRU;
 800320e:	6a4a      	ldr	r2, [r1, #36]	; 0x24
      LRU_REMOVE(objp);
 8003210:	e9d1 0402 	ldrd	r0, r4, [r1, #8]
  sp->cnt--;
 8003214:	3b01      	subs	r3, #1
      objp->obj_flags &= ~OC_FLAG_INLRU;
 8003216:	f022 0201 	bic.w	r2, r2, #1
      LRU_REMOVE(objp);
 800321a:	60a0      	str	r0, [r4, #8]
 800321c:	60c4      	str	r4, [r0, #12]
      objp->obj_flags &= ~OC_FLAG_INLRU;
 800321e:	e9c1 3208 	strd	r3, r2, [r1, #32]
 8003222:	2300      	movs	r3, #0
 8003224:	f383 8811 	msr	BASEPRI, r3
}
 8003228:	4608      	mov	r0, r1
 800322a:	b002      	add	sp, #8
 800322c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003230:	4f26      	ldr	r7, [pc, #152]	; (80032cc <chCacheGetObject.constprop.0+0xfc>)
 8003232:	2600      	movs	r6, #0
    (void) ocp->writef(ocp, objp, true);
 8003234:	f1a7 0830 	sub.w	r8, r7, #48	; 0x30
 8003238:	e01a      	b.n	8003270 <chCacheGetObject.constprop.0+0xa0>
    objp = ocp->lru.lru_prev;
 800323a:	6a29      	ldr	r1, [r5, #32]
    LRU_REMOVE(objp);
 800323c:	e9d1 0c02 	ldrd	r0, ip, [r1, #8]
    objp->obj_flags &= ~OC_FLAG_INLRU;
 8003240:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8003242:	6a0b      	ldr	r3, [r1, #32]
    LRU_REMOVE(objp);
 8003244:	f8cc 0008 	str.w	r0, [ip, #8]
 8003248:	3b01      	subs	r3, #1
 800324a:	f8c0 c00c 	str.w	ip, [r0, #12]
    objp->obj_flags &= ~OC_FLAG_INLRU;
 800324e:	f022 0001 	bic.w	r0, r2, #1
 8003252:	e9c1 3008 	strd	r3, r0, [r1, #32]
    if ((objp->obj_flags & OC_FLAG_LAZYWRITE) == 0U) {
 8003256:	06d0      	lsls	r0, r2, #27
 8003258:	d51c      	bpl.n	8003294 <chCacheGetObject.constprop.0+0xc4>
 800325a:	f386 8811 	msr	BASEPRI, r6
    objp->obj_flags = OC_FLAG_INHASH | OC_FLAG_FORGET;
 800325e:	2322      	movs	r3, #34	; 0x22
 8003260:	624b      	str	r3, [r1, #36]	; 0x24
    (void) ocp->writef(ocp, objp, true);
 8003262:	4640      	mov	r0, r8
 8003264:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8003266:	2201      	movs	r2, #1
 8003268:	4798      	blx	r3
 800326a:	2320      	movs	r3, #32
 800326c:	f383 8811 	msr	BASEPRI, r3
  if (--sp->cnt < (cnt_t)0) {
 8003270:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8003272:	3b01      	subs	r3, #1
 8003274:	2b00      	cmp	r3, #0
 8003276:	63ab      	str	r3, [r5, #56]	; 0x38
 8003278:	dadf      	bge.n	800323a <chCacheGetObject.constprop.0+0x6a>
 800327a:	4638      	mov	r0, r7
 800327c:	f7ff ff90 	bl	80031a0 <chSemWaitS.part.0>
 8003280:	e7db      	b.n	800323a <chCacheGetObject.constprop.0+0x6a>
 8003282:	3b01      	subs	r3, #1
 8003284:	620b      	str	r3, [r1, #32]
 8003286:	f101 0018 	add.w	r0, r1, #24
 800328a:	9101      	str	r1, [sp, #4]
 800328c:	f7ff ff88 	bl	80031a0 <chSemWaitS.part.0>
 8003290:	9901      	ldr	r1, [sp, #4]
 8003292:	e7c6      	b.n	8003222 <chCacheGetObject.constprop.0+0x52>
      if ((objp->obj_flags & OC_FLAG_INHASH) != 0U) {
 8003294:	0793      	lsls	r3, r2, #30
 8003296:	d504      	bpl.n	80032a2 <chCacheGetObject.constprop.0+0xd2>
        HASH_REMOVE(objp);
 8003298:	e9d1 2300 	ldrd	r2, r3, [r1]
 800329c:	601a      	str	r2, [r3, #0]
 800329e:	680a      	ldr	r2, [r1, #0]
 80032a0:	6053      	str	r3, [r2, #4]
    HASH_INSERT(ocp, objp, group, key);
 80032a2:	e9d5 3200 	ldrd	r3, r2, [r5]
 80032a6:	3b01      	subs	r3, #1
    objp->obj_key   = key;
 80032a8:	614c      	str	r4, [r1, #20]
    HASH_INSERT(ocp, objp, group, key);
 80032aa:	401c      	ands	r4, r3
 80032ac:	eb02 00c4 	add.w	r0, r2, r4, lsl #3
 80032b0:	f852 3034 	ldr.w	r3, [r2, r4, lsl #3]
 80032b4:	6048      	str	r0, [r1, #4]
    objp->obj_group = group;
 80032b6:	2500      	movs	r5, #0
    objp->obj_flags = OC_FLAG_INHASH | OC_FLAG_NOTSYNC;
 80032b8:	200a      	movs	r0, #10
    HASH_INSERT(ocp, objp, group, key);
 80032ba:	600b      	str	r3, [r1, #0]
    objp->obj_group = group;
 80032bc:	610d      	str	r5, [r1, #16]
    objp->obj_flags = OC_FLAG_INHASH | OC_FLAG_NOTSYNC;
 80032be:	6248      	str	r0, [r1, #36]	; 0x24
    HASH_INSERT(ocp, objp, group, key);
 80032c0:	6059      	str	r1, [r3, #4]
 80032c2:	f842 1034 	str.w	r1, [r2, r4, lsl #3]
 80032c6:	e7ac      	b.n	8003222 <chCacheGetObject.constprop.0+0x52>
 80032c8:	2000096c 	.word	0x2000096c
 80032cc:	2000099c 	.word	0x2000099c

080032d0 <chSemWait>:
msg_t chSemWait(semaphore_t *sp) {
 80032d0:	b508      	push	{r3, lr}
 80032d2:	2320      	movs	r3, #32
 80032d4:	f383 8811 	msr	BASEPRI, r3
  if (--sp->cnt < (cnt_t)0) {
 80032d8:	6883      	ldr	r3, [r0, #8]
 80032da:	3b01      	subs	r3, #1
 80032dc:	2b00      	cmp	r3, #0
 80032de:	6083      	str	r3, [r0, #8]
 80032e0:	db04      	blt.n	80032ec <chSemWait+0x1c>
  return MSG_OK;
 80032e2:	2000      	movs	r0, #0
 80032e4:	2300      	movs	r3, #0
 80032e6:	f383 8811 	msr	BASEPRI, r3
}
 80032ea:	bd08      	pop	{r3, pc}
 80032ec:	f7ff ff58 	bl	80031a0 <chSemWaitS.part.0>
 80032f0:	2300      	movs	r3, #0
 80032f2:	f383 8811 	msr	BASEPRI, r3
 80032f6:	bd08      	pop	{r3, pc}
	...

08003300 <rt_test_011_010_execute>:
static void rt_test_011_010_execute(void) {
 8003300:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  test_set_step(1);
 8003304:	f8df 8080 	ldr.w	r8, [pc, #128]	; 8003388 <rt_test_011_010_execute+0x88>
      chSemWait(&sem1);
 8003308:	4c1c      	ldr	r4, [pc, #112]	; (800337c <rt_test_011_010_execute+0x7c>)
  test_set_step(1);
 800330a:	2301      	movs	r3, #1
 800330c:	f8c8 3000 	str.w	r3, [r8]
    start = test_wait_tick();
 8003310:	f7ff fdce 	bl	8002eb0 <test_wait_tick>
    n = 0;
 8003314:	2500      	movs	r5, #0
    start = test_wait_tick();
 8003316:	4606      	mov	r6, r0
 8003318:	f04f 4980 	mov.w	r9, #1073741824	; 0x40000000
    } while (chVTIsSystemTimeWithinX(start, end));
 800331c:	f242 770f 	movw	r7, #9999	; 0x270f
      chSemWait(&sem1);
 8003320:	4620      	mov	r0, r4
 8003322:	f7ff ffd5 	bl	80032d0 <chSemWait>
      chSemSignal(&sem1);
 8003326:	4620      	mov	r0, r4
 8003328:	f7fe ff52 	bl	80021d0 <chSemSignal>
      chSemWait(&sem1);
 800332c:	4620      	mov	r0, r4
 800332e:	f7ff ffcf 	bl	80032d0 <chSemWait>
      chSemSignal(&sem1);
 8003332:	4620      	mov	r0, r4
 8003334:	f7fe ff4c 	bl	80021d0 <chSemSignal>
      chSemWait(&sem1);
 8003338:	4620      	mov	r0, r4
 800333a:	f7ff ffc9 	bl	80032d0 <chSemWait>
      chSemSignal(&sem1);
 800333e:	4620      	mov	r0, r4
 8003340:	f7fe ff46 	bl	80021d0 <chSemSignal>
      chSemWait(&sem1);
 8003344:	4620      	mov	r0, r4
 8003346:	f7ff ffc3 	bl	80032d0 <chSemWait>
      chSemSignal(&sem1);
 800334a:	4620      	mov	r0, r4
 800334c:	f7fe ff40 	bl	80021d0 <chSemSignal>
 8003350:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
 8003354:	1b9b      	subs	r3, r3, r6
    } while (chVTIsSystemTimeWithinX(start, end));
 8003356:	42bb      	cmp	r3, r7
      n++;
 8003358:	f105 0501 	add.w	r5, r5, #1
    } while (chVTIsSystemTimeWithinX(start, end));
 800335c:	d9e0      	bls.n	8003320 <rt_test_011_010_execute+0x20>
  test_set_step(2);
 800335e:	2302      	movs	r3, #2
    test_print("--- Score : ");
 8003360:	4807      	ldr	r0, [pc, #28]	; (8003380 <rt_test_011_010_execute+0x80>)
  test_set_step(2);
 8003362:	f8c8 3000 	str.w	r3, [r8]
    test_print("--- Score : ");
 8003366:	f7fd fca3 	bl	8000cb0 <test_print>
    test_printn(n * 4);
 800336a:	00a8      	lsls	r0, r5, #2
 800336c:	f7fd fbd0 	bl	8000b10 <test_printn>
}
 8003370:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    test_println(" wait+signal/S");
 8003374:	4803      	ldr	r0, [pc, #12]	; (8003384 <rt_test_011_010_execute+0x84>)
 8003376:	f7fd bc7b 	b.w	8000c70 <test_println>
 800337a:	bf00      	nop
 800337c:	20000d7c 	.word	0x20000d7c
 8003380:	08009e84 	.word	0x08009e84
 8003384:	08009ea0 	.word	0x08009ea0
 8003388:	2000149c 	.word	0x2000149c
 800338c:	00000000 	.word	0x00000000

08003390 <bmk_thread7>:
static THD_FUNCTION(bmk_thread7, p) {
 8003390:	b538      	push	{r3, r4, r5, lr}
  return ch.rlist.current;
 8003392:	4c08      	ldr	r4, [pc, #32]	; (80033b4 <bmk_thread7+0x24>)
  return (bool)((chThdGetSelfX()->flags & CH_FLAG_TERMINATE) != (tmode_t)0);
 8003394:	69a3      	ldr	r3, [r4, #24]
  while (!chThdShouldTerminateX())
 8003396:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800339a:	075a      	lsls	r2, r3, #29
 800339c:	d408      	bmi.n	80033b0 <bmk_thread7+0x20>
    chSemWait(&sem1);
 800339e:	4d06      	ldr	r5, [pc, #24]	; (80033b8 <bmk_thread7+0x28>)
 80033a0:	4628      	mov	r0, r5
 80033a2:	f7ff ff95 	bl	80032d0 <chSemWait>
 80033a6:	69a3      	ldr	r3, [r4, #24]
  while (!chThdShouldTerminateX())
 80033a8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80033ac:	075b      	lsls	r3, r3, #29
 80033ae:	d5f7      	bpl.n	80033a0 <bmk_thread7+0x10>
}
 80033b0:	bd38      	pop	{r3, r4, r5, pc}
 80033b2:	bf00      	nop
 80033b4:	200009b0 	.word	0x200009b0
 80033b8:	20000d7c 	.word	0x20000d7c
 80033bc:	00000000 	.word	0x00000000

080033c0 <thread3>:
static THD_FUNCTION(thread3, p) {
 80033c0:	b510      	push	{r4, lr}
  chSemWait(&sem1);
 80033c2:	4c04      	ldr	r4, [pc, #16]	; (80033d4 <thread3+0x14>)
 80033c4:	4620      	mov	r0, r4
 80033c6:	f7ff ff83 	bl	80032d0 <chSemWait>
  chSemSignal(&sem1);
 80033ca:	4620      	mov	r0, r4
}
 80033cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  chSemSignal(&sem1);
 80033d0:	f7fe befe 	b.w	80021d0 <chSemSignal>
 80033d4:	20000d70 	.word	0x20000d70
	...

080033e0 <thread1.lto_priv.1>:
static THD_FUNCTION(thread1, p) {
 80033e0:	b510      	push	{r4, lr}
 80033e2:	4604      	mov	r4, r0
  chSemWait(&sem1);
 80033e4:	4803      	ldr	r0, [pc, #12]	; (80033f4 <thread1.lto_priv.1+0x14>)
 80033e6:	f7ff ff73 	bl	80032d0 <chSemWait>
  test_emit_token(*(char *)p);
 80033ea:	7820      	ldrb	r0, [r4, #0]
}
 80033ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  test_emit_token(*(char *)p);
 80033f0:	f7fd bb9e 	b.w	8000b30 <test_emit_token>
 80033f4:	20000d70 	.word	0x20000d70
	...

08003400 <main>:

  /* Reset of all peripherals. AHB3 is not reseted because it could have
     been initialized in the board initialization file (board.c).
     Note, GPIOs are not reset because initialized before this point in
     board files.*/
  rccResetAHB1(~STM32_GPIO_EN_MASK);
 8003400:	4bb5      	ldr	r3, [pc, #724]	; (80036d8 <main+0x2d8>)
  PWR->CR |= PWR_CR_DBP;
 8003402:	48b6      	ldr	r0, [pc, #728]	; (80036dc <main+0x2dc>)
  rccResetAHB1(~STM32_GPIO_EN_MASK);
 8003404:	691a      	ldr	r2, [r3, #16]
 8003406:	ea6f 52c2 	mvn.w	r2, r2, lsl #23
 800340a:	ea6f 52d2 	mvn.w	r2, r2, lsr #23
}

/*
 * Application entry point.
 */
int main(void) {
 800340e:	b580      	push	{r7, lr}
 8003410:	611a      	str	r2, [r3, #16]
 8003412:	691a      	ldr	r2, [r3, #16]
 8003414:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003418:	611a      	str	r2, [r3, #16]
#if !defined(STM32F410xx)
  rccResetAHB2(~0);
 800341a:	f04f 34ff 	mov.w	r4, #4294967295
  rccResetAHB1(~STM32_GPIO_EN_MASK);
 800341e:	691a      	ldr	r2, [r3, #16]
  rccResetAHB2(~0);
 8003420:	695a      	ldr	r2, [r3, #20]
 8003422:	615c      	str	r4, [r3, #20]
 8003424:	2200      	movs	r2, #0
 8003426:	6959      	ldr	r1, [r3, #20]
 8003428:	615a      	str	r2, [r3, #20]
 800342a:	6959      	ldr	r1, [r3, #20]
#endif
  rccResetAPB1(~RCC_APB1RSTR_PWRRST);
 800342c:	6a19      	ldr	r1, [r3, #32]
 800342e:	f061 5180 	orn	r1, r1, #268435456	; 0x10000000
 8003432:	6219      	str	r1, [r3, #32]
 8003434:	6a19      	ldr	r1, [r3, #32]
 8003436:	f001 5180 	and.w	r1, r1, #268435456	; 0x10000000
 800343a:	6219      	str	r1, [r3, #32]
 800343c:	6a19      	ldr	r1, [r3, #32]
  rccResetAPB2(~0);
 800343e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003440:	625c      	str	r4, [r3, #36]	; 0x24
 8003442:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003444:	625a      	str	r2, [r3, #36]	; 0x24
 8003446:	6a59      	ldr	r1, [r3, #36]	; 0x24

  /* PWR clock enabled.*/
  rccEnablePWRInterface(true);
 8003448:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800344a:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 800344e:	6419      	str	r1, [r3, #64]	; 0x40
 8003450:	6e19      	ldr	r1, [r3, #96]	; 0x60
 8003452:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8003456:	6619      	str	r1, [r3, #96]	; 0x60
 8003458:	6e19      	ldr	r1, [r3, #96]	; 0x60
  PWR->CR |= PWR_CR_DBP;
 800345a:	6801      	ldr	r1, [r0, #0]
 800345c:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8003460:	6001      	str	r1, [r0, #0]
  if ((RCC->BDCR & STM32_RTCSEL_MASK) != STM32_RTCSEL) {
 8003462:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8003464:	f401 7140 	and.w	r1, r1, #768	; 0x300
 8003468:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800346c:	b086      	sub	sp, #24
 800346e:	d003      	beq.n	8003478 <main+0x78>
    RCC->BDCR = RCC_BDCR_BDRST;
 8003470:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8003474:	6719      	str	r1, [r3, #112]	; 0x70
    RCC->BDCR = 0;
 8003476:	671a      	str	r2, [r3, #112]	; 0x70
  PWR->CSR &= ~PWR_CSR_BRE;
 8003478:	4c98      	ldr	r4, [pc, #608]	; (80036dc <main+0x2dc>)

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 800347a:	4a99      	ldr	r2, [pc, #612]	; (80036e0 <main+0x2e0>)
 800347c:	6861      	ldr	r1, [r4, #4]
#if !defined(SERIAL_ADVANCED_BUFFERING_SUPPORT) ||                          \
    (SERIAL_ADVANCED_BUFFERING_SUPPORT == FALSE) ||                         \
    defined(__DOXYGEN__)
void sdObjectInit(SerialDriver *sdp, qnotify_t inotify, qnotify_t onotify) {

  sdp->vmt = &vmt;
 800347e:	4d99      	ldr	r5, [pc, #612]	; (80036e4 <main+0x2e4>)
 8003480:	4f99      	ldr	r7, [pc, #612]	; (80036e8 <main+0x2e8>)

#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  /* Free running counter mode.*/

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();
 8003482:	4895      	ldr	r0, [pc, #596]	; (80036d8 <main+0x2d8>)
 8003484:	2360      	movs	r3, #96	; 0x60
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8003486:	2640      	movs	r6, #64	; 0x40
 8003488:	f421 7100 	bic.w	r1, r1, #512	; 0x200
 800348c:	6061      	str	r1, [r4, #4]
 800348e:	f04f 0c80 	mov.w	ip, #128	; 0x80
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8003492:	f882 3306 	strb.w	r3, [r2, #774]	; 0x306
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8003496:	f44f 7180 	mov.w	r1, #256	; 0x100
 800349a:	f8c2 6180 	str.w	r6, [r2, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 800349e:	6016      	str	r6, [r2, #0]
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80034a0:	f44f 7600 	mov.w	r6, #512	; 0x200
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80034a4:	f882 3307 	strb.w	r3, [r2, #775]	; 0x307
 80034a8:	462c      	mov	r4, r5
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80034aa:	f8c2 c180 	str.w	ip, [r2, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 80034ae:	f8c2 c000 	str.w	ip, [r2]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80034b2:	f882 3308 	strb.w	r3, [r2, #776]	; 0x308
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80034b6:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 80034ba:	6011      	str	r1, [r2, #0]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80034bc:	f882 3309 	strb.w	r3, [r2, #777]	; 0x309
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80034c0:	f8c2 6180 	str.w	r6, [r2, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 80034c4:	6016      	str	r6, [r2, #0]
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80034c6:	f44f 6680 	mov.w	r6, #1024	; 0x400
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80034ca:	f882 330a 	strb.w	r3, [r2, #778]	; 0x30a
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80034ce:	f8c2 6180 	str.w	r6, [r2, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 80034d2:	6016      	str	r6, [r2, #0]
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80034d4:	f44f 0600 	mov.w	r6, #8388608	; 0x800000
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80034d8:	f882 3317 	strb.w	r3, [r2, #791]	; 0x317
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80034dc:	f8c2 6180 	str.w	r6, [r2, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 80034e0:	6016      	str	r6, [r2, #0]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80034e2:	f882 3328 	strb.w	r3, [r2, #808]	; 0x328
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80034e6:	f8c2 1184 	str.w	r1, [r2, #388]	; 0x184
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 80034ea:	6051      	str	r1, [r2, #4]
 80034ec:	f844 7b04 	str.w	r7, [r4], #4
  esp->next = (event_listener_t *)esp;
 80034f0:	606c      	str	r4, [r5, #4]
  iqp->q_buffer  = bp;
 80034f2:	f105 0454 	add.w	r4, r5, #84	; 0x54
  iqp->q_counter = 0;
 80034f6:	2100      	movs	r1, #0
  osalEventObjectInit(&sdp->event);
  sdp->state = SD_STOP;
 80034f8:	f04f 0e01 	mov.w	lr, #1
  iqp->q_top     = bp + size;
 80034fc:	f105 0364 	add.w	r3, r5, #100	; 0x64
  iqp->q_wrptr   = bp;
 8003500:	e9c5 4408 	strd	r4, r4, [r5, #32]
  tqp->next = (thread_t *)tqp;
 8003504:	f105 060c 	add.w	r6, r5, #12
  iqp->q_buffer  = bp;
 8003508:	61ac      	str	r4, [r5, #24]
  oqp->q_counter = size;
 800350a:	2410      	movs	r4, #16
  tqp->prev = (thread_t *)tqp;
 800350c:	e9c5 6603 	strd	r6, r6, [r5, #12]
 8003510:	f885 e008 	strb.w	lr, [r5, #8]
  iqp->q_counter = 0;
 8003514:	6169      	str	r1, [r5, #20]
  iqp->q_top     = bp + size;
 8003516:	61eb      	str	r3, [r5, #28]
  oqp->q_counter = size;
 8003518:	63ac      	str	r4, [r5, #56]	; 0x38
 800351a:	6c04      	ldr	r4, [r0, #64]	; 0x40
  oqp->q_buffer  = bp;
 800351c:	63eb      	str	r3, [r5, #60]	; 0x3c
 800351e:	ea44 040e 	orr.w	r4, r4, lr
 8003522:	6404      	str	r4, [r0, #64]	; 0x40
 8003524:	6e04      	ldr	r4, [r0, #96]	; 0x60

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();
 8003526:	4f71      	ldr	r7, [pc, #452]	; (80036ec <main+0x2ec>)
  oqp->q_rdptr   = bp;
 8003528:	64ab      	str	r3, [r5, #72]	; 0x48
  ST_ENABLE_CLOCK();
 800352a:	ea44 040e 	orr.w	r4, r4, lr
 800352e:	6604      	str	r4, [r0, #96]	; 0x60
 8003530:	6e00      	ldr	r0, [r0, #96]	; 0x60
  ST_ENABLE_STOP();
 8003532:	68b8      	ldr	r0, [r7, #8]
  oqp->q_wrptr   = bp;
 8003534:	646b      	str	r3, [r5, #68]	; 0x44
 8003536:	ea40 000e 	orr.w	r0, r0, lr
  iqp->q_notify  = infy;
 800353a:	62a9      	str	r1, [r5, #40]	; 0x28
  iqp->q_link    = link;
 800353c:	62ed      	str	r5, [r5, #44]	; 0x2c
  oqp->q_link    = link;
 800353e:	652d      	str	r5, [r5, #80]	; 0x50
 8003540:	60b8      	str	r0, [r7, #8]

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 8003542:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
  tqp->next = (thread_t *)tqp;
 8003546:	4c6a      	ldr	r4, [pc, #424]	; (80036f0 <main+0x2f0>)
  default_heap.provider = chCoreAllocAlignedWithOffset;
 8003548:	4e6a      	ldr	r6, [pc, #424]	; (80036f4 <main+0x2f4>)
 800354a:	4b6b      	ldr	r3, [pc, #428]	; (80036f8 <main+0x2f8>)
 800354c:	f242 07cf 	movw	r7, #8399	; 0x20cf
 8003550:	6287      	str	r7, [r0, #40]	; 0x28
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
 8003552:	f04f 37ff 	mov.w	r7, #4294967295
 8003556:	62c7      	str	r7, [r0, #44]	; 0x2c
  tqp->prev = (thread_t *)tqp;
 8003558:	6064      	str	r4, [r4, #4]
  STM32_ST_TIM->CCMR1  = 0;
 800355a:	6181      	str	r1, [r0, #24]
  STM32_ST_TIM->CCR[0] = 0;
 800355c:	6341      	str	r1, [r0, #52]	; 0x34
  STM32_ST_TIM->CCR[2] = 0;
#endif
#if ST_LLD_NUM_ALARMS > 3
  STM32_ST_TIM->CCR[3] = 0;
#endif
  STM32_ST_TIM->DIER   = 0;
 800355e:	60c1      	str	r1, [r0, #12]
  STM32_ST_TIM->CR2    = 0;
 8003560:	6041      	str	r1, [r0, #4]
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
 8003562:	f8c0 e014 	str.w	lr, [r0, #20]
  STM32_ST_TIM->CR1    = TIM_CR1_CEN;
 8003566:	f8c0 e000 	str.w	lr, [r0]
  oqp->q_top     = bp + size;
 800356a:	f105 0074 	add.w	r0, r5, #116	; 0x74
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 800356e:	f882 c31c 	strb.w	ip, [r2, #796]	; 0x31c
 8003572:	6428      	str	r0, [r5, #64]	; 0x40
  oqp->q_notify  = onfy;
 8003574:	4861      	ldr	r0, [pc, #388]	; (80036fc <main+0x2fc>)
 8003576:	64e8      	str	r0, [r5, #76]	; 0x4c
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8003578:	f04f 5c80 	mov.w	ip, #268435456	; 0x10000000
  SD1.usart = USART1;
#endif

#if STM32_SERIAL_USE_USART2
  sdObjectInit(&SD2, NULL, notify2);
  SD2.usart = USART2;
 800357c:	4860      	ldr	r0, [pc, #384]	; (8003700 <main+0x300>)
 800357e:	6768      	str	r0, [r5, #116]	; 0x74
 8003580:	f8c2 c180 	str.w	ip, [r2, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8003584:	f8c2 c000 	str.w	ip, [r2]
  tqp->next = (thread_t *)tqp;
 8003588:	f105 0230 	add.w	r2, r5, #48	; 0x30
  tqp->prev = (thread_t *)tqp;
 800358c:	e9c5 220c 	strd	r2, r2, [r5, #48]	; 0x30
 8003590:	4a5c      	ldr	r2, [pc, #368]	; (8003704 <main+0x304>)
  tqp->next = (thread_t *)tqp;
 8003592:	6024      	str	r4, [r4, #0]
  ch.rlist.prio = NOPRIO;
 8003594:	60a1      	str	r1, [r4, #8]
 8003596:	6032      	str	r2, [r6, #0]
 8003598:	f106 020c 	add.w	r2, r6, #12
  tqp->prev = (thread_t *)tqp;
 800359c:	e9c6 2203 	strd	r2, r2, [r6, #12]
  dlp->next = (dyn_element_t *)dlp;
 80035a0:	f103 0210 	add.w	r2, r3, #16
 80035a4:	611a      	str	r2, [r3, #16]
  H_PAGES(&default_heap.header) = 0;
 80035a6:	e9c6 1101 	strd	r1, r1, [r6, #4]
 80035aa:	f103 0224 	add.w	r2, r3, #36	; 0x24
  mp->owner = NULL;
 80035ae:	6171      	str	r1, [r6, #20]
  mp->object_size = size;
 80035b0:	2614      	movs	r6, #20
 80035b2:	619e      	str	r6, [r3, #24]
 80035b4:	625a      	str	r2, [r3, #36]	; 0x24
 80035b6:	f103 0628 	add.w	r6, r3, #40	; 0x28
 80035ba:	221c      	movs	r2, #28
 80035bc:	629e      	str	r6, [r3, #40]	; 0x28
 80035be:	631a      	str	r2, [r3, #48]	; 0x30
 80035c0:	f103 063c 	add.w	r6, r3, #60	; 0x3c
 80035c4:	f103 0240 	add.w	r2, r3, #64	; 0x40
 80035c8:	63de      	str	r6, [r3, #60]	; 0x3c
 80035ca:	641a      	str	r2, [r3, #64]	; 0x40
 80035cc:	f103 0644 	add.w	r6, r3, #68	; 0x44
  ch.vtlist.next = (virtual_timer_t *)&ch.vtlist;
 80035d0:	f104 021c 	add.w	r2, r4, #28
 80035d4:	645e      	str	r6, [r3, #68]	; 0x44
  ch.vtlist.prev = (virtual_timer_t *)&ch.vtlist;
 80035d6:	e9c4 2207 	strd	r2, r2, [r4, #28]
  mp->align = align;
 80035da:	2604      	movs	r6, #4
  mp->provider = provider;
 80035dc:	4a4a      	ldr	r2, [pc, #296]	; (8003708 <main+0x308>)
 80035de:	621a      	str	r2, [r3, #32]
 80035e0:	639a      	str	r2, [r3, #56]	; 0x38
 80035e2:	e9c3 3300 	strd	r3, r3, [r3]
  ch_memcore.basemem = __heap_base__;
 80035e6:	4a49      	ldr	r2, [pc, #292]	; (800370c <main+0x30c>)
 80035e8:	6099      	str	r1, [r3, #8]
  mp->next = NULL;
 80035ea:	6159      	str	r1, [r3, #20]
 80035ec:	62d9      	str	r1, [r3, #44]	; 0x2c
  mp->align = align;
 80035ee:	61de      	str	r6, [r3, #28]
 80035f0:	635e      	str	r6, [r3, #52]	; 0x34
 80035f2:	4847      	ldr	r0, [pc, #284]	; (8003710 <main+0x310>)
  ch_memcore.topmem  = __heap_end__;
 80035f4:	4b47      	ldr	r3, [pc, #284]	; (8003714 <main+0x314>)
  ch.tm.offset = (rtcnt_t)0;
 80035f6:	6761      	str	r1, [r4, #116]	; 0x74
 80035f8:	e9c0 2300 	strd	r2, r3, [r0]
  tmp->cumulative = (rttime_t)0;
 80035fc:	2200      	movs	r2, #0
 80035fe:	2300      	movs	r3, #0
  ch.rlist.older = (thread_t *)&ch.rlist;
 8003600:	e9c4 4404 	strd	r4, r4, [r4, #16]
  ch.vtlist.lasttime = (systime_t)0;
 8003604:	e9c4 7109 	strd	r7, r1, [r4, #36]	; 0x24
  tmp->best       = (rtcnt_t)-1;
 8003608:	9700      	str	r7, [sp, #0]
  tmp->cumulative = (rttime_t)0;
 800360a:	e9cd 2304 	strd	r2, r3, [sp, #16]
  tmp->last       = (rtcnt_t)0;
 800360e:	e9cd 1101 	strd	r1, r1, [sp, #4]
  tmp->n          = (ucnt_t)0;
 8003612:	9103      	str	r1, [sp, #12]
    chTMStartMeasurementX(&tm);
 8003614:	4668      	mov	r0, sp
 8003616:	f7fd fd7b 	bl	8001110 <chTMStartMeasurementX>
    chTMStopMeasurementX(&tm);
 800361a:	4668      	mov	r0, sp
 800361c:	f7fd fd50 	bl	80010c0 <chTMStopMeasurementX>
  } while (i > 0U);
 8003620:	3e01      	subs	r6, #1
 8003622:	d1f7      	bne.n	8003614 <main+0x214>
  ch.tm.offset = tm.best;
 8003624:	9900      	ldr	r1, [sp, #0]
  REG_INSERT(tp);
 8003626:	6962      	ldr	r2, [r4, #20]
 8003628:	4b3b      	ldr	r3, [pc, #236]	; (8003718 <main+0x318>)
 800362a:	6761      	str	r1, [r4, #116]	; 0x74
  tp->prio      = prio;
 800362c:	2180      	movs	r1, #128	; 0x80
 800362e:	63a1      	str	r1, [r4, #56]	; 0x38
  tp->realprio  = prio;
 8003630:	66e1      	str	r1, [r4, #108]	; 0x6c
  tp->name      = name;
 8003632:	483a      	ldr	r0, [pc, #232]	; (800371c <main+0x31c>)
 8003634:	64a0      	str	r0, [r4, #72]	; 0x48
  tp->refs      = (trefs_t)1;
 8003636:	2101      	movs	r1, #1
  REG_INSERT(tp);
 8003638:	e9c4 4210 	strd	r4, r2, [r4, #64]	; 0x40
  tp->epending  = (eventmask_t)0;
 800363c:	e9c4 6619 	strd	r6, r6, [r4, #100]	; 0x64
  tp->flags     = CH_FLAG_MODE_STATIC;
 8003640:	f884 6051 	strb.w	r6, [r4, #81]	; 0x51
  tp->refs      = (trefs_t)1;
 8003644:	f884 1052 	strb.w	r1, [r4, #82]	; 0x52
  tlp->next = (thread_t *)tlp;
 8003648:	f103 0028 	add.w	r0, r3, #40	; 0x28
  REG_INSERT(tp);
 800364c:	6113      	str	r3, [r2, #16]
  tqp->next = (thread_t *)tqp;
 800364e:	f103 022c 	add.w	r2, r3, #44	; 0x2c
  currp = _thread_init(&ch.mainthread, (const char *)&ch_debug, NORMALPRIO);
 8003652:	e9c4 3305 	strd	r3, r3, [r4, #20]
 8003656:	e9c4 0216 	strd	r0, r2, [r4, #88]	; 0x58
  currp->state = CH_STATE_CURRENT;
 800365a:	f884 1050 	strb.w	r1, [r4, #80]	; 0x50
  currp->wabase = NULL;
 800365e:	64e6      	str	r6, [r4, #76]	; 0x4c
  tqp->prev = (thread_t *)tqp;
 8003660:	6622      	str	r2, [r4, #96]	; 0x60
 8003662:	2420      	movs	r4, #32
 8003664:	f384 8811 	msr	BASEPRI, r4
  __ASM volatile ("cpsie i" : : : "memory");
 8003668:	b662      	cpsie	i
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800366a:	4b2d      	ldr	r3, [pc, #180]	; (8003720 <main+0x320>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 800366c:	4a2d      	ldr	r2, [pc, #180]	; (8003724 <main+0x324>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800366e:	68d9      	ldr	r1, [r3, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003670:	f64f 00ff 	movw	r0, #63743	; 0xf8ff
 8003674:	4001      	ands	r1, r0
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8003676:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
  reg_value  =  (reg_value                                   |
 800367a:	430a      	orrs	r2, r1
 800367c:	f6a0 300f 	subw	r0, r0, #2831	; 0xb0f
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
  SCB->AIRCR =  reg_value;
 8003680:	60da      	str	r2, [r3, #12]
 8003682:	68c2      	ldr	r2, [r0, #12]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8003684:	4928      	ldr	r1, [pc, #160]	; (8003728 <main+0x328>)
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8003686:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800368a:	60c2      	str	r2, [r0, #12]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 800368c:	680a      	ldr	r2, [r1, #0]
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800368e:	2010      	movs	r0, #16
 8003690:	f042 0201 	orr.w	r2, r2, #1
 8003694:	600a      	str	r2, [r1, #0]
 8003696:	77d8      	strb	r0, [r3, #31]
 8003698:	f883 4022 	strb.w	r4, [r3, #34]	; 0x22
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 800369c:	f386 8811 	msr	BASEPRI, r6
  __ASM volatile ("cpsie i" : : : "memory");
 80036a0:	b662      	cpsie	i
    (void) chThdCreate(&idle_descriptor);
 80036a2:	4822      	ldr	r0, [pc, #136]	; (800372c <main+0x32c>)
 80036a4:	f7fe fdb4 	bl	8002210 <chThdCreate>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80036a8:	f384 8811 	msr	BASEPRI, r4
void sd_lld_start(SerialDriver *sdp, const SerialConfig *config) {

  if (config == NULL)
    config = &default_config;

  if (sdp->state == SD_STOP) {
 80036ac:	7a2b      	ldrb	r3, [r5, #8]
 80036ae:	2b01      	cmp	r3, #1
 80036b0:	d13e      	bne.n	8003730 <main+0x330>
      nvicEnableVector(STM32_USART1_NUMBER, STM32_SERIAL_USART1_PRIORITY);
    }
#endif
#if STM32_SERIAL_USE_USART2
    if (&SD2 == sdp) {
      rccEnableUSART2(true);
 80036b2:	4b09      	ldr	r3, [pc, #36]	; (80036d8 <main+0x2d8>)
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80036b4:	4a0a      	ldr	r2, [pc, #40]	; (80036e0 <main+0x2e0>)
 80036b6:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80036b8:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 80036bc:	6419      	str	r1, [r3, #64]	; 0x40
 80036be:	6e19      	ldr	r1, [r3, #96]	; 0x60
 80036c0:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 80036c4:	6619      	str	r1, [r3, #96]	; 0x60
 80036c6:	20c0      	movs	r0, #192	; 0xc0
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80036c8:	2140      	movs	r1, #64	; 0x40
 80036ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80036cc:	f882 0326 	strb.w	r0, [r2, #806]	; 0x326
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80036d0:	f8c2 1184 	str.w	r1, [r2, #388]	; 0x184
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 80036d4:	6051      	str	r1, [r2, #4]
 80036d6:	e02b      	b.n	8003730 <main+0x330>
 80036d8:	40023800 	.word	0x40023800
 80036dc:	40007000 	.word	0x40007000
 80036e0:	e000e100 	.word	0xe000e100
 80036e4:	200008e0 	.word	0x200008e0
 80036e8:	0800b64c 	.word	0x0800b64c
 80036ec:	e0042000 	.word	0xe0042000
 80036f0:	200009b0 	.word	0x200009b0
 80036f4:	20000b50 	.word	0x20000b50
 80036f8:	20000a28 	.word	0x20000a28
 80036fc:	08000591 	.word	0x08000591
 8003700:	40004400 	.word	0x40004400
 8003704:	08000551 	.word	0x08000551
 8003708:	08000e01 	.word	0x08000e01
 800370c:	20001ce0 	.word	0x20001ce0
 8003710:	20000b48 	.word	0x20000b48
 8003714:	20020000 	.word	0x20020000
 8003718:	200009e0 	.word	0x200009e0
 800371c:	0800aec0 	.word	0x0800aec0
 8003720:	e000ed00 	.word	0xe000ed00
 8003724:	05fa0300 	.word	0x05fa0300
 8003728:	e0001000 	.word	0xe0001000
 800372c:	0800aee4 	.word	0x0800aee4
  USART_TypeDef *u = sdp->usart;
 8003730:	6f6b      	ldr	r3, [r5, #116]	; 0x74
  if ((sdp->usart == USART1) || (sdp->usart == USART6))
 8003732:	4a23      	ldr	r2, [pc, #140]	; (80037c0 <main+0x3c0>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d03f      	beq.n	80037b8 <main+0x3b8>
 8003738:	4822      	ldr	r0, [pc, #136]	; (80037c4 <main+0x3c4>)
    fck = STM32_PCLK2 / config->speed;
 800373a:	f240 4245 	movw	r2, #1093	; 0x445
 800373e:	f640 018b 	movw	r1, #2187	; 0x88b
 8003742:	4283      	cmp	r3, r0
 8003744:	bf08      	it	eq
 8003746:	460a      	moveq	r2, r1
  u->BRR = fck;
 8003748:	609a      	str	r2, [r3, #8]
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 800374a:	2440      	movs	r4, #64	; 0x40
  u->CR3 = config->cr3 | USART_CR3_EIE;
 800374c:	2001      	movs	r0, #1
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
 800374e:	f242 112c 	movw	r1, #8492	; 0x212c
  u->SR = 0;
 8003752:	2200      	movs	r2, #0
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 8003754:	611c      	str	r4, [r3, #16]
  u->CR3 = config->cr3 | USART_CR3_EIE;
 8003756:	6158      	str	r0, [r3, #20]
    sdp->rxmask = 0xFF;
 8003758:	24ff      	movs	r4, #255	; 0xff
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
 800375a:	60d9      	str	r1, [r3, #12]
  u->SR = 0;
 800375c:	601a      	str	r2, [r3, #0]

  osalSysLock();
  osalDbgAssert((sdp->state == SD_STOP) || (sdp->state == SD_READY),
                "invalid state");
  sd_lld_start(sdp, config);
  sdp->state = SD_READY;
 800375e:	2102      	movs	r1, #2
  (void)u->SR;  /* SR reset step 1.*/
 8003760:	6818      	ldr	r0, [r3, #0]
  (void)u->DR;  /* SR reset step 2.*/
 8003762:	685b      	ldr	r3, [r3, #4]
    sdp->rxmask = 0xFF;
 8003764:	f885 4078 	strb.w	r4, [r5, #120]	; 0x78
 8003768:	7229      	strb	r1, [r5, #8]
 800376a:	f382 8811 	msr	BASEPRI, r2
	/*
	 * Activates the serial driver 2 using the driver default configuration.
	 * PA2(TX) and PA3(RX) are routed to USART2.
	 */
	sdStart(&SD2, NULL);
	palSetPadMode(GPIOA, 2, PAL_MODE_ALTERNATE(7));
 800376e:	2004      	movs	r0, #4
 8003770:	f7fc fe56 	bl	8000420 <_pal_lld_setgroupmode.constprop.0>
	palSetPadMode(GPIOA, 3, PAL_MODE_ALTERNATE(7));
 8003774:	2008      	movs	r0, #8
 8003776:	f7fc fe53 	bl	8000420 <_pal_lld_setgroupmode.constprop.0>

	/*
	 * Creates the example thread.
	 */
	trg.threadp = chThdCreateStatic(waThread2, sizeof(waThread2), HIGHPRIO, Thread2, (void *) &trg);
 800377a:	4621      	mov	r1, r4
 800377c:	4a12      	ldr	r2, [pc, #72]	; (80037c8 <main+0x3c8>)
 800377e:	4813      	ldr	r0, [pc, #76]	; (80037cc <main+0x3cc>)
	/*
	 * Normal main() thread activity, in this demo it does nothing except
	 * sleeping in a loop and check the button state.
	 */
	while (true) {
		if (palReadPad(GPIOA, GPIOA_BUTTON)) {
 8003780:	4d13      	ldr	r5, [pc, #76]	; (80037d0 <main+0x3d0>)
			test_execute((BaseSequentialStream*) &SD2, &rt_test_suite);
 8003782:	4c14      	ldr	r4, [pc, #80]	; (80037d4 <main+0x3d4>)
			test_execute((BaseSequentialStream*) &SD2, &oslib_test_suite);
 8003784:	4e14      	ldr	r6, [pc, #80]	; (80037d8 <main+0x3d8>)
	trg.threadp = chThdCreateStatic(waThread2, sizeof(waThread2), HIGHPRIO, Thread2, (void *) &trg);
 8003786:	466b      	mov	r3, sp
 8003788:	f7fe fc6a 	bl	8002060 <chThdCreateStatic.constprop.0>
 800378c:	4601      	mov	r1, r0
 800378e:	9100      	str	r1, [sp, #0]
	chThdCreateStatic(waThread1, sizeof(waThread1), NORMALPRIO, Thread1, (void *) &trg);
 8003790:	4a12      	ldr	r2, [pc, #72]	; (80037dc <main+0x3dc>)
 8003792:	4813      	ldr	r0, [pc, #76]	; (80037e0 <main+0x3e0>)
 8003794:	466b      	mov	r3, sp
 8003796:	2180      	movs	r1, #128	; 0x80
 8003798:	f7fe fc62 	bl	8002060 <chThdCreateStatic.constprop.0>
		if (palReadPad(GPIOA, GPIOA_BUTTON)) {
 800379c:	692b      	ldr	r3, [r5, #16]
 800379e:	07db      	lsls	r3, r3, #31
			test_execute((BaseSequentialStream*) &SD2, &rt_test_suite);
 80037a0:	4620      	mov	r0, r4
		if (palReadPad(GPIOA, GPIOA_BUTTON)) {
 80037a2:	d504      	bpl.n	80037ae <main+0x3ae>
			test_execute((BaseSequentialStream*) &SD2, &rt_test_suite);
 80037a4:	f7ff f8cc 	bl	8002940 <test_execute.constprop.0>
			test_execute((BaseSequentialStream*) &SD2, &oslib_test_suite);
 80037a8:	4630      	mov	r0, r6
 80037aa:	f7ff f8c9 	bl	8002940 <test_execute.constprop.0>
		}
		chThdSleepMilliseconds(500);
 80037ae:	f241 3088 	movw	r0, #5000	; 0x1388
 80037b2:	f7ff f8b5 	bl	8002920 <chThdSleep>
	while (true) {
 80037b6:	e7f1      	b.n	800379c <main+0x39c>
    fck = STM32_PCLK2 / config->speed;
 80037b8:	f640 028b 	movw	r2, #2187	; 0x88b
 80037bc:	e7c4      	b.n	8003748 <main+0x348>
 80037be:	bf00      	nop
 80037c0:	40011000 	.word	0x40011000
 80037c4:	40011400 	.word	0x40011400
 80037c8:	08002da1 	.word	0x08002da1
 80037cc:	20001b98 	.word	0x20001b98
 80037d0:	40020000 	.word	0x40020000
 80037d4:	0800b614 	.word	0x0800b614
 80037d8:	0800b120 	.word	0x0800b120
 80037dc:	08002101 	.word	0x08002101
 80037e0:	20001a50 	.word	0x20001a50
	...

080037f0 <SVC_Handler>:
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 80037f0:	f3ef 8309 	mrs	r3, PSP
    psp += sizeof (struct port_extctx);
 80037f4:	3320      	adds	r3, #32
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 80037f6:	f383 8809 	msr	PSP, r3
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80037fa:	2300      	movs	r3, #0
 80037fc:	f383 8811 	msr	BASEPRI, r3
}
 8003800:	4770      	bx	lr
 8003802:	bf00      	nop
	...

08003810 <chThdExit>:
void chThdExit(msg_t msg) {
 8003810:	b538      	push	{r3, r4, r5, lr}
 8003812:	2220      	movs	r2, #32
 8003814:	4603      	mov	r3, r0
 8003816:	f382 8811 	msr	BASEPRI, r2
  thread_t *tp = currp;
 800381a:	4a0f      	ldr	r2, [pc, #60]	; (8003858 <chThdExit+0x48>)
 800381c:	6994      	ldr	r4, [r2, #24]
  return (bool)(tlp->next != (thread_t *)tlp);
 800381e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  tp->u.exitcode = msg;
 8003820:	6263      	str	r3, [r4, #36]	; 0x24
  while (list_notempty(&tp->waiting)) {
 8003822:	f104 0528 	add.w	r5, r4, #40	; 0x28
 8003826:	42a8      	cmp	r0, r5
 8003828:	d006      	beq.n	8003838 <chThdExit+0x28>
  tlp->next = tp->queue.next;
 800382a:	6803      	ldr	r3, [r0, #0]
 800382c:	62a3      	str	r3, [r4, #40]	; 0x28
    (void) chSchReadyI(list_remove(&tp->waiting));
 800382e:	f7fd fcef 	bl	8001210 <chSchReadyI>
  return (bool)(tlp->next != (thread_t *)tlp);
 8003832:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  while (list_notempty(&tp->waiting)) {
 8003834:	42a8      	cmp	r0, r5
 8003836:	d1f8      	bne.n	800382a <chThdExit+0x1a>
  if ((tp->refs == (trefs_t)0) &&
 8003838:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 800383c:	b93b      	cbnz	r3, 800384e <chThdExit+0x3e>
 800383e:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 8003842:	079b      	lsls	r3, r3, #30
 8003844:	d103      	bne.n	800384e <chThdExit+0x3e>
    REG_REMOVE(tp);
 8003846:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800384a:	6113      	str	r3, [r2, #16]
 800384c:	615a      	str	r2, [r3, #20]
}
 800384e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  chSchGoSleepS(CH_STATE_FINAL);
 8003852:	200f      	movs	r0, #15
 8003854:	f7fe bcec 	b.w	8002230 <chSchGoSleepS>
 8003858:	200009b0 	.word	0x200009b0
 800385c:	00000000 	.word	0x00000000

08003860 <Thread1.lto_priv.1>:

static THD_WORKING_AREA(waThread1, 256);
static THD_FUNCTION(Thread1, arg) {
 8003860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  (void)arg;

  exit_flag = false;
 8003862:	4f10      	ldr	r7, [pc, #64]	; (80038a4 <Thread1.lto_priv.1+0x44>)
 8003864:	2500      	movs	r5, #0
 8003866:	703d      	strb	r5, [r7, #0]
 8003868:	2620      	movs	r6, #32
 800386a:	f386 8811 	msr	BASEPRI, r6
  tp = chMsgWaitS();
 800386e:	f7ff fb7f 	bl	8002f70 <chMsgWaitS>
 8003872:	4604      	mov	r4, r0
 8003874:	f385 8811 	msr	BASEPRI, r5
  thread_t *tp;
  const call_message_t *cmp;
  msg_t ret;

  tp = chMsgWait();
  cmp = (const call_message_t *)chMsgGet(tp);
 8003878:	6a43      	ldr	r3, [r0, #36]	; 0x24
  ret = cmp->veneer(cmp->argsp);
 800387a:	e9d3 2000 	ldrd	r2, r0, [r3]
 800387e:	4790      	blx	r2
 8003880:	4601      	mov	r1, r0
 8003882:	f386 8811 	msr	BASEPRI, r6
  chSchWakeupS(tp, msg);
 8003886:	4620      	mov	r0, r4
 8003888:	f7fe fbba 	bl	8002000 <chSchWakeupS>
 800388c:	f385 8811 	msr	BASEPRI, r5
  do {
    chDelegateDispatch();
  } while (!exit_flag);
 8003890:	783b      	ldrb	r3, [r7, #0]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d0e9      	beq.n	800386a <Thread1.lto_priv.1+0xa>

  chThdExit(0x0FA5);
}
 8003896:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  chThdExit(0x0FA5);
 800389a:	f640 70a5 	movw	r0, #4005	; 0xfa5
 800389e:	f7ff bfb7 	b.w	8003810 <chThdExit>
 80038a2:	bf00      	nop
 80038a4:	20000b6c 	.word	0x20000b6c
	...

080038b0 <bmk_thread3>:
  chThdExit((msg_t)p);
 80038b0:	f7ff bfae 	b.w	8003810 <chThdExit>
	...

080038c0 <chSchDoReschedule>:
 *          itself.
 *
 * @special
 */
void chSchDoRescheduleAhead(void) {
  thread_t *otp = currp;
 80038c0:	4a0d      	ldr	r2, [pc, #52]	; (80038f8 <chSchDoReschedule+0x38>)
  thread_t *tp = tqp->next;
 80038c2:	6810      	ldr	r0, [r2, #0]
 80038c4:	6991      	ldr	r1, [r2, #24]
  tqp->next             = tp->queue.next;
 80038c6:	6803      	ldr	r3, [r0, #0]
void chSchDoRescheduleAhead(void) {
 80038c8:	b430      	push	{r4, r5}

  /* Picks the first thread from the ready queue and makes it current.*/
  currp = queue_fifo_remove(&ch.rlist.queue);
  currp->state = CH_STATE_CURRENT;
 80038ca:	2401      	movs	r4, #1
  tqp->next->queue.prev = (thread_t *)tqp;
 80038cc:	605a      	str	r2, [r3, #4]
  tp->state = CH_STATE_READY;
 80038ce:	2500      	movs	r5, #0
  currp->state = CH_STATE_CURRENT;
 80038d0:	f880 4020 	strb.w	r4, [r0, #32]

  /* Handling idle-leave hook.*/
  if (otp->prio == IDLEPRIO) {
 80038d4:	688c      	ldr	r4, [r1, #8]
  tqp->next             = tp->queue.next;
 80038d6:	6013      	str	r3, [r2, #0]
  currp = queue_fifo_remove(&ch.rlist.queue);
 80038d8:	6190      	str	r0, [r2, #24]
  tp->state = CH_STATE_READY;
 80038da:	f881 5020 	strb.w	r5, [r1, #32]
  cp = (thread_t *)&ch.rlist.queue;
 80038de:	e000      	b.n	80038e2 <chSchDoReschedule+0x22>
 80038e0:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio > tp->prio);
 80038e2:	689a      	ldr	r2, [r3, #8]
 80038e4:	4294      	cmp	r4, r2
 80038e6:	d3fb      	bcc.n	80038e0 <chSchDoReschedule+0x20>
  tp->queue.prev             = cp->queue.prev;
 80038e8:	685a      	ldr	r2, [r3, #4]
  /* Placing in ready list ahead of peers.*/
  otp = chSchReadyAheadI(otp);

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
}
 80038ea:	bc30      	pop	{r4, r5}
  tp->queue.prev             = cp->queue.prev;
 80038ec:	e9c1 3200 	strd	r3, r2, [r1]
  tp->queue.prev->queue.next = tp;
 80038f0:	6011      	str	r1, [r2, #0]
  cp->queue.prev             = tp;
 80038f2:	6059      	str	r1, [r3, #4]
  chSysSwitch(currp, otp);
 80038f4:	f7fc bce4 	b.w	80002c0 <_port_switch>
 80038f8:	200009b0 	.word	0x200009b0
 80038fc:	00000000 	.word	0x00000000

08003900 <chSchRescheduleS>:
  return firstprio(&ch.rlist.queue) > currp->prio;
 8003900:	4b04      	ldr	r3, [pc, #16]	; (8003914 <chSchRescheduleS+0x14>)
 8003902:	681a      	ldr	r2, [r3, #0]
 8003904:	699b      	ldr	r3, [r3, #24]
  if (chSchIsRescRequiredI()) {
 8003906:	6892      	ldr	r2, [r2, #8]
 8003908:	689b      	ldr	r3, [r3, #8]
 800390a:	429a      	cmp	r2, r3
 800390c:	d800      	bhi.n	8003910 <chSchRescheduleS+0x10>
}
 800390e:	4770      	bx	lr
    chSchDoRescheduleAhead();
 8003910:	f7ff bfd6 	b.w	80038c0 <chSchDoReschedule>
 8003914:	200009b0 	.word	0x200009b0
	...

08003920 <chSemResetWithMessage.constprop.0>:
void chSemResetWithMessage(semaphore_t *sp, cnt_t n, msg_t msg) {
 8003920:	b570      	push	{r4, r5, r6, lr}
 8003922:	2320      	movs	r3, #32
 8003924:	f383 8811 	msr	BASEPRI, r3
  cnt = sp->cnt;
 8003928:	6885      	ldr	r5, [r0, #8]
  sp->cnt = n;
 800392a:	6081      	str	r1, [r0, #8]
  while (++cnt <= (cnt_t)0) {
 800392c:	3501      	adds	r5, #1
 800392e:	2d00      	cmp	r5, #0
 8003930:	dc0c      	bgt.n	800394c <chSemResetWithMessage.constprop.0+0x2c>
 8003932:	4604      	mov	r4, r0
    chSchReadyI(queue_lifo_remove(&sp->queue))->u.rdymsg = msg;
 8003934:	f06f 0601 	mvn.w	r6, #1
  thread_t *tp = tqp->prev;
 8003938:	6860      	ldr	r0, [r4, #4]
  tqp->prev             = tp->queue.prev;
 800393a:	6843      	ldr	r3, [r0, #4]
 800393c:	6063      	str	r3, [r4, #4]
  tqp->prev->queue.next = (thread_t *)tqp;
 800393e:	601c      	str	r4, [r3, #0]
 8003940:	f7fd fc66 	bl	8001210 <chSchReadyI>
  while (++cnt <= (cnt_t)0) {
 8003944:	3501      	adds	r5, #1
 8003946:	2d01      	cmp	r5, #1
    chSchReadyI(queue_lifo_remove(&sp->queue))->u.rdymsg = msg;
 8003948:	6246      	str	r6, [r0, #36]	; 0x24
  while (++cnt <= (cnt_t)0) {
 800394a:	d1f5      	bne.n	8003938 <chSemResetWithMessage.constprop.0+0x18>
  chSchRescheduleS();
 800394c:	f7ff ffd8 	bl	8003900 <chSchRescheduleS>
 8003950:	2300      	movs	r3, #0
 8003952:	f383 8811 	msr	BASEPRI, r3
}
 8003956:	bd70      	pop	{r4, r5, r6, pc}
	...

08003960 <rt_test_006_001_execute>:
static void rt_test_006_001_execute(void) {
 8003960:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    msg = chSemWait(&sem1);
 8003964:	4c2a      	ldr	r4, [pc, #168]	; (8003a10 <rt_test_006_001_execute+0xb0>)
  test_set_step(1);
 8003966:	4f2b      	ldr	r7, [pc, #172]	; (8003a14 <rt_test_006_001_execute+0xb4>)
 8003968:	2301      	movs	r3, #1
    msg = chSemWait(&sem1);
 800396a:	4620      	mov	r0, r4
  test_set_step(1);
 800396c:	603b      	str	r3, [r7, #0]
    msg = chSemWait(&sem1);
 800396e:	f7ff fcaf 	bl	80032d0 <chSemWait>
 8003972:	2620      	movs	r6, #32
 8003974:	4605      	mov	r5, r0
 8003976:	f386 8811 	msr	BASEPRI, r6
    test_assert_lock(chSemGetCounterI(&sem1) == 0, "wrong counter value");
 800397a:	68a0      	ldr	r0, [r4, #8]
 800397c:	4926      	ldr	r1, [pc, #152]	; (8003a18 <rt_test_006_001_execute+0xb8>)
 800397e:	fab0 f080 	clz	r0, r0
 8003982:	0940      	lsrs	r0, r0, #5
 8003984:	f7fd f82c 	bl	80009e0 <_test_assert>
 8003988:	b120      	cbz	r0, 8003994 <rt_test_006_001_execute+0x34>
 800398a:	2300      	movs	r3, #0
 800398c:	f383 8811 	msr	BASEPRI, r3
}
 8003990:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003994:	f380 8811 	msr	BASEPRI, r0
    test_assert(MSG_OK == msg, "wrong returned message");
 8003998:	fab5 f085 	clz	r0, r5
 800399c:	491f      	ldr	r1, [pc, #124]	; (8003a1c <rt_test_006_001_execute+0xbc>)
 800399e:	0940      	lsrs	r0, r0, #5
 80039a0:	f7fd f81e 	bl	80009e0 <_test_assert>
 80039a4:	4605      	mov	r5, r0
 80039a6:	2800      	cmp	r0, #0
 80039a8:	d1f2      	bne.n	8003990 <rt_test_006_001_execute+0x30>
  test_set_step(2);
 80039aa:	f04f 0902 	mov.w	r9, #2
    chSemSignal(&sem1);
 80039ae:	4620      	mov	r0, r4
  test_set_step(2);
 80039b0:	f8c7 9000 	str.w	r9, [r7]
    chSemSignal(&sem1);
 80039b4:	f7fe fc0c 	bl	80021d0 <chSemSignal>
 80039b8:	f386 8811 	msr	BASEPRI, r6
    test_assert_lock(chSemGetCounterI(&sem1) == 1, "wrong counter value");
 80039bc:	68a0      	ldr	r0, [r4, #8]
 80039be:	4916      	ldr	r1, [pc, #88]	; (8003a18 <rt_test_006_001_execute+0xb8>)
 80039c0:	f1a0 0001 	sub.w	r0, r0, #1
 80039c4:	fab0 f080 	clz	r0, r0
 80039c8:	0940      	lsrs	r0, r0, #5
 80039ca:	f7fd f809 	bl	80009e0 <_test_assert>
 80039ce:	4680      	mov	r8, r0
 80039d0:	b118      	cbz	r0, 80039da <rt_test_006_001_execute+0x7a>
 80039d2:	f385 8811 	msr	BASEPRI, r5
}
 80039d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80039da:	f380 8811 	msr	BASEPRI, r0
  test_set_step(3);
 80039de:	2303      	movs	r3, #3
  chSemResetWithMessage(sp, n, MSG_RESET);
 80039e0:	4649      	mov	r1, r9
 80039e2:	4620      	mov	r0, r4
 80039e4:	603b      	str	r3, [r7, #0]
 80039e6:	f7ff ff9b 	bl	8003920 <chSemResetWithMessage.constprop.0>
 80039ea:	f386 8811 	msr	BASEPRI, r6
    test_assert_lock(chSemGetCounterI(&sem1) == 2, "wrong counter value");
 80039ee:	68a0      	ldr	r0, [r4, #8]
 80039f0:	4909      	ldr	r1, [pc, #36]	; (8003a18 <rt_test_006_001_execute+0xb8>)
 80039f2:	f1a0 0002 	sub.w	r0, r0, #2
 80039f6:	fab0 f080 	clz	r0, r0
 80039fa:	0940      	lsrs	r0, r0, #5
 80039fc:	f7fc fff0 	bl	80009e0 <_test_assert>
 8003a00:	b910      	cbnz	r0, 8003a08 <rt_test_006_001_execute+0xa8>
 8003a02:	f380 8811 	msr	BASEPRI, r0
  test_end_step(3);
 8003a06:	e7c3      	b.n	8003990 <rt_test_006_001_execute+0x30>
 8003a08:	f388 8811 	msr	BASEPRI, r8
    test_assert_lock(chSemGetCounterI(&sem1) == 2, "wrong counter value");
 8003a0c:	e7c0      	b.n	8003990 <rt_test_006_001_execute+0x30>
 8003a0e:	bf00      	nop
 8003a10:	20000d70 	.word	0x20000d70
 8003a14:	2000149c 	.word	0x2000149c
 8003a18:	08009eb0 	.word	0x08009eb0
 8003a1c:	08009ec4 	.word	0x08009ec4

08003a20 <rt_test_006_001_teardown>:
 8003a20:	4801      	ldr	r0, [pc, #4]	; (8003a28 <rt_test_006_001_teardown+0x8>)
 8003a22:	2100      	movs	r1, #0
 8003a24:	f7ff bf7c 	b.w	8003920 <chSemResetWithMessage.constprop.0>
 8003a28:	20000d70 	.word	0x20000d70
 8003a2c:	00000000 	.word	0x00000000

08003a30 <chSemSignalWait.constprop.0>:
 *                      semaphore has been signaled.
 * @retval MSG_RESET    if the semaphore has been reset using @p chSemReset().
 *
 * @api
 */
msg_t chSemSignalWait(semaphore_t *sps, semaphore_t *spw) {
 8003a30:	b538      	push	{r3, r4, r5, lr}
 8003a32:	2320      	movs	r3, #32
 8003a34:	f383 8811 	msr	BASEPRI, r3
              ((sps->cnt < (cnt_t)0) && queue_notempty(&sps->queue)),
              "inconsistent semaphore");
  chDbgAssert(((spw->cnt >= (cnt_t)0) && queue_isempty(&spw->queue)) ||
              ((spw->cnt < (cnt_t)0) && queue_notempty(&spw->queue)),
              "inconsistent semaphore");
  if (++sps->cnt <= (cnt_t)0) {
 8003a38:	4c15      	ldr	r4, [pc, #84]	; (8003a90 <chSemSignalWait.constprop.0+0x60>)
 8003a3a:	68a3      	ldr	r3, [r4, #8]
 8003a3c:	1c5a      	adds	r2, r3, #1
 8003a3e:	2a00      	cmp	r2, #0
 8003a40:	60a2      	str	r2, [r4, #8]
 8003a42:	dd19      	ble.n	8003a78 <chSemSignalWait.constprop.0+0x48>
    chSchReadyI(queue_fifo_remove(&sps->queue))->u.rdymsg = MSG_OK;
  }
  if (--spw->cnt < (cnt_t)0) {
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	60a3      	str	r3, [r4, #8]
 8003a48:	db06      	blt.n	8003a58 <chSemSignalWait.constprop.0+0x28>
    ctp->u.wtsemp = spw;
    chSchGoSleepS(CH_STATE_WTSEM);
    msg = ctp->u.rdymsg;
  }
  else {
    chSchRescheduleS();
 8003a4a:	f7ff ff59 	bl	8003900 <chSchRescheduleS>
    msg = MSG_OK;
 8003a4e:	2000      	movs	r0, #0
 8003a50:	2300      	movs	r3, #0
 8003a52:	f383 8811 	msr	BASEPRI, r3
  }
  chSysUnlock();

  return msg;
}
 8003a56:	bd38      	pop	{r3, r4, r5, pc}
    thread_t *ctp = currp;
 8003a58:	4a0e      	ldr	r2, [pc, #56]	; (8003a94 <chSemSignalWait.constprop.0+0x64>)
  tp->queue.prev             = tqp->prev;
 8003a5a:	6863      	ldr	r3, [r4, #4]
 8003a5c:	6995      	ldr	r5, [r2, #24]
    chSchGoSleepS(CH_STATE_WTSEM);
 8003a5e:	2005      	movs	r0, #5
 8003a60:	e9c5 4300 	strd	r4, r3, [r5]
  tp->queue.prev->queue.next = tp;
 8003a64:	601d      	str	r5, [r3, #0]
    ctp->u.wtsemp = spw;
 8003a66:	626c      	str	r4, [r5, #36]	; 0x24
  tqp->prev                  = tp;
 8003a68:	6065      	str	r5, [r4, #4]
    chSchGoSleepS(CH_STATE_WTSEM);
 8003a6a:	f7fe fbe1 	bl	8002230 <chSchGoSleepS>
    msg = ctp->u.rdymsg;
 8003a6e:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8003a70:	2300      	movs	r3, #0
 8003a72:	f383 8811 	msr	BASEPRI, r3
}
 8003a76:	bd38      	pop	{r3, r4, r5, pc}
  thread_t *tp = tqp->next;
 8003a78:	6820      	ldr	r0, [r4, #0]
  tqp->next             = tp->queue.next;
 8003a7a:	6803      	ldr	r3, [r0, #0]
 8003a7c:	6023      	str	r3, [r4, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 8003a7e:	605c      	str	r4, [r3, #4]
    chSchReadyI(queue_fifo_remove(&sps->queue))->u.rdymsg = MSG_OK;
 8003a80:	f7fd fbc6 	bl	8001210 <chSchReadyI>
 8003a84:	68a3      	ldr	r3, [r4, #8]
 8003a86:	2200      	movs	r2, #0
 8003a88:	6242      	str	r2, [r0, #36]	; 0x24
 8003a8a:	3b01      	subs	r3, #1
 8003a8c:	e7da      	b.n	8003a44 <chSemSignalWait.constprop.0+0x14>
 8003a8e:	bf00      	nop
 8003a90:	20000d70 	.word	0x20000d70
 8003a94:	200009b0 	.word	0x200009b0
	...

08003aa0 <rt_test_006_005_execute>:

static void rt_test_006_005_teardown(void) {
  test_wait_threads();
}

static void rt_test_006_005_execute(void) {
 8003aa0:	b538      	push	{r3, r4, r5, lr}
  return ch.rlist.current;
 8003aa2:	4b1e      	ldr	r3, [pc, #120]	; (8003b1c <rt_test_006_005_execute+0x7c>)

  /* [6.5.1] An higher priority thread is created that performs
     non-atomical wait and signal operations on a semaphore.*/
  test_set_step(1);
 8003aa4:	4d1e      	ldr	r5, [pc, #120]	; (8003b20 <rt_test_006_005_execute+0x80>)
  return chThdGetSelfX()->prio;
 8003aa6:	699b      	ldr	r3, [r3, #24]
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread3, 0);
 8003aa8:	4a1e      	ldr	r2, [pc, #120]	; (8003b24 <rt_test_006_005_execute+0x84>)
 8003aaa:	6899      	ldr	r1, [r3, #8]
 8003aac:	481e      	ldr	r0, [pc, #120]	; (8003b28 <rt_test_006_005_execute+0x88>)
  return (bool)(tqp->next == (const thread_t *)tqp);
 8003aae:	4c1f      	ldr	r4, [pc, #124]	; (8003b2c <rt_test_006_005_execute+0x8c>)
  test_set_step(1);
 8003ab0:	2301      	movs	r3, #1
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread3, 0);
 8003ab2:	3101      	adds	r1, #1
  test_set_step(1);
 8003ab4:	602b      	str	r3, [r5, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread3, 0);
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	f7fe fad2 	bl	8002060 <chThdCreateStatic.constprop.0>
 8003abc:	4a1c      	ldr	r2, [pc, #112]	; (8003b30 <rt_test_006_005_execute+0x90>)
  test_end_step(1);

  /* [6.5.2] The function chSemSignalWait() is invoked by specifying
     the same semaphore for the wait and signal phases. The counter
     value must be one on exit.*/
  test_set_step(2);
 8003abe:	2302      	movs	r3, #2
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread3, 0);
 8003ac0:	6010      	str	r0, [r2, #0]
  test_set_step(2);
 8003ac2:	602b      	str	r3, [r5, #0]
  {
    chSemSignalWait(&sem1, &sem1);
 8003ac4:	f7ff ffb4 	bl	8003a30 <chSemSignalWait.constprop.0>
 8003ac8:	6820      	ldr	r0, [r4, #0]
    test_assert(queue_isempty(&sem1.queue), "queue not empty");
 8003aca:	491a      	ldr	r1, [pc, #104]	; (8003b34 <rt_test_006_005_execute+0x94>)
 8003acc:	1b00      	subs	r0, r0, r4
 8003ace:	fab0 f080 	clz	r0, r0
 8003ad2:	0940      	lsrs	r0, r0, #5
 8003ad4:	f7fc ff84 	bl	80009e0 <_test_assert>
 8003ad8:	b100      	cbz	r0, 8003adc <rt_test_006_005_execute+0x3c>
    chSemSignalWait(&sem1, &sem1);
    test_assert(queue_isempty(&sem1.queue), "queue not empty");
    test_assert(sem1.cnt == 0, "counter not zero");
  }
  test_end_step(3);
}
 8003ada:	bd38      	pop	{r3, r4, r5, pc}
    test_assert(sem1.cnt == 0, "counter not zero");
 8003adc:	68a0      	ldr	r0, [r4, #8]
 8003ade:	4916      	ldr	r1, [pc, #88]	; (8003b38 <rt_test_006_005_execute+0x98>)
 8003ae0:	fab0 f080 	clz	r0, r0
 8003ae4:	0940      	lsrs	r0, r0, #5
 8003ae6:	f7fc ff7b 	bl	80009e0 <_test_assert>
 8003aea:	2800      	cmp	r0, #0
 8003aec:	d1f5      	bne.n	8003ada <rt_test_006_005_execute+0x3a>
  test_set_step(3);
 8003aee:	2303      	movs	r3, #3
 8003af0:	602b      	str	r3, [r5, #0]
    chSemSignalWait(&sem1, &sem1);
 8003af2:	f7ff ff9d 	bl	8003a30 <chSemSignalWait.constprop.0>
 8003af6:	6820      	ldr	r0, [r4, #0]
    test_assert(queue_isempty(&sem1.queue), "queue not empty");
 8003af8:	490e      	ldr	r1, [pc, #56]	; (8003b34 <rt_test_006_005_execute+0x94>)
 8003afa:	1b00      	subs	r0, r0, r4
 8003afc:	fab0 f080 	clz	r0, r0
 8003b00:	0940      	lsrs	r0, r0, #5
 8003b02:	f7fc ff6d 	bl	80009e0 <_test_assert>
 8003b06:	2800      	cmp	r0, #0
 8003b08:	d1e7      	bne.n	8003ada <rt_test_006_005_execute+0x3a>
    test_assert(sem1.cnt == 0, "counter not zero");
 8003b0a:	68a0      	ldr	r0, [r4, #8]
 8003b0c:	490a      	ldr	r1, [pc, #40]	; (8003b38 <rt_test_006_005_execute+0x98>)
 8003b0e:	fab0 f080 	clz	r0, r0
}
 8003b12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    test_assert(sem1.cnt == 0, "counter not zero");
 8003b16:	0940      	lsrs	r0, r0, #5
 8003b18:	f7fc bf62 	b.w	80009e0 <_test_assert>
 8003b1c:	200009b0 	.word	0x200009b0
 8003b20:	2000149c 	.word	0x2000149c
 8003b24:	080033c1 	.word	0x080033c1
 8003b28:	20000d88 	.word	0x20000d88
 8003b2c:	20000d70 	.word	0x20000d70
 8003b30:	200014b4 	.word	0x200014b4
 8003b34:	08009edc 	.word	0x08009edc
 8003b38:	08009eec 	.word	0x08009eec
 8003b3c:	00000000 	.word	0x00000000

08003b40 <chMBReset.constprop.0>:
void chMBReset(mailbox_t *mbp) {
 8003b40:	b538      	push	{r3, r4, r5, lr}
 8003b42:	2320      	movs	r3, #32
 8003b44:	f383 8811 	msr	BASEPRI, r3
  mbp->wrptr = mbp->buffer;
 8003b48:	4c0a      	ldr	r4, [pc, #40]	; (8003b74 <chMBReset.constprop.0+0x34>)
 8003b4a:	6823      	ldr	r3, [r4, #0]
  mbp->reset = true;
 8003b4c:	2201      	movs	r2, #1
  chThdDequeueAllI(&mbp->qw, MSG_RESET);
 8003b4e:	f104 0018 	add.w	r0, r4, #24
  mbp->cnt   = (size_t)0;
 8003b52:	2500      	movs	r5, #0
  mbp->rdptr = mbp->buffer;
 8003b54:	e9c4 3302 	strd	r3, r3, [r4, #8]
  mbp->reset = true;
 8003b58:	7522      	strb	r2, [r4, #20]
  mbp->cnt   = (size_t)0;
 8003b5a:	6125      	str	r5, [r4, #16]
  chThdDequeueAllI(&mbp->qw, MSG_RESET);
 8003b5c:	f7fd fbf8 	bl	8001350 <chThdDequeueAllI.constprop.0>
  chThdDequeueAllI(&mbp->qr, MSG_RESET);
 8003b60:	f104 0020 	add.w	r0, r4, #32
 8003b64:	f7fd fbf4 	bl	8001350 <chThdDequeueAllI.constprop.0>
  chSchRescheduleS();
 8003b68:	f7ff feca 	bl	8003900 <chSchRescheduleS>
 8003b6c:	f385 8811 	msr	BASEPRI, r5
}
 8003b70:	bd38      	pop	{r3, r4, r5, pc}
 8003b72:	bf00      	nop
 8003b74:	2000084c 	.word	0x2000084c
	...

08003b80 <oslib_test_002_003_teardown>:

static void oslib_test_002_003_teardown(void) {
  chMBReset(&mb1);
 8003b80:	f7ff bfde 	b.w	8003b40 <chMBReset.constprop.0>
	...

08003b90 <oslib_test_002_002_teardown>:
 8003b90:	f7ff bff6 	b.w	8003b80 <oslib_test_002_003_teardown>
	...

08003ba0 <oslib_test_002_001_teardown>:
 8003ba0:	f7ff bfee 	b.w	8003b80 <oslib_test_002_003_teardown>
	...

08003bb0 <chMBPostAheadTimeout.constprop.0>:
msg_t chMBPostAheadTimeout(mailbox_t *mbp, msg_t msg, sysinterval_t timeout) {
 8003bb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003bb4:	2320      	movs	r3, #32
 8003bb6:	4606      	mov	r6, r0
 8003bb8:	460d      	mov	r5, r1
 8003bba:	f383 8811 	msr	BASEPRI, r3
 8003bbe:	4c17      	ldr	r4, [pc, #92]	; (8003c1c <chMBPostAheadTimeout.constprop.0+0x6c>)
    rdymsg = chThdEnqueueTimeoutS(&mbp->qw, timeout);
 8003bc0:	f104 0818 	add.w	r8, r4, #24
 8003bc4:	e00a      	b.n	8003bdc <chMBPostAheadTimeout.constprop.0+0x2c>
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 8003bc6:	e9d4 2700 	ldrd	r2, r7, [r4]
 8003bca:	6923      	ldr	r3, [r4, #16]
  return (size_t)(mbp->top - mbp->buffer);
 8003bcc:	eba7 0c02 	sub.w	ip, r7, r2
    if (chMBGetFreeCountI(mbp) > (size_t)0) {
 8003bd0:	ebb3 0fac 	cmp.w	r3, ip, asr #2
 8003bd4:	d10e      	bne.n	8003bf4 <chMBPostAheadTimeout.constprop.0+0x44>
    rdymsg = chThdEnqueueTimeoutS(&mbp->qw, timeout);
 8003bd6:	f7fe fd13 	bl	8002600 <chThdEnqueueTimeoutS>
  } while (rdymsg == MSG_OK);
 8003bda:	b930      	cbnz	r0, 8003bea <chMBPostAheadTimeout.constprop.0+0x3a>
    if (mbp->reset) {
 8003bdc:	7d23      	ldrb	r3, [r4, #20]
    rdymsg = chThdEnqueueTimeoutS(&mbp->qw, timeout);
 8003bde:	4629      	mov	r1, r5
 8003be0:	4640      	mov	r0, r8
    if (mbp->reset) {
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d0ef      	beq.n	8003bc6 <chMBPostAheadTimeout.constprop.0+0x16>
      return MSG_RESET;
 8003be6:	f06f 0001 	mvn.w	r0, #1
 8003bea:	2300      	movs	r3, #0
 8003bec:	f383 8811 	msr	BASEPRI, r3
}
 8003bf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (--mbp->rdptr < mbp->buffer) {
 8003bf4:	68e1      	ldr	r1, [r4, #12]
      chThdDequeueNextI(&mbp->qr, MSG_OK);
 8003bf6:	480a      	ldr	r0, [pc, #40]	; (8003c20 <chMBPostAheadTimeout.constprop.0+0x70>)
      if (--mbp->rdptr < mbp->buffer) {
 8003bf8:	3904      	subs	r1, #4
 8003bfa:	428a      	cmp	r2, r1
        mbp->rdptr = mbp->top - 1;
 8003bfc:	bf88      	it	hi
 8003bfe:	1f39      	subhi	r1, r7, #4
 8003c00:	60e1      	str	r1, [r4, #12]
      mbp->cnt++;
 8003c02:	3301      	adds	r3, #1
      *mbp->rdptr = msg;
 8003c04:	600e      	str	r6, [r1, #0]
      mbp->cnt++;
 8003c06:	6123      	str	r3, [r4, #16]
      chThdDequeueNextI(&mbp->qr, MSG_OK);
 8003c08:	f7fd fb1a 	bl	8001240 <chThdDequeueNextI.constprop.0>
      chSchRescheduleS();
 8003c0c:	f7ff fe78 	bl	8003900 <chSchRescheduleS>
      return MSG_OK;
 8003c10:	2000      	movs	r0, #0
 8003c12:	2300      	movs	r3, #0
 8003c14:	f383 8811 	msr	BASEPRI, r3
}
 8003c18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003c1c:	2000084c 	.word	0x2000084c
 8003c20:	2000086c 	.word	0x2000086c
	...

08003c30 <oslib_test_006_001_execute>:
 * - [6.1.5] Checking cached objects.
 * - [6.1.6] Checking non-cached objects.
 * .
 */

static void oslib_test_006_001_execute(void) {
 8003c30:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  tqp->next = (thread_t *)tqp;
 8003c34:	4ecc      	ldr	r6, [pc, #816]	; (8003f68 <oslib_test_006_001_execute+0x338>)
  ocp->objvp            = objvp;
 8003c36:	49cd      	ldr	r1, [pc, #820]	; (8003f6c <oslib_test_006_001_execute+0x33c>)
 8003c38:	6131      	str	r1, [r6, #16]
  ocp->hashn            = hashn;
 8003c3a:	2108      	movs	r1, #8
 8003c3c:	6031      	str	r1, [r6, #0]
 8003c3e:	f106 0130 	add.w	r1, r6, #48	; 0x30
  sp->cnt = n;
 8003c42:	2001      	movs	r0, #1
  tqp->prev = (thread_t *)tqp;
 8003c44:	e9c6 110c 	strd	r1, r1, [r6, #48]	; 0x30
  ocp->lru.hash_next    = NULL;
 8003c48:	2100      	movs	r1, #0
  ocp->hashp            = hashp;
 8003c4a:	4ac9      	ldr	r2, [pc, #804]	; (8003f70 <oslib_test_006_001_execute+0x340>)
 8003c4c:	62f0      	str	r0, [r6, #44]	; 0x2c
  ocp->lru.hash_prev    = NULL;
 8003c4e:	e9c6 1105 	strd	r1, r1, [r6, #20]
  tqp->next = (thread_t *)tqp;
 8003c52:	f106 0024 	add.w	r0, r6, #36	; 0x24
  ocp->writef           = writef;
 8003c56:	4bc7      	ldr	r3, [pc, #796]	; (8003f74 <oslib_test_006_001_execute+0x344>)
  ocp->readf            = readf;
 8003c58:	4cc7      	ldr	r4, [pc, #796]	; (8003f78 <oslib_test_006_001_execute+0x348>)
  ocp->writef           = writef;
 8003c5a:	6433      	str	r3, [r6, #64]	; 0x40
  tqp->prev = (thread_t *)tqp;
 8003c5c:	e9c6 0009 	strd	r0, r0, [r6, #36]	; 0x24
  ocp->lru.lru_prev     = (oc_object_t *)&ocp->lru;
 8003c60:	f106 0714 	add.w	r7, r6, #20
 8003c64:	2004      	movs	r0, #4
 8003c66:	4613      	mov	r3, r2
  ocp->hashp            = hashp;
 8003c68:	6072      	str	r2, [r6, #4]
  ocp->readf            = readf;
 8003c6a:	63f4      	str	r4, [r6, #60]	; 0x3c
  ocp->lru.lru_prev     = (oc_object_t *)&ocp->lru;
 8003c6c:	6237      	str	r7, [r6, #32]
 8003c6e:	3240      	adds	r2, #64	; 0x40
 8003c70:	63b0      	str	r0, [r6, #56]	; 0x38
  ocp->objn             = objn;
 8003c72:	60b0      	str	r0, [r6, #8]
    hashp->hash_prev = (oc_object_t *)hashp;
 8003c74:	e9c3 3300 	strd	r3, r3, [r3]
    hashp++;
 8003c78:	3308      	adds	r3, #8
  } while (hashp < &ocp->hashp[ocp->hashn]);
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d1fa      	bne.n	8003c74 <oslib_test_006_001_execute+0x44>
 8003c7e:	4bbb      	ldr	r3, [pc, #748]	; (8003f6c <oslib_test_006_001_execute+0x33c>)
 8003c80:	49be      	ldr	r1, [pc, #760]	; (8003f7c <oslib_test_006_001_execute+0x34c>)
 8003c82:	f103 0cf0 	add.w	ip, r3, #240	; 0xf0
 8003c86:	2501      	movs	r5, #1
    objp->obj_group = 0U;
 8003c88:	2200      	movs	r2, #0
 8003c8a:	e000      	b.n	8003c8e <oslib_test_006_001_execute+0x5e>
  } while (objn > (ucnt_t)0);
 8003c8c:	4603      	mov	r3, r0
    objvp = (void *)((uint8_t *)objvp + objsz);
 8003c8e:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 8003c92:	f103 0418 	add.w	r4, r3, #24
  } while (objn > (ucnt_t)0);
 8003c96:	4560      	cmp	r0, ip
    LRU_INSERT_HEAD(ocp, objp);
 8003c98:	e9c3 1702 	strd	r1, r7, [r3, #8]
 8003c9c:	e9c3 4406 	strd	r4, r4, [r3, #24]
 8003ca0:	621d      	str	r5, [r3, #32]
 8003ca2:	60cb      	str	r3, [r1, #12]
    objp->obj_key   = 0U;
 8003ca4:	e9c3 2204 	strd	r2, r2, [r3, #16]
    objp->dptr      = NULL;
 8003ca8:	e9c3 5209 	strd	r5, r2, [r3, #36]	; 0x24
 8003cac:	4619      	mov	r1, r3
  } while (objn > (ucnt_t)0);
 8003cae:	d1ed      	bne.n	8003c8c <oslib_test_006_001_execute+0x5c>
 8003cb0:	4bb3      	ldr	r3, [pc, #716]	; (8003f80 <oslib_test_006_001_execute+0x350>)
                      obj_write);
  }
  test_end_step(1);

  /* [6.1.2] Getting and releasing objects without initialization.*/
  test_set_step(2);
 8003cb2:	f8df b2ec 	ldr.w	fp, [pc, #748]	; 8003fa0 <oslib_test_006_001_execute+0x370>
 8003cb6:	61f3      	str	r3, [r6, #28]
    uint32_t i;

    for (i = 0; i < (NUM_OBJECTS * 2); i++) {
      oc_object_t * objp = chCacheGetObject(&cache1, 0U, i);

      test_assert((objp->obj_flags & OC_FLAG_INHASH) != 0U, "not in hash");
 8003cb8:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 8003f8c <oslib_test_006_001_execute+0x35c>
      test_assert((objp->obj_flags & OC_FLAG_NOTSYNC) != 0U, "should not be in sync");
 8003cbc:	f8df 82e4 	ldr.w	r8, [pc, #740]	; 8003fa4 <oslib_test_006_001_execute+0x374>
 */
static inline void chCacheReleaseObject(objects_cache_t *ocp,
                                        oc_object_t *objp) {

  chSysLock();
  chCacheReleaseObjectI(ocp, objp);
 8003cc0:	f8df a2a4 	ldr.w	sl, [pc, #676]	; 8003f68 <oslib_test_006_001_execute+0x338>
  test_set_step(2);
 8003cc4:	2302      	movs	r3, #2
 8003cc6:	f8cb 3000 	str.w	r3, [fp]
    for (i = 0; i < (NUM_OBJECTS * 2); i++) {
 8003cca:	2700      	movs	r7, #0
      oc_object_t * objp = chCacheGetObject(&cache1, 0U, i);
 8003ccc:	4638      	mov	r0, r7
 8003cce:	f7ff fa7f 	bl	80031d0 <chCacheGetObject.constprop.0>
 8003cd2:	4604      	mov	r4, r0
      test_assert((objp->obj_flags & OC_FLAG_INHASH) != 0U, "not in hash");
 8003cd4:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8003cd6:	4649      	mov	r1, r9
 8003cd8:	f3c0 0040 	ubfx	r0, r0, #1, #1
 8003cdc:	f7fc fe80 	bl	80009e0 <_test_assert>
      test_assert((objp->obj_flags & OC_FLAG_NOTSYNC) != 0U, "should not be in sync");
 8003ce0:	4641      	mov	r1, r8
      test_assert((objp->obj_flags & OC_FLAG_INHASH) != 0U, "not in hash");
 8003ce2:	2800      	cmp	r0, #0
 8003ce4:	f040 813d 	bne.w	8003f62 <oslib_test_006_001_execute+0x332>
      test_assert((objp->obj_flags & OC_FLAG_NOTSYNC) != 0U, "should not be in sync");
 8003ce8:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8003cea:	f3c0 00c0 	ubfx	r0, r0, #3, #1
 8003cee:	f7fc fe77 	bl	80009e0 <_test_assert>
 8003cf2:	2320      	movs	r3, #32
 8003cf4:	4605      	mov	r5, r0
 8003cf6:	2800      	cmp	r0, #0
 8003cf8:	f040 8133 	bne.w	8003f62 <oslib_test_006_001_execute+0x332>
 8003cfc:	f383 8811 	msr	BASEPRI, r3
 8003d00:	4621      	mov	r1, r4
 8003d02:	4650      	mov	r0, sl
 8003d04:	f7fd fbb4 	bl	8001470 <chCacheReleaseObjectI>
  chSchRescheduleS();
 8003d08:	f7ff fdfa 	bl	8003900 <chSchRescheduleS>
 8003d0c:	f385 8811 	msr	BASEPRI, r5
    for (i = 0; i < (NUM_OBJECTS * 2); i++) {
 8003d10:	3701      	adds	r7, #1
 8003d12:	2f08      	cmp	r7, #8
 8003d14:	d1da      	bne.n	8003ccc <oslib_test_006_001_execute+0x9c>

      chCacheReleaseObject(&cache1, objp);
    }

    test_assert_sequence("", "unexpected tokens");
 8003d16:	499b      	ldr	r1, [pc, #620]	; (8003f84 <oslib_test_006_001_execute+0x354>)
 8003d18:	489b      	ldr	r0, [pc, #620]	; (8003f88 <oslib_test_006_001_execute+0x358>)
 8003d1a:	f7fc ffe1 	bl	8000ce0 <_test_assert_sequence>
 8003d1e:	4605      	mov	r5, r0
 8003d20:	2800      	cmp	r0, #0
 8003d22:	f040 811e 	bne.w	8003f62 <oslib_test_006_001_execute+0x332>
  }
  test_end_step(2);

  /* [6.1.3] Getting and releasing objects with synchronous
     initialization.*/
  test_set_step(3);
 8003d26:	2303      	movs	r3, #3
    bool error;

    for (i = 0; i < (NUM_OBJECTS * 2); i++) {
      oc_object_t *objp = chCacheGetObject(&cache1, 0U, i);

      test_assert((objp->obj_flags & OC_FLAG_INHASH) != 0U, "not in hash");
 8003d28:	4f98      	ldr	r7, [pc, #608]	; (8003f8c <oslib_test_006_001_execute+0x35c>)
      test_assert((objp->obj_flags & OC_FLAG_NOTSYNC) != 0U, "in sync");
 8003d2a:	f8df 9270 	ldr.w	r9, [pc, #624]	; 8003f9c <oslib_test_006_001_execute+0x36c>
  /* Marking it as OC_FLAG_NOTSYNC because the read operation is going
     to corrupt it in case of failure. It is responsibility of the read
     implementation to clear it if the operation succeeds.*/
  objp->obj_flags |= OC_FLAG_NOTSYNC;

  return ocp->readf(ocp, objp, async);
 8003d2e:	f8df 8238 	ldr.w	r8, [pc, #568]	; 8003f68 <oslib_test_006_001_execute+0x338>
  test_set_step(3);
 8003d32:	f8cb 3000 	str.w	r3, [fp]
      oc_object_t *objp = chCacheGetObject(&cache1, 0U, i);
 8003d36:	4628      	mov	r0, r5
 8003d38:	f7ff fa4a 	bl	80031d0 <chCacheGetObject.constprop.0>
 8003d3c:	4604      	mov	r4, r0
      test_assert((objp->obj_flags & OC_FLAG_INHASH) != 0U, "not in hash");
 8003d3e:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8003d40:	4639      	mov	r1, r7
 8003d42:	f3c0 0040 	ubfx	r0, r0, #1, #1
 8003d46:	f7fc fe4b 	bl	80009e0 <_test_assert>
      test_assert((objp->obj_flags & OC_FLAG_NOTSYNC) != 0U, "in sync");
 8003d4a:	4649      	mov	r1, r9
      test_assert((objp->obj_flags & OC_FLAG_INHASH) != 0U, "not in hash");
 8003d4c:	2800      	cmp	r0, #0
 8003d4e:	f040 8108 	bne.w	8003f62 <oslib_test_006_001_execute+0x332>
      test_assert((objp->obj_flags & OC_FLAG_NOTSYNC) != 0U, "in sync");
 8003d52:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8003d54:	f3c0 00c0 	ubfx	r0, r0, #3, #1
 8003d58:	f7fc fe42 	bl	80009e0 <_test_assert>
 8003d5c:	4602      	mov	r2, r0
 8003d5e:	4621      	mov	r1, r4
 8003d60:	4640      	mov	r0, r8
 8003d62:	2a00      	cmp	r2, #0
 8003d64:	f040 80fd 	bne.w	8003f62 <oslib_test_006_001_execute+0x332>
  objp->obj_flags |= OC_FLAG_NOTSYNC;
 8003d68:	6a63      	ldr	r3, [r4, #36]	; 0x24
  return ocp->readf(ocp, objp, async);
 8003d6a:	f8d6 a03c 	ldr.w	sl, [r6, #60]	; 0x3c
  objp->obj_flags |= OC_FLAG_NOTSYNC;
 8003d6e:	f043 0308 	orr.w	r3, r3, #8
 8003d72:	6263      	str	r3, [r4, #36]	; 0x24
  return ocp->readf(ocp, objp, async);
 8003d74:	47d0      	blx	sl

      error = chCacheReadObject(&cache1, objp, false);

      test_assert(error == false, "returned error");
 8003d76:	f080 0001 	eor.w	r0, r0, #1
 8003d7a:	4985      	ldr	r1, [pc, #532]	; (8003f90 <oslib_test_006_001_execute+0x360>)
 8003d7c:	b2c0      	uxtb	r0, r0
 8003d7e:	f7fc fe2f 	bl	80009e0 <_test_assert>
      test_assert((objp->obj_flags & OC_FLAG_INHASH) != 0U, "not in hash");
 8003d82:	4639      	mov	r1, r7
      test_assert(error == false, "returned error");
 8003d84:	2800      	cmp	r0, #0
 8003d86:	f040 80ec 	bne.w	8003f62 <oslib_test_006_001_execute+0x332>
      test_assert((objp->obj_flags & OC_FLAG_INHASH) != 0U, "not in hash");
 8003d8a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8003d8c:	f3c0 0040 	ubfx	r0, r0, #1, #1
 8003d90:	f7fc fe26 	bl	80009e0 <_test_assert>
      test_assert((objp->obj_flags & OC_FLAG_NOTSYNC) == 0U, "not in sync");
 8003d94:	497f      	ldr	r1, [pc, #508]	; (8003f94 <oslib_test_006_001_execute+0x364>)
      test_assert((objp->obj_flags & OC_FLAG_INHASH) != 0U, "not in hash");
 8003d96:	2800      	cmp	r0, #0
 8003d98:	f040 80e3 	bne.w	8003f62 <oslib_test_006_001_execute+0x332>
      test_assert((objp->obj_flags & OC_FLAG_NOTSYNC) == 0U, "not in sync");
 8003d9c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8003d9e:	f080 0008 	eor.w	r0, r0, #8
 8003da2:	f3c0 00c0 	ubfx	r0, r0, #3, #1
 8003da6:	f7fc fe1b 	bl	80009e0 <_test_assert>
 8003daa:	2320      	movs	r3, #32
 8003dac:	4682      	mov	sl, r0
 8003dae:	2800      	cmp	r0, #0
 8003db0:	f040 80d7 	bne.w	8003f62 <oslib_test_006_001_execute+0x332>
 8003db4:	f383 8811 	msr	BASEPRI, r3
  chCacheReleaseObjectI(ocp, objp);
 8003db8:	4621      	mov	r1, r4
 8003dba:	4640      	mov	r0, r8
 8003dbc:	f7fd fb58 	bl	8001470 <chCacheReleaseObjectI>
  chSchRescheduleS();
 8003dc0:	f7ff fd9e 	bl	8003900 <chSchRescheduleS>
 8003dc4:	f38a 8811 	msr	BASEPRI, sl
    for (i = 0; i < (NUM_OBJECTS * 2); i++) {
 8003dc8:	3501      	adds	r5, #1
 8003dca:	2d08      	cmp	r5, #8
 8003dcc:	d1b3      	bne.n	8003d36 <oslib_test_006_001_execute+0x106>

      chCacheReleaseObject(&cache1, objp);
    }

    test_assert_sequence("abcdefgh", "unexpected tokens");
 8003dce:	496d      	ldr	r1, [pc, #436]	; (8003f84 <oslib_test_006_001_execute+0x354>)
 8003dd0:	4871      	ldr	r0, [pc, #452]	; (8003f98 <oslib_test_006_001_execute+0x368>)
 8003dd2:	f7fc ff85 	bl	8000ce0 <_test_assert_sequence>
 8003dd6:	4605      	mov	r5, r0
 8003dd8:	2800      	cmp	r0, #0
 8003dda:	f040 80c2 	bne.w	8003f62 <oslib_test_006_001_execute+0x332>
  }
  test_end_step(3);

  /* [6.1.4] Getting and releasing objects with asynchronous
     initialization.*/
  test_set_step(4);
 8003dde:	2304      	movs	r3, #4
    bool error;

    for (i = 0; i < (NUM_OBJECTS * 2); i++) {
      oc_object_t *objp = chCacheGetObject(&cache1, 0U, i);

      test_assert((objp->obj_flags & OC_FLAG_INHASH) != 0U, "not in hash");
 8003de0:	4f6a      	ldr	r7, [pc, #424]	; (8003f8c <oslib_test_006_001_execute+0x35c>)
      test_assert((objp->obj_flags & OC_FLAG_NOTSYNC) != 0U, "in sync");
 8003de2:	f8df 91b8 	ldr.w	r9, [pc, #440]	; 8003f9c <oslib_test_006_001_execute+0x36c>
 8003de6:	f8df 8180 	ldr.w	r8, [pc, #384]	; 8003f68 <oslib_test_006_001_execute+0x338>
  test_set_step(4);
 8003dea:	f8cb 3000 	str.w	r3, [fp]
      oc_object_t *objp = chCacheGetObject(&cache1, 0U, i);
 8003dee:	4628      	mov	r0, r5
 8003df0:	f7ff f9ee 	bl	80031d0 <chCacheGetObject.constprop.0>
 8003df4:	4604      	mov	r4, r0
      test_assert((objp->obj_flags & OC_FLAG_INHASH) != 0U, "not in hash");
 8003df6:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8003df8:	4639      	mov	r1, r7
 8003dfa:	f3c0 0040 	ubfx	r0, r0, #1, #1
 8003dfe:	f7fc fdef 	bl	80009e0 <_test_assert>
      test_assert((objp->obj_flags & OC_FLAG_NOTSYNC) != 0U, "in sync");
 8003e02:	4649      	mov	r1, r9
      test_assert((objp->obj_flags & OC_FLAG_INHASH) != 0U, "not in hash");
 8003e04:	2800      	cmp	r0, #0
 8003e06:	f040 80ac 	bne.w	8003f62 <oslib_test_006_001_execute+0x332>
      test_assert((objp->obj_flags & OC_FLAG_NOTSYNC) != 0U, "in sync");
 8003e0a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8003e0c:	f3c0 00c0 	ubfx	r0, r0, #3, #1
 8003e10:	f7fc fde6 	bl	80009e0 <_test_assert>
 8003e14:	4603      	mov	r3, r0
 8003e16:	2201      	movs	r2, #1
 8003e18:	4621      	mov	r1, r4
 8003e1a:	4640      	mov	r0, r8
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	f040 80a0 	bne.w	8003f62 <oslib_test_006_001_execute+0x332>
  objp->obj_flags |= OC_FLAG_NOTSYNC;
 8003e22:	6a63      	ldr	r3, [r4, #36]	; 0x24
  return ocp->readf(ocp, objp, async);
 8003e24:	f8d6 a03c 	ldr.w	sl, [r6, #60]	; 0x3c
  objp->obj_flags |= OC_FLAG_NOTSYNC;
 8003e28:	f043 0308 	orr.w	r3, r3, #8
 8003e2c:	6263      	str	r3, [r4, #36]	; 0x24
  return ocp->readf(ocp, objp, async);
 8003e2e:	47d0      	blx	sl

      error = chCacheReadObject(&cache1, objp, true);

      test_assert(error == false, "returned error");
 8003e30:	f080 0001 	eor.w	r0, r0, #1
 8003e34:	4956      	ldr	r1, [pc, #344]	; (8003f90 <oslib_test_006_001_execute+0x360>)
 8003e36:	b2c0      	uxtb	r0, r0
 8003e38:	f7fc fdd2 	bl	80009e0 <_test_assert>
 8003e3c:	4603      	mov	r3, r0

      objp = chCacheGetObject(&cache1, 0U, i);
 8003e3e:	4628      	mov	r0, r5
      test_assert(error == false, "returned error");
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	f040 808e 	bne.w	8003f62 <oslib_test_006_001_execute+0x332>
      objp = chCacheGetObject(&cache1, 0U, i);
 8003e46:	f7ff f9c3 	bl	80031d0 <chCacheGetObject.constprop.0>
 8003e4a:	4604      	mov	r4, r0

      test_assert((objp->obj_flags & OC_FLAG_INHASH) != 0U, "not in hash");
 8003e4c:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8003e4e:	4639      	mov	r1, r7
 8003e50:	f3c0 0040 	ubfx	r0, r0, #1, #1
 8003e54:	f7fc fdc4 	bl	80009e0 <_test_assert>
      test_assert((objp->obj_flags & OC_FLAG_NOTSYNC) == 0U, "not in sync");
 8003e58:	494e      	ldr	r1, [pc, #312]	; (8003f94 <oslib_test_006_001_execute+0x364>)
      test_assert((objp->obj_flags & OC_FLAG_INHASH) != 0U, "not in hash");
 8003e5a:	2800      	cmp	r0, #0
 8003e5c:	f040 8081 	bne.w	8003f62 <oslib_test_006_001_execute+0x332>
      test_assert((objp->obj_flags & OC_FLAG_NOTSYNC) == 0U, "not in sync");
 8003e60:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8003e62:	f080 0008 	eor.w	r0, r0, #8
 8003e66:	f3c0 00c0 	ubfx	r0, r0, #3, #1
 8003e6a:	f7fc fdb9 	bl	80009e0 <_test_assert>
 8003e6e:	2320      	movs	r3, #32
 8003e70:	4682      	mov	sl, r0
 8003e72:	2800      	cmp	r0, #0
 8003e74:	d175      	bne.n	8003f62 <oslib_test_006_001_execute+0x332>
 8003e76:	f383 8811 	msr	BASEPRI, r3
  chCacheReleaseObjectI(ocp, objp);
 8003e7a:	4621      	mov	r1, r4
 8003e7c:	4640      	mov	r0, r8
 8003e7e:	f7fd faf7 	bl	8001470 <chCacheReleaseObjectI>
  chSchRescheduleS();
 8003e82:	f7ff fd3d 	bl	8003900 <chSchRescheduleS>
 8003e86:	f38a 8811 	msr	BASEPRI, sl
    for (i = 0; i < (NUM_OBJECTS * 2); i++) {
 8003e8a:	3501      	adds	r5, #1
 8003e8c:	2d08      	cmp	r5, #8
 8003e8e:	d1ae      	bne.n	8003dee <oslib_test_006_001_execute+0x1be>

      chCacheReleaseObject(&cache1, objp);
    }

    test_assert_sequence("abcdefgh", "unexpected tokens");
 8003e90:	493c      	ldr	r1, [pc, #240]	; (8003f84 <oslib_test_006_001_execute+0x354>)
 8003e92:	4841      	ldr	r0, [pc, #260]	; (8003f98 <oslib_test_006_001_execute+0x368>)
 8003e94:	f7fc ff24 	bl	8000ce0 <_test_assert_sequence>
 8003e98:	2800      	cmp	r0, #0
 8003e9a:	d162      	bne.n	8003f62 <oslib_test_006_001_execute+0x332>
  }
  test_end_step(4);

  /* [6.1.5] Checking cached objects.*/
  test_set_step(5);
 8003e9c:	2305      	movs	r3, #5
    uint32_t i;

    for (i = NUM_OBJECTS; i < (NUM_OBJECTS * 2); i++) {
      oc_object_t *objp = chCacheGetObject(&cache1, 0U, i);

      test_assert((objp->obj_flags & OC_FLAG_INHASH) != 0U, "not in hash");
 8003e9e:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 8003f8c <oslib_test_006_001_execute+0x35c>
      test_assert((objp->obj_flags & OC_FLAG_NOTSYNC) == 0U, "not in sync");
 8003ea2:	4f3c      	ldr	r7, [pc, #240]	; (8003f94 <oslib_test_006_001_execute+0x364>)
  chCacheReleaseObjectI(ocp, objp);
 8003ea4:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 8003f68 <oslib_test_006_001_execute+0x338>
  test_set_step(5);
 8003ea8:	f8cb 3000 	str.w	r3, [fp]
    for (i = NUM_OBJECTS; i < (NUM_OBJECTS * 2); i++) {
 8003eac:	2604      	movs	r6, #4
      oc_object_t *objp = chCacheGetObject(&cache1, 0U, i);
 8003eae:	4630      	mov	r0, r6
 8003eb0:	f7ff f98e 	bl	80031d0 <chCacheGetObject.constprop.0>
 8003eb4:	4604      	mov	r4, r0
      test_assert((objp->obj_flags & OC_FLAG_INHASH) != 0U, "not in hash");
 8003eb6:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8003eb8:	4641      	mov	r1, r8
 8003eba:	f3c0 0040 	ubfx	r0, r0, #1, #1
 8003ebe:	f7fc fd8f 	bl	80009e0 <_test_assert>
      test_assert((objp->obj_flags & OC_FLAG_NOTSYNC) == 0U, "not in sync");
 8003ec2:	4639      	mov	r1, r7
      test_assert((objp->obj_flags & OC_FLAG_INHASH) != 0U, "not in hash");
 8003ec4:	2800      	cmp	r0, #0
 8003ec6:	d14c      	bne.n	8003f62 <oslib_test_006_001_execute+0x332>
      test_assert((objp->obj_flags & OC_FLAG_NOTSYNC) == 0U, "not in sync");
 8003ec8:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8003eca:	f080 0008 	eor.w	r0, r0, #8
 8003ece:	f3c0 00c0 	ubfx	r0, r0, #3, #1
 8003ed2:	f7fc fd85 	bl	80009e0 <_test_assert>
 8003ed6:	2320      	movs	r3, #32
 8003ed8:	4605      	mov	r5, r0
 8003eda:	2800      	cmp	r0, #0
 8003edc:	d141      	bne.n	8003f62 <oslib_test_006_001_execute+0x332>
 8003ede:	f383 8811 	msr	BASEPRI, r3
 8003ee2:	4621      	mov	r1, r4
 8003ee4:	4648      	mov	r0, r9
 8003ee6:	f7fd fac3 	bl	8001470 <chCacheReleaseObjectI>
  chSchRescheduleS();
 8003eea:	f7ff fd09 	bl	8003900 <chSchRescheduleS>
 8003eee:	f385 8811 	msr	BASEPRI, r5
    for (i = NUM_OBJECTS; i < (NUM_OBJECTS * 2); i++) {
 8003ef2:	3601      	adds	r6, #1
 8003ef4:	2e08      	cmp	r6, #8
 8003ef6:	d1da      	bne.n	8003eae <oslib_test_006_001_execute+0x27e>

      chCacheReleaseObject(&cache1, objp);
    }

    test_assert_sequence("", "unexpected tokens");
 8003ef8:	4922      	ldr	r1, [pc, #136]	; (8003f84 <oslib_test_006_001_execute+0x354>)
 8003efa:	4823      	ldr	r0, [pc, #140]	; (8003f88 <oslib_test_006_001_execute+0x358>)
 8003efc:	f7fc fef0 	bl	8000ce0 <_test_assert_sequence>
 8003f00:	4604      	mov	r4, r0
 8003f02:	bb70      	cbnz	r0, 8003f62 <oslib_test_006_001_execute+0x332>
  }
  test_end_step(5);

  /* [6.1.6] Checking non-cached objects.*/
  test_set_step(6);
 8003f04:	2306      	movs	r3, #6
    uint32_t i;

    for (i = 0; i < NUM_OBJECTS; i++) {
      oc_object_t *objp = chCacheGetObject(&cache1, 0U, i);

      test_assert((objp->obj_flags & OC_FLAG_INHASH) != 0U, "not in hash");
 8003f06:	f8df 8084 	ldr.w	r8, [pc, #132]	; 8003f8c <oslib_test_006_001_execute+0x35c>
      test_assert((objp->obj_flags & OC_FLAG_NOTSYNC) != 0U, "in sync");
 8003f0a:	4f24      	ldr	r7, [pc, #144]	; (8003f9c <oslib_test_006_001_execute+0x36c>)
  chCacheReleaseObjectI(ocp, objp);
 8003f0c:	f8df 9058 	ldr.w	r9, [pc, #88]	; 8003f68 <oslib_test_006_001_execute+0x338>
  test_set_step(6);
 8003f10:	f8cb 3000 	str.w	r3, [fp]
      oc_object_t *objp = chCacheGetObject(&cache1, 0U, i);
 8003f14:	4620      	mov	r0, r4
 8003f16:	f7ff f95b 	bl	80031d0 <chCacheGetObject.constprop.0>
 8003f1a:	4605      	mov	r5, r0
      test_assert((objp->obj_flags & OC_FLAG_INHASH) != 0U, "not in hash");
 8003f1c:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8003f1e:	4641      	mov	r1, r8
 8003f20:	f3c0 0040 	ubfx	r0, r0, #1, #1
 8003f24:	f7fc fd5c 	bl	80009e0 <_test_assert>
      test_assert((objp->obj_flags & OC_FLAG_NOTSYNC) != 0U, "in sync");
 8003f28:	4639      	mov	r1, r7
      test_assert((objp->obj_flags & OC_FLAG_INHASH) != 0U, "not in hash");
 8003f2a:	b9d0      	cbnz	r0, 8003f62 <oslib_test_006_001_execute+0x332>
      test_assert((objp->obj_flags & OC_FLAG_NOTSYNC) != 0U, "in sync");
 8003f2c:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8003f2e:	f3c0 00c0 	ubfx	r0, r0, #3, #1
 8003f32:	f7fc fd55 	bl	80009e0 <_test_assert>
 8003f36:	2320      	movs	r3, #32
 8003f38:	4606      	mov	r6, r0
 8003f3a:	b990      	cbnz	r0, 8003f62 <oslib_test_006_001_execute+0x332>
 8003f3c:	f383 8811 	msr	BASEPRI, r3
 8003f40:	4629      	mov	r1, r5
 8003f42:	4648      	mov	r0, r9
 8003f44:	f7fd fa94 	bl	8001470 <chCacheReleaseObjectI>
  chSchRescheduleS();
 8003f48:	f7ff fcda 	bl	8003900 <chSchRescheduleS>
 8003f4c:	f386 8811 	msr	BASEPRI, r6
    for (i = 0; i < NUM_OBJECTS; i++) {
 8003f50:	3401      	adds	r4, #1
 8003f52:	2c04      	cmp	r4, #4
 8003f54:	d1de      	bne.n	8003f14 <oslib_test_006_001_execute+0x2e4>
    }

    test_assert_sequence("", "unexpected tokens");
  }
  test_end_step(6);
}
 8003f56:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    test_assert_sequence("", "unexpected tokens");
 8003f5a:	490a      	ldr	r1, [pc, #40]	; (8003f84 <oslib_test_006_001_execute+0x354>)
 8003f5c:	480a      	ldr	r0, [pc, #40]	; (8003f88 <oslib_test_006_001_execute+0x358>)
 8003f5e:	f7fc bebf 	b.w	8000ce0 <_test_assert_sequence>
}
 8003f62:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f66:	bf00      	nop
 8003f68:	2000096c 	.word	0x2000096c
 8003f6c:	20000c70 	.word	0x20000c70
 8003f70:	20000b70 	.word	0x20000b70
 8003f74:	08000b61 	.word	0x08000b61
 8003f78:	08003fb1 	.word	0x08003fb1
 8003f7c:	20000980 	.word	0x20000980
 8003f80:	20000d24 	.word	0x20000d24
 8003f84:	08009f24 	.word	0x08009f24
 8003f88:	08009bc0 	.word	0x08009bc0
 8003f8c:	08009f00 	.word	0x08009f00
 8003f90:	08009f38 	.word	0x08009f38
 8003f94:	08009f48 	.word	0x08009f48
 8003f98:	08009f54 	.word	0x08009f54
 8003f9c:	08009f4c 	.word	0x08009f4c
 8003fa0:	2000149c 	.word	0x2000149c
 8003fa4:	08009f0c 	.word	0x08009f0c
	...

08003fb0 <obj_read>:
  test_emit_token('a' + objp->obj_key);
 8003fb0:	694b      	ldr	r3, [r1, #20]
                     bool async) {
 8003fb2:	b570      	push	{r4, r5, r6, lr}
  test_emit_token('a' + objp->obj_key);
 8003fb4:	3361      	adds	r3, #97	; 0x61
                     bool async) {
 8003fb6:	460c      	mov	r4, r1
 8003fb8:	4606      	mov	r6, r0
  test_emit_token('a' + objp->obj_key);
 8003fba:	b2d8      	uxtb	r0, r3
                     bool async) {
 8003fbc:	4615      	mov	r5, r2
  test_emit_token('a' + objp->obj_key);
 8003fbe:	f7fc fdb7 	bl	8000b30 <test_emit_token>
  objp->obj_flags &= ~OC_FLAG_NOTSYNC;
 8003fc2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003fc4:	f023 0308 	bic.w	r3, r3, #8
 8003fc8:	6263      	str	r3, [r4, #36]	; 0x24
  if (async) {
 8003fca:	b90d      	cbnz	r5, 8003fd0 <obj_read+0x20>
}
 8003fcc:	2000      	movs	r0, #0
 8003fce:	bd70      	pop	{r4, r5, r6, pc}
 8003fd0:	2320      	movs	r3, #32
 8003fd2:	f383 8811 	msr	BASEPRI, r3
  chCacheReleaseObjectI(ocp, objp);
 8003fd6:	4621      	mov	r1, r4
 8003fd8:	4630      	mov	r0, r6
 8003fda:	f7fd fa49 	bl	8001470 <chCacheReleaseObjectI>
  chSchRescheduleS();
 8003fde:	f7ff fc8f 	bl	8003900 <chSchRescheduleS>
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	f383 8811 	msr	BASEPRI, r3
 8003fe8:	2000      	movs	r0, #0
 8003fea:	bd70      	pop	{r4, r5, r6, pc}
 8003fec:	0000      	movs	r0, r0
	...

08003ff0 <evt_thread7>:
static THD_FUNCTION(evt_thread7, p) {
 8003ff0:	b538      	push	{r3, r4, r5, lr}
 8003ff2:	2520      	movs	r5, #32
 8003ff4:	f385 8811 	msr	BASEPRI, r5
  chEvtBroadcastFlagsI(esp, flags);
 8003ff8:	480b      	ldr	r0, [pc, #44]	; (8004028 <evt_thread7+0x38>)
 8003ffa:	2100      	movs	r1, #0
 8003ffc:	f7fd f9e8 	bl	80013d0 <chEvtBroadcastFlagsI>
 8004000:	2400      	movs	r4, #0
  chSchRescheduleS();
 8004002:	f7ff fc7d 	bl	8003900 <chSchRescheduleS>
 8004006:	f384 8811 	msr	BASEPRI, r4
  chThdSleepMilliseconds(50);
 800400a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800400e:	f7fe fc87 	bl	8002920 <chThdSleep>
 8004012:	f385 8811 	msr	BASEPRI, r5
  chEvtBroadcastFlagsI(esp, flags);
 8004016:	4805      	ldr	r0, [pc, #20]	; (800402c <evt_thread7+0x3c>)
 8004018:	4621      	mov	r1, r4
 800401a:	f7fd f9d9 	bl	80013d0 <chEvtBroadcastFlagsI>
  chSchRescheduleS();
 800401e:	f7ff fc6f 	bl	8003900 <chSchRescheduleS>
 8004022:	f384 8811 	msr	BASEPRI, r4
}
 8004026:	bd38      	pop	{r3, r4, r5, pc}
 8004028:	20000808 	.word	0x20000808
 800402c:	2000080c 	.word	0x2000080c

08004030 <evt_thread3>:
static THD_FUNCTION(evt_thread3, p) {
 8004030:	b510      	push	{r4, lr}
 8004032:	4604      	mov	r4, r0
  chThdSleepMilliseconds(50);
 8004034:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004038:	f7fe fc72 	bl	8002920 <chThdSleep>
 800403c:	2320      	movs	r3, #32
 800403e:	f383 8811 	msr	BASEPRI, r3
  chEvtSignalI(tp, events);
 8004042:	2101      	movs	r1, #1
 8004044:	4620      	mov	r0, r4
 8004046:	f7fd f9ab 	bl	80013a0 <chEvtSignalI>
  chSchRescheduleS();
 800404a:	f7ff fc59 	bl	8003900 <chSchRescheduleS>
 800404e:	2300      	movs	r3, #0
 8004050:	f383 8811 	msr	BASEPRI, r3
}
 8004054:	bd10      	pop	{r4, pc}
 8004056:	bf00      	nop
	...

08004060 <thread4B>:
static THD_FUNCTION(thread4B, p) {
 8004060:	b510      	push	{r4, lr}
  chThdSleepMilliseconds(150);
 8004062:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8004066:	f7fe fc5b 	bl	8002920 <chThdSleep>
 800406a:	2320      	movs	r3, #32
 800406c:	f383 8811 	msr	BASEPRI, r3
  chMtxLockS(&m2);   /* For coverage of the chMtxLockS() function variant.*/
 8004070:	4c06      	ldr	r4, [pc, #24]	; (800408c <thread4B+0x2c>)
 8004072:	4620      	mov	r0, r4
 8004074:	f7ff f824 	bl	80030c0 <chMtxLockS>
  chMtxUnlockS(&m2); /* For coverage of the chMtxUnlockS() function variant.*/
 8004078:	4620      	mov	r0, r4
 800407a:	f7fd f9c1 	bl	8001400 <chMtxUnlockS>
  chSchRescheduleS();
 800407e:	f7ff fc3f 	bl	8003900 <chSchRescheduleS>
 8004082:	2300      	movs	r3, #0
 8004084:	f383 8811 	msr	BASEPRI, r3
}
 8004088:	bd10      	pop	{r4, pc}
 800408a:	bf00      	nop
 800408c:	2000083c 	.word	0x2000083c

08004090 <rt_test_006_006_execute>:

static void rt_test_006_006_teardown(void) {
  test_wait_threads();
}

static void rt_test_006_006_execute(void) {
 8004090:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  binary_semaphore_t bsem;
  msg_t msg;

  /* [6.6.1] Creating a binary semaphore in "taken" state, the state is
     checked.*/
  test_set_step(1);
 8004094:	4e61      	ldr	r6, [pc, #388]	; (800421c <rt_test_006_006_execute+0x18c>)
static void rt_test_006_006_execute(void) {
 8004096:	b084      	sub	sp, #16
  test_set_step(1);
 8004098:	2301      	movs	r3, #1
  tqp->next = (thread_t *)tqp;
 800409a:	ad01      	add	r5, sp, #4
 800409c:	f04f 0800 	mov.w	r8, #0
  tqp->prev = (thread_t *)tqp;
 80040a0:	e9cd 5501 	strd	r5, r5, [sp, #4]
 80040a4:	6033      	str	r3, [r6, #0]
 80040a6:	f8cd 800c 	str.w	r8, [sp, #12]
 80040aa:	2720      	movs	r7, #32
 80040ac:	f387 8811 	msr	BASEPRI, r7
 */
static inline bool chBSemGetStateI(const binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  return (bsp->sem.cnt > (cnt_t)0) ? false : true;
 80040b0:	9803      	ldr	r0, [sp, #12]
  {
    chBSemObjectInit(&bsem, true);
    test_assert_lock(chBSemGetStateI(&bsem) == true, "not taken");
 80040b2:	495b      	ldr	r1, [pc, #364]	; (8004220 <rt_test_006_006_execute+0x190>)
 80040b4:	4540      	cmp	r0, r8
 80040b6:	bfcc      	ite	gt
 80040b8:	2000      	movgt	r0, #0
 80040ba:	2001      	movle	r0, #1
 80040bc:	f7fc fc90 	bl	80009e0 <_test_assert>
 80040c0:	b120      	cbz	r0, 80040cc <rt_test_006_006_execute+0x3c>
 80040c2:	f388 8811 	msr	BASEPRI, r8
    chBSemSignal(&bsem);
    test_assert_lock(chBSemGetStateI(&bsem) == false, "taken");
    test_assert_lock(chSemGetCounterI(&bsem.sem) == 1, "unexpected counter");
  }
  test_end_step(6);
}
 80040c6:	b004      	add	sp, #16
 80040c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80040cc:	4604      	mov	r4, r0
 80040ce:	f380 8811 	msr	BASEPRI, r0
  test_set_step(2);
 80040d2:	2302      	movs	r3, #2
 80040d4:	4601      	mov	r1, r0
 80040d6:	4628      	mov	r0, r5
 80040d8:	6033      	str	r3, [r6, #0]
 80040da:	f7ff fc21 	bl	8003920 <chSemResetWithMessage.constprop.0>
 80040de:	f387 8811 	msr	BASEPRI, r7
 80040e2:	9803      	ldr	r0, [sp, #12]
    test_assert_lock(chBSemGetStateI(&bsem) == true, "not taken");
 80040e4:	494e      	ldr	r1, [pc, #312]	; (8004220 <rt_test_006_006_execute+0x190>)
 80040e6:	2800      	cmp	r0, #0
 80040e8:	bfcc      	ite	gt
 80040ea:	2000      	movgt	r0, #0
 80040ec:	2001      	movle	r0, #1
 80040ee:	f7fc fc77 	bl	80009e0 <_test_assert>
 80040f2:	4680      	mov	r8, r0
 80040f4:	2800      	cmp	r0, #0
 80040f6:	d172      	bne.n	80041de <rt_test_006_006_execute+0x14e>
 80040f8:	f380 8811 	msr	BASEPRI, r0
  return ch.rlist.current;
 80040fc:	4b49      	ldr	r3, [pc, #292]	; (8004224 <rt_test_006_006_execute+0x194>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE,
 80040fe:	4a4a      	ldr	r2, [pc, #296]	; (8004228 <rt_test_006_006_execute+0x198>)
  return chThdGetSelfX()->prio;
 8004100:	699b      	ldr	r3, [r3, #24]
 8004102:	484a      	ldr	r0, [pc, #296]	; (800422c <rt_test_006_006_execute+0x19c>)
 8004104:	6899      	ldr	r1, [r3, #8]
  test_set_step(3);
 8004106:	2403      	movs	r4, #3
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE,
 8004108:	462b      	mov	r3, r5
 800410a:	3901      	subs	r1, #1
  test_set_step(3);
 800410c:	6034      	str	r4, [r6, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE,
 800410e:	f7fd ffa7 	bl	8002060 <chThdCreateStatic.constprop.0>
 8004112:	4a47      	ldr	r2, [pc, #284]	; (8004230 <rt_test_006_006_execute+0x1a0>)
 8004114:	4601      	mov	r1, r0
  test_set_step(4);
 8004116:	2304      	movs	r3, #4
  return chSemWait(&bsp->sem);
 8004118:	4628      	mov	r0, r5
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE,
 800411a:	6011      	str	r1, [r2, #0]
  test_set_step(4);
 800411c:	6033      	str	r3, [r6, #0]
 800411e:	f7ff f8d7 	bl	80032d0 <chSemWait>
 8004122:	4604      	mov	r4, r0
 8004124:	f387 8811 	msr	BASEPRI, r7
  return (bsp->sem.cnt > (cnt_t)0) ? false : true;
 8004128:	9803      	ldr	r0, [sp, #12]
    test_assert_lock(chBSemGetStateI(&bsem) == true, "not taken");
 800412a:	493d      	ldr	r1, [pc, #244]	; (8004220 <rt_test_006_006_execute+0x190>)
 800412c:	2800      	cmp	r0, #0
 800412e:	bfcc      	ite	gt
 8004130:	2000      	movgt	r0, #0
 8004132:	2001      	movle	r0, #1
 8004134:	f7fc fc54 	bl	80009e0 <_test_assert>
 8004138:	2800      	cmp	r0, #0
 800413a:	d1c2      	bne.n	80040c2 <rt_test_006_006_execute+0x32>
 800413c:	f380 8811 	msr	BASEPRI, r0
    test_assert(msg == MSG_OK, "unexpected message");
 8004140:	fab4 f084 	clz	r0, r4
 8004144:	493b      	ldr	r1, [pc, #236]	; (8004234 <rt_test_006_006_execute+0x1a4>)
 8004146:	0940      	lsrs	r0, r0, #5
 8004148:	f7fc fc4a 	bl	80009e0 <_test_assert>
 800414c:	2800      	cmp	r0, #0
 800414e:	d1ba      	bne.n	80040c6 <rt_test_006_006_execute+0x36>
  test_set_step(5);
 8004150:	2305      	movs	r3, #5
 8004152:	6033      	str	r3, [r6, #0]
 8004154:	f387 8811 	msr	BASEPRI, r7
  if (bsp->sem.cnt < (cnt_t)1) {
 8004158:	9b03      	ldr	r3, [sp, #12]
 800415a:	2b00      	cmp	r3, #0
 800415c:	dd44      	ble.n	80041e8 <rt_test_006_006_execute+0x158>
  chSchRescheduleS();
 800415e:	f7ff fbcf 	bl	8003900 <chSchRescheduleS>
 8004162:	f04f 0800 	mov.w	r8, #0
 8004166:	f388 8811 	msr	BASEPRI, r8
 800416a:	2720      	movs	r7, #32
 800416c:	f387 8811 	msr	BASEPRI, r7
    test_assert_lock(chBSemGetStateI(&bsem) ==false, "still taken");
 8004170:	9803      	ldr	r0, [sp, #12]
 8004172:	4931      	ldr	r1, [pc, #196]	; (8004238 <rt_test_006_006_execute+0x1a8>)
 8004174:	4540      	cmp	r0, r8
 8004176:	bfd4      	ite	le
 8004178:	2000      	movle	r0, #0
 800417a:	2001      	movgt	r0, #1
 800417c:	f7fc fc30 	bl	80009e0 <_test_assert>
 8004180:	4604      	mov	r4, r0
 8004182:	2800      	cmp	r0, #0
 8004184:	d19d      	bne.n	80040c2 <rt_test_006_006_execute+0x32>
 8004186:	f380 8811 	msr	BASEPRI, r0
 800418a:	f387 8811 	msr	BASEPRI, r7
    test_assert_lock(chSemGetCounterI(&bsem.sem) == 1, "unexpected counter");
 800418e:	9803      	ldr	r0, [sp, #12]
 8004190:	492a      	ldr	r1, [pc, #168]	; (800423c <rt_test_006_006_execute+0x1ac>)
 8004192:	f1a0 0001 	sub.w	r0, r0, #1
 8004196:	fab0 f080 	clz	r0, r0
 800419a:	0940      	lsrs	r0, r0, #5
 800419c:	f7fc fc20 	bl	80009e0 <_test_assert>
 80041a0:	b9e8      	cbnz	r0, 80041de <rt_test_006_006_execute+0x14e>
 80041a2:	f380 8811 	msr	BASEPRI, r0
  test_set_step(6);
 80041a6:	2306      	movs	r3, #6
 80041a8:	6033      	str	r3, [r6, #0]
 80041aa:	f387 8811 	msr	BASEPRI, r7
  if (bsp->sem.cnt < (cnt_t)1) {
 80041ae:	9b03      	ldr	r3, [sp, #12]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	dd2f      	ble.n	8004214 <rt_test_006_006_execute+0x184>
  chSchRescheduleS();
 80041b4:	f7ff fba4 	bl	8003900 <chSchRescheduleS>
 80041b8:	2500      	movs	r5, #0
 80041ba:	f385 8811 	msr	BASEPRI, r5
 80041be:	2620      	movs	r6, #32
 80041c0:	f386 8811 	msr	BASEPRI, r6
    test_assert_lock(chBSemGetStateI(&bsem) == false, "taken");
 80041c4:	9803      	ldr	r0, [sp, #12]
 80041c6:	491e      	ldr	r1, [pc, #120]	; (8004240 <rt_test_006_006_execute+0x1b0>)
 80041c8:	42a8      	cmp	r0, r5
 80041ca:	bfd4      	ite	le
 80041cc:	2000      	movle	r0, #0
 80041ce:	2001      	movgt	r0, #1
 80041d0:	f7fc fc06 	bl	80009e0 <_test_assert>
 80041d4:	4604      	mov	r4, r0
 80041d6:	b158      	cbz	r0, 80041f0 <rt_test_006_006_execute+0x160>
 80041d8:	f385 8811 	msr	BASEPRI, r5
 80041dc:	e773      	b.n	80040c6 <rt_test_006_006_execute+0x36>
 80041de:	f384 8811 	msr	BASEPRI, r4
}
 80041e2:	b004      	add	sp, #16
 80041e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    chSemSignalI(&bsp->sem);
 80041e8:	4628      	mov	r0, r5
 80041ea:	f7fd f931 	bl	8001450 <chSemSignalI>
 80041ee:	e7b6      	b.n	800415e <rt_test_006_006_execute+0xce>
 80041f0:	f380 8811 	msr	BASEPRI, r0
 80041f4:	f386 8811 	msr	BASEPRI, r6
    test_assert_lock(chSemGetCounterI(&bsem.sem) == 1, "unexpected counter");
 80041f8:	9803      	ldr	r0, [sp, #12]
 80041fa:	4910      	ldr	r1, [pc, #64]	; (800423c <rt_test_006_006_execute+0x1ac>)
 80041fc:	f1a0 0001 	sub.w	r0, r0, #1
 8004200:	fab0 f080 	clz	r0, r0
 8004204:	0940      	lsrs	r0, r0, #5
 8004206:	f7fc fbeb 	bl	80009e0 <_test_assert>
 800420a:	2800      	cmp	r0, #0
 800420c:	d1e7      	bne.n	80041de <rt_test_006_006_execute+0x14e>
 800420e:	f380 8811 	msr	BASEPRI, r0
  test_end_step(6);
 8004212:	e758      	b.n	80040c6 <rt_test_006_006_execute+0x36>
 8004214:	4628      	mov	r0, r5
 8004216:	f7fd f91b 	bl	8001450 <chSemSignalI>
 800421a:	e7cb      	b.n	80041b4 <rt_test_006_006_execute+0x124>
 800421c:	2000149c 	.word	0x2000149c
 8004220:	08009f60 	.word	0x08009f60
 8004224:	200009b0 	.word	0x200009b0
 8004228:	08004281 	.word	0x08004281
 800422c:	20000d88 	.word	0x20000d88
 8004230:	200014b4 	.word	0x200014b4
 8004234:	08009f6c 	.word	0x08009f6c
 8004238:	08009f80 	.word	0x08009f80
 800423c:	08009f8c 	.word	0x08009f8c
 8004240:	08009f64 	.word	0x08009f64
	...

08004250 <thread2>:
static THD_FUNCTION(thread2, p) {
 8004250:	b508      	push	{r3, lr}
  chThdSleepMilliseconds(50);
 8004252:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004256:	f7fe fb63 	bl	8002920 <chThdSleep>
 800425a:	2320      	movs	r3, #32
 800425c:	f383 8811 	msr	BASEPRI, r3
  chSemSignalI(&sem1); /* For coverage reasons */
 8004260:	4804      	ldr	r0, [pc, #16]	; (8004274 <thread2+0x24>)
 8004262:	f7fd f8f5 	bl	8001450 <chSemSignalI>
  chSchRescheduleS();
 8004266:	f7ff fb4b 	bl	8003900 <chSchRescheduleS>
 800426a:	2300      	movs	r3, #0
 800426c:	f383 8811 	msr	BASEPRI, r3
}
 8004270:	bd08      	pop	{r3, pc}
 8004272:	bf00      	nop
 8004274:	20000d70 	.word	0x20000d70
	...

08004280 <thread4>:
static THD_FUNCTION(thread4, p) {
 8004280:	b508      	push	{r3, lr}
 8004282:	2220      	movs	r2, #32
 8004284:	f382 8811 	msr	BASEPRI, r2
  if (bsp->sem.cnt < (cnt_t)1) {
 8004288:	6883      	ldr	r3, [r0, #8]
 800428a:	2b00      	cmp	r3, #0
 800428c:	dd05      	ble.n	800429a <thread4+0x1a>
  chSchRescheduleS();
 800428e:	f7ff fb37 	bl	8003900 <chSchRescheduleS>
 8004292:	2300      	movs	r3, #0
 8004294:	f383 8811 	msr	BASEPRI, r3
}
 8004298:	bd08      	pop	{r3, pc}
    chSemSignalI(&bsp->sem);
 800429a:	f7fd f8d9 	bl	8001450 <chSemSignalI>
  chSchRescheduleS();
 800429e:	f7ff fb2f 	bl	8003900 <chSchRescheduleS>
 80042a2:	2300      	movs	r3, #0
 80042a4:	f383 8811 	msr	BASEPRI, r3
 80042a8:	bd08      	pop	{r3, pc}
 80042aa:	bf00      	nop
 80042ac:	0000      	movs	r0, r0
	...

080042b0 <thread1.lto_priv.0>:
static THD_FUNCTION(thread1, p) {
 80042b0:	b510      	push	{r4, lr}
 80042b2:	2320      	movs	r3, #32
 80042b4:	4604      	mov	r4, r0
 80042b6:	f383 8811 	msr	BASEPRI, r3
  if (*trp != NULL) {
 80042ba:	4b09      	ldr	r3, [pc, #36]	; (80042e0 <thread1.lto_priv.0+0x30>)
 80042bc:	6818      	ldr	r0, [r3, #0]
 80042be:	b120      	cbz	r0, 80042ca <thread1.lto_priv.0+0x1a>
    *trp = NULL;
 80042c0:	2200      	movs	r2, #0
    tp->u.rdymsg = msg;
 80042c2:	6242      	str	r2, [r0, #36]	; 0x24
    *trp = NULL;
 80042c4:	601a      	str	r2, [r3, #0]
    (void) chSchReadyI(tp);
 80042c6:	f7fc ffa3 	bl	8001210 <chSchReadyI>
  chSchRescheduleS();
 80042ca:	f7ff fb19 	bl	8003900 <chSchRescheduleS>
 80042ce:	2300      	movs	r3, #0
 80042d0:	f383 8811 	msr	BASEPRI, r3
  test_emit_token(*(char *)p);
 80042d4:	7820      	ldrb	r0, [r4, #0]
}
 80042d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  test_emit_token(*(char *)p);
 80042da:	f7fc bc29 	b.w	8000b30 <test_emit_token>
 80042de:	bf00      	nop
 80042e0:	200014c8 	.word	0x200014c8
	...

080042f0 <chGuardedPoolLoadArray>:
void chGuardedPoolLoadArray(guarded_memory_pool_t *gmp, void *p, size_t n) {
 80042f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80042f4:	4605      	mov	r5, r0
 80042f6:	460c      	mov	r4, r1
 80042f8:	4616      	mov	r6, r2
 80042fa:	f04f 0820 	mov.w	r8, #32
 80042fe:	2700      	movs	r7, #0
 8004300:	f388 8811 	msr	BASEPRI, r8
  php->next = mp->next;
 8004304:	68eb      	ldr	r3, [r5, #12]
 8004306:	6023      	str	r3, [r4, #0]
 * @iclass
 */
static inline void chGuardedPoolFreeI(guarded_memory_pool_t *gmp, void *objp) {

  chPoolFreeI(&gmp->pool, objp);
  chSemSignalI(&gmp->sem);
 8004308:	4628      	mov	r0, r5
  mp->next = php;
 800430a:	60ec      	str	r4, [r5, #12]
 800430c:	f7fd f8a0 	bl	8001450 <chSemSignalI>
 */
void chGuardedPoolFree(guarded_memory_pool_t *gmp, void *objp) {

  chSysLock();
  chGuardedPoolFreeI(gmp, objp);
  chSchRescheduleS();
 8004310:	f7ff faf6 	bl	8003900 <chSchRescheduleS>
 8004314:	f387 8811 	msr	BASEPRI, r7
    p = (void *)(((uint8_t *)p) + gmp->pool.object_size);
 8004318:	692b      	ldr	r3, [r5, #16]
  while (n != 0U) {
 800431a:	3e01      	subs	r6, #1
    p = (void *)(((uint8_t *)p) + gmp->pool.object_size);
 800431c:	441c      	add	r4, r3
  while (n != 0U) {
 800431e:	d1ef      	bne.n	8004300 <chGuardedPoolLoadArray+0x10>
}
 8004320:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08004330 <oslib_test_007_002_execute>:
static void oslib_test_007_002_execute(void) {
 8004330:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    chGuardedPoolLoadArray(&gmp1, objects, MEMORY_POOL_SIZE);
 8004334:	4832      	ldr	r0, [pc, #200]	; (8004400 <oslib_test_007_002_execute+0xd0>)
  test_set_step(1);
 8004336:	4f33      	ldr	r7, [pc, #204]	; (8004404 <oslib_test_007_002_execute+0xd4>)
    chGuardedPoolLoadArray(&gmp1, objects, MEMORY_POOL_SIZE);
 8004338:	4933      	ldr	r1, [pc, #204]	; (8004408 <oslib_test_007_002_execute+0xd8>)
      test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_IMMEDIATE) != NULL, "list empty");
 800433a:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 8004410 <oslib_test_007_002_execute+0xe0>
  test_set_step(1);
 800433e:	2301      	movs	r3, #1
    chGuardedPoolLoadArray(&gmp1, objects, MEMORY_POOL_SIZE);
 8004340:	2204      	movs	r2, #4
 8004342:	4606      	mov	r6, r0
  test_set_step(1);
 8004344:	603b      	str	r3, [r7, #0]
    chGuardedPoolLoadArray(&gmp1, objects, MEMORY_POOL_SIZE);
 8004346:	f7ff ffd3 	bl	80042f0 <chGuardedPoolLoadArray>
  test_set_step(2);
 800434a:	2302      	movs	r3, #2
 800434c:	603b      	str	r3, [r7, #0]
      test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_IMMEDIATE) != NULL, "list empty");
 800434e:	4635      	mov	r5, r6
  test_set_step(2);
 8004350:	2404      	movs	r4, #4
      test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_IMMEDIATE) != NULL, "list empty");
 8004352:	2100      	movs	r1, #0
 8004354:	4628      	mov	r0, r5
 8004356:	f7fe f903 	bl	8002560 <chGuardedPoolAllocTimeout>
 800435a:	3800      	subs	r0, #0
 800435c:	bf18      	it	ne
 800435e:	2001      	movne	r0, #1
 8004360:	4641      	mov	r1, r8
 8004362:	f7fc fb3d 	bl	80009e0 <_test_assert>
 8004366:	2800      	cmp	r0, #0
 8004368:	d148      	bne.n	80043fc <oslib_test_007_002_execute+0xcc>
    for (i = 0; i < MEMORY_POOL_SIZE; i++)
 800436a:	3c01      	subs	r4, #1
 800436c:	d1f1      	bne.n	8004352 <oslib_test_007_002_execute+0x22>
  test_set_step(3);
 800436e:	2303      	movs	r3, #3
    test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_IMMEDIATE) == NULL, "list not empty");
 8004370:	4621      	mov	r1, r4
 8004372:	4823      	ldr	r0, [pc, #140]	; (8004400 <oslib_test_007_002_execute+0xd0>)
  test_set_step(3);
 8004374:	603b      	str	r3, [r7, #0]
    test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_IMMEDIATE) == NULL, "list not empty");
 8004376:	f7fe f8f3 	bl	8002560 <chGuardedPoolAllocTimeout>
 800437a:	fab0 f080 	clz	r0, r0
 800437e:	4923      	ldr	r1, [pc, #140]	; (800440c <oslib_test_007_002_execute+0xdc>)
 8004380:	0940      	lsrs	r0, r0, #5
 8004382:	f7fc fb2d 	bl	80009e0 <_test_assert>
 8004386:	2800      	cmp	r0, #0
 8004388:	d138      	bne.n	80043fc <oslib_test_007_002_execute+0xcc>
  test_set_step(4);
 800438a:	4d1f      	ldr	r5, [pc, #124]	; (8004408 <oslib_test_007_002_execute+0xd8>)
 800438c:	f8df a070 	ldr.w	sl, [pc, #112]	; 8004400 <oslib_test_007_002_execute+0xd0>
 8004390:	2304      	movs	r3, #4
 8004392:	f105 0910 	add.w	r9, r5, #16
 8004396:	603b      	str	r3, [r7, #0]
 8004398:	f04f 0820 	mov.w	r8, #32
      chGuardedPoolFree(&gmp1, &objects[i]);
 800439c:	462b      	mov	r3, r5
 800439e:	f388 8811 	msr	BASEPRI, r8
  php->next = mp->next;
 80043a2:	68f2      	ldr	r2, [r6, #12]
 80043a4:	f845 2b04 	str.w	r2, [r5], #4
 80043a8:	4650      	mov	r0, sl
  mp->next = php;
 80043aa:	60f3      	str	r3, [r6, #12]
 80043ac:	f7fd f850 	bl	8001450 <chSemSignalI>
  chSchRescheduleS();
 80043b0:	f7ff faa6 	bl	8003900 <chSchRescheduleS>
 80043b4:	f384 8811 	msr	BASEPRI, r4
    for (i = 0; i < MEMORY_POOL_SIZE; i++)
 80043b8:	454d      	cmp	r5, r9
 80043ba:	d1ef      	bne.n	800439c <oslib_test_007_002_execute+0x6c>
  test_set_step(5);
 80043bc:	2305      	movs	r3, #5
      test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_IMMEDIATE) != NULL, "list empty");
 80043be:	4e10      	ldr	r6, [pc, #64]	; (8004400 <oslib_test_007_002_execute+0xd0>)
 80043c0:	4d13      	ldr	r5, [pc, #76]	; (8004410 <oslib_test_007_002_execute+0xe0>)
  test_set_step(5);
 80043c2:	603b      	str	r3, [r7, #0]
 80043c4:	2404      	movs	r4, #4
      test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_IMMEDIATE) != NULL, "list empty");
 80043c6:	2100      	movs	r1, #0
 80043c8:	4630      	mov	r0, r6
 80043ca:	f7fe f8c9 	bl	8002560 <chGuardedPoolAllocTimeout>
 80043ce:	3800      	subs	r0, #0
 80043d0:	bf18      	it	ne
 80043d2:	2001      	movne	r0, #1
 80043d4:	4629      	mov	r1, r5
 80043d6:	f7fc fb03 	bl	80009e0 <_test_assert>
 80043da:	b978      	cbnz	r0, 80043fc <oslib_test_007_002_execute+0xcc>
    for (i = 0; i < MEMORY_POOL_SIZE; i++)
 80043dc:	3c01      	subs	r4, #1
 80043de:	d1f2      	bne.n	80043c6 <oslib_test_007_002_execute+0x96>
    test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_IMMEDIATE) == NULL, "list not empty");
 80043e0:	4621      	mov	r1, r4
  test_set_step(6);
 80043e2:	2306      	movs	r3, #6
    test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_IMMEDIATE) == NULL, "list not empty");
 80043e4:	4806      	ldr	r0, [pc, #24]	; (8004400 <oslib_test_007_002_execute+0xd0>)
  test_set_step(6);
 80043e6:	603b      	str	r3, [r7, #0]
    test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_IMMEDIATE) == NULL, "list not empty");
 80043e8:	f7fe f8ba 	bl	8002560 <chGuardedPoolAllocTimeout>
 80043ec:	fab0 f080 	clz	r0, r0
}
 80043f0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_IMMEDIATE) == NULL, "list not empty");
 80043f4:	4905      	ldr	r1, [pc, #20]	; (800440c <oslib_test_007_002_execute+0xdc>)
 80043f6:	0940      	lsrs	r0, r0, #5
 80043f8:	f7fc baf2 	b.w	80009e0 <_test_assert>
}
 80043fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004400:	20000810 	.word	0x20000810
 8004404:	2000149c 	.word	0x2000149c
 8004408:	20000d60 	.word	0x20000d60
 800440c:	08009044 	.word	0x08009044
 8004410:	08009038 	.word	0x08009038
	...

08004420 <chMBFetchTimeout>:
msg_t chMBFetchTimeout(mailbox_t *mbp, msg_t *msgp, sysinterval_t timeout) {
 8004420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004422:	4604      	mov	r4, r0
 8004424:	460e      	mov	r6, r1
 8004426:	4615      	mov	r5, r2
 8004428:	2320      	movs	r3, #32
 800442a:	f383 8811 	msr	BASEPRI, r3
    rdymsg = chThdEnqueueTimeoutS(&mbp->qr, timeout);
 800442e:	18c7      	adds	r7, r0, r3
 8004430:	e004      	b.n	800443c <chMBFetchTimeout+0x1c>
    if (chMBGetUsedCountI(mbp) > (size_t)0) {
 8004432:	6923      	ldr	r3, [r4, #16]
 8004434:	b96b      	cbnz	r3, 8004452 <chMBFetchTimeout+0x32>
    rdymsg = chThdEnqueueTimeoutS(&mbp->qr, timeout);
 8004436:	f7fe f8e3 	bl	8002600 <chThdEnqueueTimeoutS>
  } while (rdymsg == MSG_OK);
 800443a:	b930      	cbnz	r0, 800444a <chMBFetchTimeout+0x2a>
    if (mbp->reset) {
 800443c:	7d23      	ldrb	r3, [r4, #20]
    rdymsg = chThdEnqueueTimeoutS(&mbp->qr, timeout);
 800443e:	4629      	mov	r1, r5
 8004440:	4638      	mov	r0, r7
    if (mbp->reset) {
 8004442:	2b00      	cmp	r3, #0
 8004444:	d0f5      	beq.n	8004432 <chMBFetchTimeout+0x12>
      return MSG_RESET;
 8004446:	f06f 0001 	mvn.w	r0, #1
 800444a:	2300      	movs	r3, #0
 800444c:	f383 8811 	msr	BASEPRI, r3
}
 8004450:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      *msgp = *mbp->rdptr++;
 8004452:	68e2      	ldr	r2, [r4, #12]
      if (mbp->rdptr >= mbp->top) {
 8004454:	6861      	ldr	r1, [r4, #4]
      *msgp = *mbp->rdptr++;
 8004456:	6810      	ldr	r0, [r2, #0]
 8004458:	3204      	adds	r2, #4
      if (mbp->rdptr >= mbp->top) {
 800445a:	428a      	cmp	r2, r1
      *msgp = *mbp->rdptr++;
 800445c:	60e2      	str	r2, [r4, #12]
      mbp->cnt--;
 800445e:	f103 33ff 	add.w	r3, r3, #4294967295
        mbp->rdptr = mbp->buffer;
 8004462:	bf28      	it	cs
 8004464:	6822      	ldrcs	r2, [r4, #0]
      *msgp = *mbp->rdptr++;
 8004466:	6030      	str	r0, [r6, #0]
        mbp->rdptr = mbp->buffer;
 8004468:	bf28      	it	cs
 800446a:	60e2      	strcs	r2, [r4, #12]
      mbp->cnt--;
 800446c:	6123      	str	r3, [r4, #16]
      chThdDequeueNextI(&mbp->qw, MSG_OK);
 800446e:	f104 0018 	add.w	r0, r4, #24
 8004472:	f7fc fee5 	bl	8001240 <chThdDequeueNextI.constprop.0>
      chSchRescheduleS();
 8004476:	f7ff fa43 	bl	8003900 <chSchRescheduleS>
      return MSG_OK;
 800447a:	2000      	movs	r0, #0
 800447c:	2300      	movs	r3, #0
 800447e:	f383 8811 	msr	BASEPRI, r3
}
 8004482:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004490 <Thread1.lto_priv.0>:

static THD_WORKING_AREA(wa1Thread1, 256);
static THD_WORKING_AREA(wa2Thread1, 256);
static THD_FUNCTION(Thread1, arg) {
 8004490:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004494:	4e11      	ldr	r6, [pc, #68]	; (80044dc <Thread1.lto_priv.0+0x4c>)
 8004496:	b082      	sub	sp, #8
 */
static inline msg_t chJobDispatch(jobs_queue_t *jqp) {
  msg_t msg, jmsg;

  /* Waiting for a job.*/
  msg = chMBFetchTimeout(&jqp->mbx, &jmsg, TIME_INFINITE);
 8004498:	f106 071c 	add.w	r7, r6, #28
 800449c:	46b0      	mov	r8, r6
 800449e:	f04f 32ff 	mov.w	r2, #4294967295
 80044a2:	a901      	add	r1, sp, #4
 80044a4:	4638      	mov	r0, r7
 80044a6:	f7ff ffbb 	bl	8004420 <chMBFetchTimeout>
  if (msg == MSG_OK) {
 80044aa:	4604      	mov	r4, r0
 80044ac:	b110      	cbz	r0, 80044b4 <Thread1.lto_priv.0+0x24>
  (void)arg;

  do {
    msg = chJobDispatch(&jq);
  } while (msg == MSG_OK);
}
 80044ae:	b002      	add	sp, #8
 80044b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    job_descriptor_t *jp = (job_descriptor_t *)jmsg;
 80044b4:	9d01      	ldr	r5, [sp, #4]

    chDbgAssert(jp != NULL, "is NULL");

    if (jp->jobfunc != NULL) {
 80044b6:	682b      	ldr	r3, [r5, #0]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d0f8      	beq.n	80044ae <Thread1.lto_priv.0+0x1e>

      /* Invoking the job function.*/
      jp->jobfunc(jp->jobarg);
 80044bc:	6868      	ldr	r0, [r5, #4]
 80044be:	4798      	blx	r3
 80044c0:	2320      	movs	r3, #32
 80044c2:	f383 8811 	msr	BASEPRI, r3
  php->next = mp->next;
 80044c6:	68f3      	ldr	r3, [r6, #12]
 80044c8:	602b      	str	r3, [r5, #0]
 80044ca:	4640      	mov	r0, r8
  mp->next = php;
 80044cc:	60f5      	str	r5, [r6, #12]
 80044ce:	f7fc ffbf 	bl	8001450 <chSemSignalI>
  chSchRescheduleS();
 80044d2:	f7ff fa15 	bl	8003900 <chSchRescheduleS>
 80044d6:	f384 8811 	msr	BASEPRI, r4
  } while (msg == MSG_OK);
 80044da:	e7e0      	b.n	800449e <Thread1.lto_priv.0+0xe>
 80044dc:	20000bec 	.word	0x20000bec

080044e0 <chMBPostTimeout>:
msg_t chMBPostTimeout(mailbox_t *mbp, msg_t msg, sysinterval_t timeout) {
 80044e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80044e4:	2320      	movs	r3, #32
 80044e6:	4604      	mov	r4, r0
 80044e8:	460e      	mov	r6, r1
 80044ea:	4615      	mov	r5, r2
 80044ec:	f383 8811 	msr	BASEPRI, r3
    rdymsg = chThdEnqueueTimeoutS(&mbp->qw, timeout);
 80044f0:	f100 0818 	add.w	r8, r0, #24
 80044f4:	e00a      	b.n	800450c <chMBPostTimeout+0x2c>
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 80044f6:	e9d4 7200 	ldrd	r7, r2, [r4]
 80044fa:	6923      	ldr	r3, [r4, #16]
  return (size_t)(mbp->top - mbp->buffer);
 80044fc:	eba2 0c07 	sub.w	ip, r2, r7
    if (chMBGetFreeCountI(mbp) > (size_t)0) {
 8004500:	ebb3 0fac 	cmp.w	r3, ip, asr #2
 8004504:	d10e      	bne.n	8004524 <chMBPostTimeout+0x44>
    rdymsg = chThdEnqueueTimeoutS(&mbp->qw, timeout);
 8004506:	f7fe f87b 	bl	8002600 <chThdEnqueueTimeoutS>
  } while (rdymsg == MSG_OK);
 800450a:	b930      	cbnz	r0, 800451a <chMBPostTimeout+0x3a>
    if (mbp->reset) {
 800450c:	7d23      	ldrb	r3, [r4, #20]
    rdymsg = chThdEnqueueTimeoutS(&mbp->qw, timeout);
 800450e:	4629      	mov	r1, r5
 8004510:	4640      	mov	r0, r8
    if (mbp->reset) {
 8004512:	2b00      	cmp	r3, #0
 8004514:	d0ef      	beq.n	80044f6 <chMBPostTimeout+0x16>
      return MSG_RESET;
 8004516:	f06f 0001 	mvn.w	r0, #1
 800451a:	2300      	movs	r3, #0
 800451c:	f383 8811 	msr	BASEPRI, r3
}
 8004520:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      *mbp->wrptr++ = msg;
 8004524:	68a0      	ldr	r0, [r4, #8]
 8004526:	1d01      	adds	r1, r0, #4
      if (mbp->wrptr >= mbp->top) {
 8004528:	428a      	cmp	r2, r1
      mbp->cnt++;
 800452a:	f103 0301 	add.w	r3, r3, #1
      *mbp->wrptr++ = msg;
 800452e:	60a1      	str	r1, [r4, #8]
 8004530:	6006      	str	r6, [r0, #0]
        mbp->wrptr = mbp->buffer;
 8004532:	bf98      	it	ls
 8004534:	60a7      	strls	r7, [r4, #8]
      mbp->cnt++;
 8004536:	6123      	str	r3, [r4, #16]
      chThdDequeueNextI(&mbp->qr, MSG_OK);
 8004538:	f104 0020 	add.w	r0, r4, #32
 800453c:	f7fc fe80 	bl	8001240 <chThdDequeueNextI.constprop.0>
      chSchRescheduleS();
 8004540:	f7ff f9de 	bl	8003900 <chSchRescheduleS>
      return MSG_OK;
 8004544:	2000      	movs	r0, #0
 8004546:	2300      	movs	r3, #0
 8004548:	f383 8811 	msr	BASEPRI, r3
}
 800454c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004550 <oslib_test_002_003_execute>:
}

static void oslib_test_002_003_execute(void) {
 8004550:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  msg_t msg1, msg2;
  unsigned i;

  /* [2.3.1] Filling the mailbox.*/
  test_set_step(1);
 8004554:	4f43      	ldr	r7, [pc, #268]	; (8004664 <oslib_test_002_003_execute+0x114>)
 8004556:	f8df 8114 	ldr.w	r8, [pc, #276]	; 800466c <oslib_test_002_003_execute+0x11c>
  {
    for (i = 0; i < MB_SIZE; i++) {
      msg1 = chMBPostTimeout(&mb1, 'B' + i, TIME_INFINITE);
      test_assert(msg1 == MSG_OK, "wrong wake-up message");
 800455a:	4e43      	ldr	r6, [pc, #268]	; (8004668 <oslib_test_002_003_execute+0x118>)
  test_set_step(1);
 800455c:	2301      	movs	r3, #1
static void oslib_test_002_003_execute(void) {
 800455e:	b082      	sub	sp, #8
  test_set_step(1);
 8004560:	603b      	str	r3, [r7, #0]
      msg1 = chMBPostTimeout(&mb1, 'B' + i, TIME_INFINITE);
 8004562:	4645      	mov	r5, r8
  test_set_step(1);
 8004564:	2442      	movs	r4, #66	; 0x42
      msg1 = chMBPostTimeout(&mb1, 'B' + i, TIME_INFINITE);
 8004566:	4621      	mov	r1, r4
 8004568:	f04f 32ff 	mov.w	r2, #4294967295
 800456c:	4628      	mov	r0, r5
 800456e:	f7ff ffb7 	bl	80044e0 <chMBPostTimeout>
      test_assert(msg1 == MSG_OK, "wrong wake-up message");
 8004572:	fab0 f080 	clz	r0, r0
 8004576:	4631      	mov	r1, r6
 8004578:	0940      	lsrs	r0, r0, #5
 800457a:	3401      	adds	r4, #1
 800457c:	f7fc fa30 	bl	80009e0 <_test_assert>
 8004580:	b990      	cbnz	r0, 80045a8 <oslib_test_002_003_execute+0x58>
    for (i = 0; i < MB_SIZE; i++) {
 8004582:	2c46      	cmp	r4, #70	; 0x46
 8004584:	d1ef      	bne.n	8004566 <oslib_test_002_003_execute+0x16>
  }
  test_end_step(1);

  /* [2.3.2] Testing chMBPostTimeout(), chMBPostI(),
     chMBPostAheadTimeout() and chMBPostAheadI() timeout.*/
  test_set_step(2);
 8004586:	2302      	movs	r3, #2
  {
    msg1 = chMBPostTimeout(&mb1, 'X', 1);
 8004588:	2201      	movs	r2, #1
 800458a:	2158      	movs	r1, #88	; 0x58
 800458c:	4837      	ldr	r0, [pc, #220]	; (800466c <oslib_test_002_003_execute+0x11c>)
  test_set_step(2);
 800458e:	603b      	str	r3, [r7, #0]
    msg1 = chMBPostTimeout(&mb1, 'X', 1);
 8004590:	f7ff ffa6 	bl	80044e0 <chMBPostTimeout>
    test_assert(msg1 == MSG_TIMEOUT, "wrong wake-up message");
 8004594:	f1a0 30ff 	sub.w	r0, r0, #4294967295
 8004598:	fab0 f080 	clz	r0, r0
 800459c:	4932      	ldr	r1, [pc, #200]	; (8004668 <oslib_test_002_003_execute+0x118>)
 800459e:	0940      	lsrs	r0, r0, #5
 80045a0:	f7fc fa1e 	bl	80009e0 <_test_assert>
 80045a4:	4604      	mov	r4, r0
 80045a6:	b110      	cbz	r0, 80045ae <oslib_test_002_003_execute+0x5e>
    msg1 = chMBFetchI(&mb1, &msg2);
    chSysUnlock();
    test_assert(msg1 == MSG_TIMEOUT, "wrong wake-up message");
  }
  test_end_step(4);
}
 80045a8:	b002      	add	sp, #8
 80045aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80045ae:	2520      	movs	r5, #32
 80045b0:	f385 8811 	msr	BASEPRI, r5
    msg1 = chMBPostI(&mb1, 'X');
 80045b4:	2058      	movs	r0, #88	; 0x58
 80045b6:	f7fc fe53 	bl	8001260 <chMBPostI.constprop.0>
 80045ba:	f384 8811 	msr	BASEPRI, r4
    test_assert(msg1 == MSG_TIMEOUT, "wrong wake-up message");
 80045be:	f1a0 30ff 	sub.w	r0, r0, #4294967295
 80045c2:	fab0 f080 	clz	r0, r0
 80045c6:	4928      	ldr	r1, [pc, #160]	; (8004668 <oslib_test_002_003_execute+0x118>)
 80045c8:	0940      	lsrs	r0, r0, #5
 80045ca:	f7fc fa09 	bl	80009e0 <_test_assert>
 80045ce:	2800      	cmp	r0, #0
 80045d0:	d1ea      	bne.n	80045a8 <oslib_test_002_003_execute+0x58>
    msg1 = chMBPostAheadTimeout(&mb1, 'X', 1);
 80045d2:	2101      	movs	r1, #1
 80045d4:	2058      	movs	r0, #88	; 0x58
 80045d6:	f7ff faeb 	bl	8003bb0 <chMBPostAheadTimeout.constprop.0>
    test_assert(msg1 == MSG_TIMEOUT, "wrong wake-up message");
 80045da:	f1a0 30ff 	sub.w	r0, r0, #4294967295
 80045de:	fab0 f080 	clz	r0, r0
 80045e2:	4921      	ldr	r1, [pc, #132]	; (8004668 <oslib_test_002_003_execute+0x118>)
 80045e4:	0940      	lsrs	r0, r0, #5
 80045e6:	f7fc f9fb 	bl	80009e0 <_test_assert>
 80045ea:	4604      	mov	r4, r0
 80045ec:	2800      	cmp	r0, #0
 80045ee:	d1db      	bne.n	80045a8 <oslib_test_002_003_execute+0x58>
 80045f0:	f385 8811 	msr	BASEPRI, r5
    msg1 = chMBPostAheadI(&mb1, 'X');
 80045f4:	2058      	movs	r0, #88	; 0x58
 80045f6:	f7fc fe5b 	bl	80012b0 <chMBPostAheadI.constprop.0>
 80045fa:	f384 8811 	msr	BASEPRI, r4
    test_assert(msg1 == MSG_TIMEOUT, "wrong wake-up message");
 80045fe:	f1a0 30ff 	sub.w	r0, r0, #4294967295
 8004602:	fab0 f080 	clz	r0, r0
 8004606:	4918      	ldr	r1, [pc, #96]	; (8004668 <oslib_test_002_003_execute+0x118>)
 8004608:	0940      	lsrs	r0, r0, #5
 800460a:	f7fc f9e9 	bl	80009e0 <_test_assert>
 800460e:	4604      	mov	r4, r0
 8004610:	2800      	cmp	r0, #0
 8004612:	d1c9      	bne.n	80045a8 <oslib_test_002_003_execute+0x58>
  test_set_step(3);
 8004614:	2303      	movs	r3, #3
 8004616:	603b      	str	r3, [r7, #0]
    chMBReset(&mb1);
 8004618:	f7ff fa92 	bl	8003b40 <chMBReset.constprop.0>
  test_set_step(4);
 800461c:	2304      	movs	r3, #4
    msg1 = chMBFetchTimeout(&mb1, &msg2, 1);
 800461e:	a901      	add	r1, sp, #4
 8004620:	2201      	movs	r2, #1
 8004622:	4812      	ldr	r0, [pc, #72]	; (800466c <oslib_test_002_003_execute+0x11c>)
 *
 * @xclass
 */
static inline void chMBResumeX(mailbox_t *mbp) {

  mbp->reset = false;
 8004624:	f888 4014 	strb.w	r4, [r8, #20]
  test_set_step(4);
 8004628:	603b      	str	r3, [r7, #0]
    msg1 = chMBFetchTimeout(&mb1, &msg2, 1);
 800462a:	f7ff fef9 	bl	8004420 <chMBFetchTimeout>
    test_assert(msg1 == MSG_TIMEOUT, "wrong wake-up message");
 800462e:	f1a0 30ff 	sub.w	r0, r0, #4294967295
 8004632:	fab0 f080 	clz	r0, r0
 8004636:	490c      	ldr	r1, [pc, #48]	; (8004668 <oslib_test_002_003_execute+0x118>)
 8004638:	0940      	lsrs	r0, r0, #5
 800463a:	f7fc f9d1 	bl	80009e0 <_test_assert>
 800463e:	4604      	mov	r4, r0
 8004640:	2800      	cmp	r0, #0
 8004642:	d1b1      	bne.n	80045a8 <oslib_test_002_003_execute+0x58>
 8004644:	f385 8811 	msr	BASEPRI, r5
    msg1 = chMBFetchI(&mb1, &msg2);
 8004648:	a801      	add	r0, sp, #4
 800464a:	f7fc fe59 	bl	8001300 <chMBFetchI.constprop.0>
 800464e:	f384 8811 	msr	BASEPRI, r4
    test_assert(msg1 == MSG_TIMEOUT, "wrong wake-up message");
 8004652:	f1a0 30ff 	sub.w	r0, r0, #4294967295
 8004656:	fab0 f080 	clz	r0, r0
 800465a:	4903      	ldr	r1, [pc, #12]	; (8004668 <oslib_test_002_003_execute+0x118>)
 800465c:	0940      	lsrs	r0, r0, #5
 800465e:	f7fc f9bf 	bl	80009e0 <_test_assert>
 8004662:	e7a1      	b.n	80045a8 <oslib_test_002_003_execute+0x58>
 8004664:	2000149c 	.word	0x2000149c
 8004668:	08009fa0 	.word	0x08009fa0
 800466c:	2000084c 	.word	0x2000084c

08004670 <oslib_test_002_002_execute>:
static void oslib_test_002_002_execute(void) {
 8004670:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  test_set_step(1);
 8004674:	4faf      	ldr	r7, [pc, #700]	; (8004934 <oslib_test_002_002_execute+0x2c4>)
 8004676:	f04f 0801 	mov.w	r8, #1
static void oslib_test_002_002_execute(void) {
 800467a:	b082      	sub	sp, #8
  test_set_step(1);
 800467c:	f8c7 8000 	str.w	r8, [r7]
 8004680:	2620      	movs	r6, #32
 8004682:	f386 8811 	msr	BASEPRI, r6
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 8004686:	4cac      	ldr	r4, [pc, #688]	; (8004938 <oslib_test_002_002_execute+0x2c8>)
    test_assert_lock(chMBGetFreeCountI(&mb1) == MB_SIZE, "wrong size");
 8004688:	49ac      	ldr	r1, [pc, #688]	; (800493c <oslib_test_002_002_execute+0x2cc>)
 800468a:	6920      	ldr	r0, [r4, #16]
  return (size_t)(mbp->top - mbp->buffer);
 800468c:	e9d4 2300 	ldrd	r2, r3, [r4]
 8004690:	1a9b      	subs	r3, r3, r2
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 8004692:	ebc0 00a3 	rsb	r0, r0, r3, asr #2
 8004696:	f1a0 0004 	sub.w	r0, r0, #4
 800469a:	fab0 f080 	clz	r0, r0
 800469e:	0940      	lsrs	r0, r0, #5
 80046a0:	f7fc f99e 	bl	80009e0 <_test_assert>
 80046a4:	b128      	cbz	r0, 80046b2 <oslib_test_002_002_execute+0x42>
 80046a6:	2300      	movs	r3, #0
 80046a8:	f383 8811 	msr	BASEPRI, r3
}
 80046ac:	b002      	add	sp, #8
 80046ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046b2:	4605      	mov	r5, r0
 80046b4:	f380 8811 	msr	BASEPRI, r0
  test_set_step(2);
 80046b8:	2302      	movs	r3, #2
 80046ba:	603b      	str	r3, [r7, #0]
 80046bc:	f386 8811 	msr	BASEPRI, r6
  mbp->wrptr = mbp->buffer;
 80046c0:	6823      	ldr	r3, [r4, #0]
  mbp->cnt   = (size_t)0;
 80046c2:	6120      	str	r0, [r4, #16]
  chThdDequeueAllI(&mbp->qw, MSG_RESET);
 80046c4:	f104 0018 	add.w	r0, r4, #24
  mbp->rdptr = mbp->buffer;
 80046c8:	e9c4 3302 	strd	r3, r3, [r4, #8]
  mbp->reset = true;
 80046cc:	f884 8014 	strb.w	r8, [r4, #20]
  chThdDequeueAllI(&mbp->qw, MSG_RESET);
 80046d0:	f7fc fe3e 	bl	8001350 <chThdDequeueAllI.constprop.0>
  chThdDequeueAllI(&mbp->qr, MSG_RESET);
 80046d4:	f104 0020 	add.w	r0, r4, #32
 80046d8:	f7fc fe3a 	bl	8001350 <chThdDequeueAllI.constprop.0>
 80046dc:	f385 8811 	msr	BASEPRI, r5
 80046e0:	f386 8811 	msr	BASEPRI, r6
  return (size_t)(mbp->top - mbp->buffer);
 80046e4:	e9d4 2300 	ldrd	r2, r3, [r4]
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 80046e8:	6920      	ldr	r0, [r4, #16]
    test_assert_lock(chMBGetFreeCountI(&mb1) == MB_SIZE, "not empty");
 80046ea:	4995      	ldr	r1, [pc, #596]	; (8004940 <oslib_test_002_002_execute+0x2d0>)
  return (size_t)(mbp->top - mbp->buffer);
 80046ec:	1a9b      	subs	r3, r3, r2
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 80046ee:	ebc0 00a3 	rsb	r0, r0, r3, asr #2
 80046f2:	f1a0 0004 	sub.w	r0, r0, #4
 80046f6:	fab0 f080 	clz	r0, r0
 80046fa:	0940      	lsrs	r0, r0, #5
 80046fc:	f7fc f970 	bl	80009e0 <_test_assert>
 8004700:	4680      	mov	r8, r0
 8004702:	b988      	cbnz	r0, 8004728 <oslib_test_002_002_execute+0xb8>
 8004704:	f380 8811 	msr	BASEPRI, r0
 8004708:	f386 8811 	msr	BASEPRI, r6
    test_assert_lock(chMBGetUsedCountI(&mb1) == 0, "still full");
 800470c:	6920      	ldr	r0, [r4, #16]
 800470e:	498d      	ldr	r1, [pc, #564]	; (8004944 <oslib_test_002_002_execute+0x2d4>)
 8004710:	fab0 f080 	clz	r0, r0
 8004714:	0940      	lsrs	r0, r0, #5
 8004716:	f7fc f963 	bl	80009e0 <_test_assert>
 800471a:	4605      	mov	r5, r0
 800471c:	b148      	cbz	r0, 8004732 <oslib_test_002_002_execute+0xc2>
 800471e:	f388 8811 	msr	BASEPRI, r8
}
 8004722:	b002      	add	sp, #8
 8004724:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004728:	f385 8811 	msr	BASEPRI, r5
 800472c:	b002      	add	sp, #8
 800472e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004732:	f380 8811 	msr	BASEPRI, r0
 8004736:	f386 8811 	msr	BASEPRI, r6
    test_assert_lock(mb1.buffer == mb1.wrptr, "write pointer not aligned to base");
 800473a:	6820      	ldr	r0, [r4, #0]
 800473c:	68a3      	ldr	r3, [r4, #8]
 800473e:	4982      	ldr	r1, [pc, #520]	; (8004948 <oslib_test_002_002_execute+0x2d8>)
 8004740:	1ac0      	subs	r0, r0, r3
 8004742:	fab0 f080 	clz	r0, r0
 8004746:	0940      	lsrs	r0, r0, #5
 8004748:	f7fc f94a 	bl	80009e0 <_test_assert>
 800474c:	4680      	mov	r8, r0
 800474e:	2800      	cmp	r0, #0
 8004750:	d1ea      	bne.n	8004728 <oslib_test_002_002_execute+0xb8>
 8004752:	f380 8811 	msr	BASEPRI, r0
 8004756:	f386 8811 	msr	BASEPRI, r6
    test_assert_lock(mb1.buffer == mb1.rdptr, "read pointer not aligned to base");
 800475a:	6820      	ldr	r0, [r4, #0]
 800475c:	68e3      	ldr	r3, [r4, #12]
 800475e:	497b      	ldr	r1, [pc, #492]	; (800494c <oslib_test_002_002_execute+0x2dc>)
 8004760:	1ac0      	subs	r0, r0, r3
 8004762:	fab0 f080 	clz	r0, r0
 8004766:	0940      	lsrs	r0, r0, #5
 8004768:	f7fc f93a 	bl	80009e0 <_test_assert>
 800476c:	4605      	mov	r5, r0
 800476e:	2800      	cmp	r0, #0
 8004770:	d1d5      	bne.n	800471e <oslib_test_002_002_execute+0xae>
 8004772:	f380 8811 	msr	BASEPRI, r0
  test_set_step(3);
 8004776:	2303      	movs	r3, #3
      test_assert(msg1 == MSG_OK, "wrong wake-up message");
 8004778:	f8df a1d4 	ldr.w	sl, [pc, #468]	; 8004950 <oslib_test_002_002_execute+0x2e0>
  mbp->reset = false;
 800477c:	7520      	strb	r0, [r4, #20]
  test_set_step(3);
 800477e:	603b      	str	r3, [r7, #0]
 8004780:	f04f 0942 	mov.w	r9, #66	; 0x42
 8004784:	f386 8811 	msr	BASEPRI, r6
      msg1 = chMBPostI(&mb1, 'B' + i);
 8004788:	4648      	mov	r0, r9
 800478a:	f7fc fd69 	bl	8001260 <chMBPostI.constprop.0>
 800478e:	f385 8811 	msr	BASEPRI, r5
      test_assert(msg1 == MSG_OK, "wrong wake-up message");
 8004792:	fab0 f080 	clz	r0, r0
 8004796:	0940      	lsrs	r0, r0, #5
 8004798:	4651      	mov	r1, sl
 800479a:	f7fc f921 	bl	80009e0 <_test_assert>
    for (i = 0; i < MB_SIZE - 1; i++) {
 800479e:	f109 0901 	add.w	r9, r9, #1
      test_assert(msg1 == MSG_OK, "wrong wake-up message");
 80047a2:	4680      	mov	r8, r0
 80047a4:	2800      	cmp	r0, #0
 80047a6:	d181      	bne.n	80046ac <oslib_test_002_002_execute+0x3c>
    for (i = 0; i < MB_SIZE - 1; i++) {
 80047a8:	f1b9 0f45 	cmp.w	r9, #69	; 0x45
 80047ac:	d1ea      	bne.n	8004784 <oslib_test_002_002_execute+0x114>
 80047ae:	f386 8811 	msr	BASEPRI, r6
    msg1 = chMBPostAheadI(&mb1, 'A');
 80047b2:	2041      	movs	r0, #65	; 0x41
 80047b4:	f7fc fd7c 	bl	80012b0 <chMBPostAheadI.constprop.0>
 80047b8:	f388 8811 	msr	BASEPRI, r8
    test_assert(msg1 == MSG_OK, "wrong wake-up message");
 80047bc:	fab0 f080 	clz	r0, r0
 80047c0:	4963      	ldr	r1, [pc, #396]	; (8004950 <oslib_test_002_002_execute+0x2e0>)
 80047c2:	0940      	lsrs	r0, r0, #5
 80047c4:	f7fc f90c 	bl	80009e0 <_test_assert>
 80047c8:	4605      	mov	r5, r0
 80047ca:	2800      	cmp	r0, #0
 80047cc:	f47f af6e 	bne.w	80046ac <oslib_test_002_002_execute+0x3c>
  test_set_step(4);
 80047d0:	f04f 0904 	mov.w	r9, #4
 80047d4:	f8c7 9000 	str.w	r9, [r7]
 80047d8:	f386 8811 	msr	BASEPRI, r6
  return (size_t)(mbp->top - mbp->buffer);
 80047dc:	e9d4 1300 	ldrd	r1, r3, [r4]
    test_assert_lock(chMBGetFreeCountI(&mb1) == 0, "still empty");
 80047e0:	6922      	ldr	r2, [r4, #16]
 80047e2:	1a5b      	subs	r3, r3, r1
 80047e4:	ebb2 0fa3 	cmp.w	r2, r3, asr #2
 80047e8:	495a      	ldr	r1, [pc, #360]	; (8004954 <oslib_test_002_002_execute+0x2e4>)
 80047ea:	bf0c      	ite	eq
 80047ec:	2001      	moveq	r0, #1
 80047ee:	2000      	movne	r0, #0
 80047f0:	f7fc f8f6 	bl	80009e0 <_test_assert>
 80047f4:	4680      	mov	r8, r0
 80047f6:	2800      	cmp	r0, #0
 80047f8:	d196      	bne.n	8004728 <oslib_test_002_002_execute+0xb8>
 80047fa:	f380 8811 	msr	BASEPRI, r0
 80047fe:	f386 8811 	msr	BASEPRI, r6
    test_assert_lock(chMBGetUsedCountI(&mb1) == MB_SIZE, "not full");
 8004802:	6920      	ldr	r0, [r4, #16]
 8004804:	4954      	ldr	r1, [pc, #336]	; (8004958 <oslib_test_002_002_execute+0x2e8>)
 8004806:	f1a0 0004 	sub.w	r0, r0, #4
 800480a:	fab0 f080 	clz	r0, r0
 800480e:	0940      	lsrs	r0, r0, #5
 8004810:	f7fc f8e6 	bl	80009e0 <_test_assert>
 8004814:	4605      	mov	r5, r0
 8004816:	2800      	cmp	r0, #0
 8004818:	d181      	bne.n	800471e <oslib_test_002_002_execute+0xae>
 800481a:	f380 8811 	msr	BASEPRI, r0
 800481e:	f386 8811 	msr	BASEPRI, r6
    test_assert_lock(mb1.rdptr == mb1.wrptr, "pointers not aligned");
 8004822:	e9d4 3002 	ldrd	r3, r0, [r4, #8]
 8004826:	1ac0      	subs	r0, r0, r3
 8004828:	fab0 f080 	clz	r0, r0
 800482c:	494b      	ldr	r1, [pc, #300]	; (800495c <oslib_test_002_002_execute+0x2ec>)
 800482e:	0940      	lsrs	r0, r0, #5
 8004830:	f7fc f8d6 	bl	80009e0 <_test_assert>
 8004834:	2800      	cmp	r0, #0
 8004836:	f47f af77 	bne.w	8004728 <oslib_test_002_002_execute+0xb8>
 800483a:	f380 8811 	msr	BASEPRI, r0
  test_set_step(5);
 800483e:	2305      	movs	r3, #5
      test_assert(msg1 == MSG_OK, "wrong wake-up message");
 8004840:	4e43      	ldr	r6, [pc, #268]	; (8004950 <oslib_test_002_002_execute+0x2e0>)
  test_set_step(5);
 8004842:	603b      	str	r3, [r7, #0]
 8004844:	4605      	mov	r5, r0
 8004846:	f04f 0820 	mov.w	r8, #32
 800484a:	f388 8811 	msr	BASEPRI, r8
      msg1 = chMBFetchI(&mb1, &msg2);
 800484e:	a801      	add	r0, sp, #4
 8004850:	f7fc fd56 	bl	8001300 <chMBFetchI.constprop.0>
 8004854:	f385 8811 	msr	BASEPRI, r5
      test_assert(msg1 == MSG_OK, "wrong wake-up message");
 8004858:	fab0 f080 	clz	r0, r0
 800485c:	0940      	lsrs	r0, r0, #5
 800485e:	4631      	mov	r1, r6
 8004860:	f7fc f8be 	bl	80009e0 <_test_assert>
 8004864:	2800      	cmp	r0, #0
 8004866:	f47f af21 	bne.w	80046ac <oslib_test_002_002_execute+0x3c>
      test_emit_token(msg2);
 800486a:	f89d 0004 	ldrb.w	r0, [sp, #4]
 800486e:	f7fc f95f 	bl	8000b30 <test_emit_token>
    for (i = 0; i < MB_SIZE; i++) {
 8004872:	f1b9 0901 	subs.w	r9, r9, #1
 8004876:	d1e8      	bne.n	800484a <oslib_test_002_002_execute+0x1da>
    test_assert_sequence("ABCD", "wrong get sequence");
 8004878:	4939      	ldr	r1, [pc, #228]	; (8004960 <oslib_test_002_002_execute+0x2f0>)
 800487a:	483a      	ldr	r0, [pc, #232]	; (8004964 <oslib_test_002_002_execute+0x2f4>)
 800487c:	f7fc fa30 	bl	8000ce0 <_test_assert_sequence>
 8004880:	2800      	cmp	r0, #0
 8004882:	f47f af13 	bne.w	80046ac <oslib_test_002_002_execute+0x3c>
  test_set_step(6);
 8004886:	2306      	movs	r3, #6
    msg1 = chMBPostTimeout(&mb1, 'B' + i, TIME_INFINITE);
 8004888:	2146      	movs	r1, #70	; 0x46
 800488a:	482b      	ldr	r0, [pc, #172]	; (8004938 <oslib_test_002_002_execute+0x2c8>)
  test_set_step(6);
 800488c:	603b      	str	r3, [r7, #0]
    msg1 = chMBPostTimeout(&mb1, 'B' + i, TIME_INFINITE);
 800488e:	f04f 32ff 	mov.w	r2, #4294967295
 8004892:	f7ff fe25 	bl	80044e0 <chMBPostTimeout>
    test_assert(msg1 == MSG_OK, "wrong wake-up message");
 8004896:	fab0 f080 	clz	r0, r0
 800489a:	492d      	ldr	r1, [pc, #180]	; (8004950 <oslib_test_002_002_execute+0x2e0>)
 800489c:	0940      	lsrs	r0, r0, #5
 800489e:	f7fc f89f 	bl	80009e0 <_test_assert>
 80048a2:	2800      	cmp	r0, #0
 80048a4:	f47f af02 	bne.w	80046ac <oslib_test_002_002_execute+0x3c>
    msg1 = chMBFetchTimeout(&mb1, &msg2, TIME_INFINITE);
 80048a8:	a901      	add	r1, sp, #4
 80048aa:	4823      	ldr	r0, [pc, #140]	; (8004938 <oslib_test_002_002_execute+0x2c8>)
 80048ac:	f04f 32ff 	mov.w	r2, #4294967295
 80048b0:	f7ff fdb6 	bl	8004420 <chMBFetchTimeout>
    test_assert(msg1 == MSG_OK, "wrong wake-up message");
 80048b4:	fab0 f080 	clz	r0, r0
 80048b8:	4925      	ldr	r1, [pc, #148]	; (8004950 <oslib_test_002_002_execute+0x2e0>)
 80048ba:	0940      	lsrs	r0, r0, #5
 80048bc:	f7fc f890 	bl	80009e0 <_test_assert>
 80048c0:	2800      	cmp	r0, #0
 80048c2:	f47f aef3 	bne.w	80046ac <oslib_test_002_002_execute+0x3c>
  test_set_step(7);
 80048c6:	2307      	movs	r3, #7
 80048c8:	603b      	str	r3, [r7, #0]
 80048ca:	f388 8811 	msr	BASEPRI, r8
 80048ce:	e9d4 1200 	ldrd	r1, r2, [r4]
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 80048d2:	6923      	ldr	r3, [r4, #16]
  return (size_t)(mbp->top - mbp->buffer);
 80048d4:	1a52      	subs	r2, r2, r1
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 80048d6:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
    test_assert_lock(chMBGetFreeCountI(&mb1) == MB_SIZE, "not empty");
 80048da:	1f19      	subs	r1, r3, #4
 80048dc:	4248      	negs	r0, r1
 80048de:	4148      	adcs	r0, r1
 80048e0:	4917      	ldr	r1, [pc, #92]	; (8004940 <oslib_test_002_002_execute+0x2d0>)
 80048e2:	f7fc f87d 	bl	80009e0 <_test_assert>
 80048e6:	bb08      	cbnz	r0, 800492c <oslib_test_002_002_execute+0x2bc>
 80048e8:	f389 8811 	msr	BASEPRI, r9
 80048ec:	f388 8811 	msr	BASEPRI, r8
    test_assert_lock(chMBGetUsedCountI(&mb1) == 0, "still full");
 80048f0:	6920      	ldr	r0, [r4, #16]
 80048f2:	4914      	ldr	r1, [pc, #80]	; (8004944 <oslib_test_002_002_execute+0x2d4>)
 80048f4:	fab0 f080 	clz	r0, r0
 80048f8:	0940      	lsrs	r0, r0, #5
 80048fa:	f7fc f871 	bl	80009e0 <_test_assert>
 80048fe:	b9a8      	cbnz	r0, 800492c <oslib_test_002_002_execute+0x2bc>
 8004900:	f389 8811 	msr	BASEPRI, r9
    test_assert(mb1.buffer == mb1.wrptr, "write pointer not aligned to base");
 8004904:	6820      	ldr	r0, [r4, #0]
 8004906:	68a3      	ldr	r3, [r4, #8]
 8004908:	490f      	ldr	r1, [pc, #60]	; (8004948 <oslib_test_002_002_execute+0x2d8>)
 800490a:	1ac2      	subs	r2, r0, r3
 800490c:	4250      	negs	r0, r2
 800490e:	4150      	adcs	r0, r2
 8004910:	f7fc f866 	bl	80009e0 <_test_assert>
 8004914:	2800      	cmp	r0, #0
 8004916:	f47f aec9 	bne.w	80046ac <oslib_test_002_002_execute+0x3c>
    test_assert(mb1.buffer == mb1.rdptr, "read pointer not aligned to base");
 800491a:	6820      	ldr	r0, [r4, #0]
 800491c:	68e3      	ldr	r3, [r4, #12]
 800491e:	490b      	ldr	r1, [pc, #44]	; (800494c <oslib_test_002_002_execute+0x2dc>)
 8004920:	1ac3      	subs	r3, r0, r3
 8004922:	4258      	negs	r0, r3
 8004924:	4158      	adcs	r0, r3
 8004926:	f7fc f85b 	bl	80009e0 <_test_assert>
 800492a:	e6bf      	b.n	80046ac <oslib_test_002_002_execute+0x3c>
 800492c:	f389 8811 	msr	BASEPRI, r9
    test_assert_lock(chMBGetUsedCountI(&mb1) == 0, "still full");
 8004930:	e6bc      	b.n	80046ac <oslib_test_002_002_execute+0x3c>
 8004932:	bf00      	nop
 8004934:	2000149c 	.word	0x2000149c
 8004938:	2000084c 	.word	0x2000084c
 800493c:	08009fb8 	.word	0x08009fb8
 8004940:	08009fc4 	.word	0x08009fc4
 8004944:	08009fd0 	.word	0x08009fd0
 8004948:	08009fdc 	.word	0x08009fdc
 800494c:	0800a000 	.word	0x0800a000
 8004950:	08009fa0 	.word	0x08009fa0
 8004954:	0800a024 	.word	0x0800a024
 8004958:	0800a030 	.word	0x0800a030
 800495c:	0800a03c 	.word	0x0800a03c
 8004960:	0800a054 	.word	0x0800a054
 8004964:	0800a068 	.word	0x0800a068
	...

08004970 <oslib_test_002_001_execute>:
static void oslib_test_002_001_execute(void) {
 8004970:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  test_set_step(1);
 8004974:	4fbb      	ldr	r7, [pc, #748]	; (8004c64 <oslib_test_002_001_execute+0x2f4>)
 8004976:	2301      	movs	r3, #1
static void oslib_test_002_001_execute(void) {
 8004978:	b082      	sub	sp, #8
  test_set_step(1);
 800497a:	603b      	str	r3, [r7, #0]
 800497c:	2620      	movs	r6, #32
 800497e:	f386 8811 	msr	BASEPRI, r6
 8004982:	4cb9      	ldr	r4, [pc, #740]	; (8004c68 <oslib_test_002_001_execute+0x2f8>)
    test_assert_lock(chMBGetFreeCountI(&mb1) == MB_SIZE, "wrong size");
 8004984:	49b9      	ldr	r1, [pc, #740]	; (8004c6c <oslib_test_002_001_execute+0x2fc>)
 8004986:	6920      	ldr	r0, [r4, #16]
  return (size_t)(mbp->top - mbp->buffer);
 8004988:	e9d4 2300 	ldrd	r2, r3, [r4]
 800498c:	1a9b      	subs	r3, r3, r2
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 800498e:	ebc0 00a3 	rsb	r0, r0, r3, asr #2
 8004992:	f1a0 0004 	sub.w	r0, r0, #4
 8004996:	fab0 f080 	clz	r0, r0
 800499a:	0940      	lsrs	r0, r0, #5
 800499c:	f7fc f820 	bl	80009e0 <_test_assert>
 80049a0:	b128      	cbz	r0, 80049ae <oslib_test_002_001_execute+0x3e>
 80049a2:	2300      	movs	r3, #0
 80049a4:	f383 8811 	msr	BASEPRI, r3
}
 80049a8:	b002      	add	sp, #8
 80049aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80049ae:	4605      	mov	r5, r0
 80049b0:	f380 8811 	msr	BASEPRI, r0
  test_set_step(2);
 80049b4:	2302      	movs	r3, #2
 80049b6:	603b      	str	r3, [r7, #0]
    chMBReset(&mb1);
 80049b8:	f7ff f8c2 	bl	8003b40 <chMBReset.constprop.0>
 80049bc:	f386 8811 	msr	BASEPRI, r6
  return (size_t)(mbp->top - mbp->buffer);
 80049c0:	e9d4 2300 	ldrd	r2, r3, [r4]
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 80049c4:	6920      	ldr	r0, [r4, #16]
    test_assert_lock(chMBGetFreeCountI(&mb1) == MB_SIZE, "not empty");
 80049c6:	49aa      	ldr	r1, [pc, #680]	; (8004c70 <oslib_test_002_001_execute+0x300>)
  return (size_t)(mbp->top - mbp->buffer);
 80049c8:	1a9b      	subs	r3, r3, r2
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 80049ca:	ebc0 00a3 	rsb	r0, r0, r3, asr #2
 80049ce:	f1a0 0004 	sub.w	r0, r0, #4
 80049d2:	fab0 f080 	clz	r0, r0
 80049d6:	0940      	lsrs	r0, r0, #5
 80049d8:	f7fc f802 	bl	80009e0 <_test_assert>
 80049dc:	4680      	mov	r8, r0
 80049de:	b988      	cbnz	r0, 8004a04 <oslib_test_002_001_execute+0x94>
 80049e0:	f380 8811 	msr	BASEPRI, r0
 80049e4:	f386 8811 	msr	BASEPRI, r6
    test_assert_lock(chMBGetUsedCountI(&mb1) == 0, "still full");
 80049e8:	6920      	ldr	r0, [r4, #16]
 80049ea:	49a2      	ldr	r1, [pc, #648]	; (8004c74 <oslib_test_002_001_execute+0x304>)
 80049ec:	fab0 f080 	clz	r0, r0
 80049f0:	0940      	lsrs	r0, r0, #5
 80049f2:	f7fb fff5 	bl	80009e0 <_test_assert>
 80049f6:	4605      	mov	r5, r0
 80049f8:	b148      	cbz	r0, 8004a0e <oslib_test_002_001_execute+0x9e>
 80049fa:	f388 8811 	msr	BASEPRI, r8
}
 80049fe:	b002      	add	sp, #8
 8004a00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a04:	f385 8811 	msr	BASEPRI, r5
 8004a08:	b002      	add	sp, #8
 8004a0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a0e:	f380 8811 	msr	BASEPRI, r0
 8004a12:	f386 8811 	msr	BASEPRI, r6
    test_assert_lock(mb1.buffer == mb1.wrptr, "write pointer not aligned to base");
 8004a16:	6820      	ldr	r0, [r4, #0]
 8004a18:	68a3      	ldr	r3, [r4, #8]
 8004a1a:	4997      	ldr	r1, [pc, #604]	; (8004c78 <oslib_test_002_001_execute+0x308>)
 8004a1c:	1ac0      	subs	r0, r0, r3
 8004a1e:	fab0 f080 	clz	r0, r0
 8004a22:	0940      	lsrs	r0, r0, #5
 8004a24:	f7fb ffdc 	bl	80009e0 <_test_assert>
 8004a28:	4680      	mov	r8, r0
 8004a2a:	2800      	cmp	r0, #0
 8004a2c:	d1ea      	bne.n	8004a04 <oslib_test_002_001_execute+0x94>
 8004a2e:	f380 8811 	msr	BASEPRI, r0
 8004a32:	f386 8811 	msr	BASEPRI, r6
    test_assert_lock(mb1.buffer == mb1.rdptr, "read pointer not aligned to base");
 8004a36:	6820      	ldr	r0, [r4, #0]
 8004a38:	68e3      	ldr	r3, [r4, #12]
 8004a3a:	4990      	ldr	r1, [pc, #576]	; (8004c7c <oslib_test_002_001_execute+0x30c>)
 8004a3c:	1ac0      	subs	r0, r0, r3
 8004a3e:	fab0 f080 	clz	r0, r0
 8004a42:	0940      	lsrs	r0, r0, #5
 8004a44:	f7fb ffcc 	bl	80009e0 <_test_assert>
 8004a48:	2800      	cmp	r0, #0
 8004a4a:	d1d6      	bne.n	80049fa <oslib_test_002_001_execute+0x8a>
 8004a4c:	f380 8811 	msr	BASEPRI, r0
  test_set_step(3);
 8004a50:	2303      	movs	r3, #3
    msg1 = chMBPostTimeout(&mb1, (msg_t)0, TIME_INFINITE);
 8004a52:	4601      	mov	r1, r0
 8004a54:	f04f 32ff 	mov.w	r2, #4294967295
 8004a58:	4620      	mov	r0, r4
  test_set_step(3);
 8004a5a:	603b      	str	r3, [r7, #0]
    msg1 = chMBPostTimeout(&mb1, (msg_t)0, TIME_INFINITE);
 8004a5c:	f7ff fd40 	bl	80044e0 <chMBPostTimeout>
    test_assert(msg1 == MSG_RESET, "not in reset state");
 8004a60:	1c81      	adds	r1, r0, #2
 8004a62:	bf14      	ite	ne
 8004a64:	2000      	movne	r0, #0
 8004a66:	2001      	moveq	r0, #1
 8004a68:	4985      	ldr	r1, [pc, #532]	; (8004c80 <oslib_test_002_001_execute+0x310>)
 8004a6a:	f7fb ffb9 	bl	80009e0 <_test_assert>
 8004a6e:	2800      	cmp	r0, #0
 8004a70:	d19a      	bne.n	80049a8 <oslib_test_002_001_execute+0x38>
    msg1 = chMBPostAheadTimeout(&mb1, (msg_t)0, TIME_INFINITE);
 8004a72:	f04f 31ff 	mov.w	r1, #4294967295
 8004a76:	f7ff f89b 	bl	8003bb0 <chMBPostAheadTimeout.constprop.0>
    test_assert(msg1 == MSG_RESET, "not in reset state");
 8004a7a:	1c82      	adds	r2, r0, #2
 8004a7c:	bf14      	ite	ne
 8004a7e:	2000      	movne	r0, #0
 8004a80:	2001      	moveq	r0, #1
 8004a82:	497f      	ldr	r1, [pc, #508]	; (8004c80 <oslib_test_002_001_execute+0x310>)
 8004a84:	f7fb ffac 	bl	80009e0 <_test_assert>
 8004a88:	2800      	cmp	r0, #0
 8004a8a:	d18d      	bne.n	80049a8 <oslib_test_002_001_execute+0x38>
    msg1 = chMBFetchTimeout(&mb1, &msg2, TIME_INFINITE);
 8004a8c:	a901      	add	r1, sp, #4
 8004a8e:	f04f 32ff 	mov.w	r2, #4294967295
 8004a92:	4620      	mov	r0, r4
 8004a94:	f7ff fcc4 	bl	8004420 <chMBFetchTimeout>
    test_assert(msg1 == MSG_RESET, "not in reset state");
 8004a98:	1c83      	adds	r3, r0, #2
 8004a9a:	bf14      	ite	ne
 8004a9c:	2000      	movne	r0, #0
 8004a9e:	2001      	moveq	r0, #1
 8004aa0:	4977      	ldr	r1, [pc, #476]	; (8004c80 <oslib_test_002_001_execute+0x310>)
 8004aa2:	f7fb ff9d 	bl	80009e0 <_test_assert>
 8004aa6:	2800      	cmp	r0, #0
 8004aa8:	f47f af7e 	bne.w	80049a8 <oslib_test_002_001_execute+0x38>
  test_set_step(4);
 8004aac:	2304      	movs	r3, #4
      test_assert(msg1 == MSG_OK, "wrong wake-up message");
 8004aae:	f8df 81d4 	ldr.w	r8, [pc, #468]	; 8004c84 <oslib_test_002_001_execute+0x314>
  mbp->reset = false;
 8004ab2:	7520      	strb	r0, [r4, #20]
  test_set_step(4);
 8004ab4:	603b      	str	r3, [r7, #0]
 8004ab6:	2542      	movs	r5, #66	; 0x42
      msg1 = chMBPostTimeout(&mb1, 'B' + i, TIME_INFINITE);
 8004ab8:	4626      	mov	r6, r4
 8004aba:	4629      	mov	r1, r5
 8004abc:	f04f 32ff 	mov.w	r2, #4294967295
 8004ac0:	4630      	mov	r0, r6
 8004ac2:	f7ff fd0d 	bl	80044e0 <chMBPostTimeout>
      test_assert(msg1 == MSG_OK, "wrong wake-up message");
 8004ac6:	fab0 f080 	clz	r0, r0
 8004aca:	4641      	mov	r1, r8
 8004acc:	0940      	lsrs	r0, r0, #5
 8004ace:	3501      	adds	r5, #1
 8004ad0:	f7fb ff86 	bl	80009e0 <_test_assert>
 8004ad4:	2800      	cmp	r0, #0
 8004ad6:	f47f af67 	bne.w	80049a8 <oslib_test_002_001_execute+0x38>
    for (i = 0; i < MB_SIZE - 1; i++) {
 8004ada:	2d45      	cmp	r5, #69	; 0x45
 8004adc:	d1ed      	bne.n	8004aba <oslib_test_002_001_execute+0x14a>
    msg1 = chMBPostAheadTimeout(&mb1, 'A', TIME_INFINITE);
 8004ade:	f04f 31ff 	mov.w	r1, #4294967295
 8004ae2:	2041      	movs	r0, #65	; 0x41
 8004ae4:	f7ff f864 	bl	8003bb0 <chMBPostAheadTimeout.constprop.0>
    test_assert(msg1 == MSG_OK, "wrong wake-up message");
 8004ae8:	fab0 f080 	clz	r0, r0
 8004aec:	4965      	ldr	r1, [pc, #404]	; (8004c84 <oslib_test_002_001_execute+0x314>)
 8004aee:	0940      	lsrs	r0, r0, #5
 8004af0:	f7fb ff76 	bl	80009e0 <_test_assert>
 8004af4:	4605      	mov	r5, r0
 8004af6:	2800      	cmp	r0, #0
 8004af8:	f47f af56 	bne.w	80049a8 <oslib_test_002_001_execute+0x38>
  test_set_step(5);
 8004afc:	2305      	movs	r3, #5
 8004afe:	603b      	str	r3, [r7, #0]
 8004b00:	f04f 0820 	mov.w	r8, #32
 8004b04:	f388 8811 	msr	BASEPRI, r8
  return (size_t)(mbp->top - mbp->buffer);
 8004b08:	e9d4 1300 	ldrd	r1, r3, [r4]
    test_assert_lock(chMBGetFreeCountI(&mb1) == 0, "still empty");
 8004b0c:	6922      	ldr	r2, [r4, #16]
 8004b0e:	1a5b      	subs	r3, r3, r1
 8004b10:	ebb2 0fa3 	cmp.w	r2, r3, asr #2
 8004b14:	495c      	ldr	r1, [pc, #368]	; (8004c88 <oslib_test_002_001_execute+0x318>)
 8004b16:	bf0c      	ite	eq
 8004b18:	2001      	moveq	r0, #1
 8004b1a:	2000      	movne	r0, #0
 8004b1c:	f7fb ff60 	bl	80009e0 <_test_assert>
 8004b20:	4606      	mov	r6, r0
 8004b22:	2800      	cmp	r0, #0
 8004b24:	f47f af6e 	bne.w	8004a04 <oslib_test_002_001_execute+0x94>
 8004b28:	f380 8811 	msr	BASEPRI, r0
 8004b2c:	f388 8811 	msr	BASEPRI, r8
    test_assert_lock(chMBGetUsedCountI(&mb1) == MB_SIZE, "not full");
 8004b30:	6920      	ldr	r0, [r4, #16]
 8004b32:	4956      	ldr	r1, [pc, #344]	; (8004c8c <oslib_test_002_001_execute+0x31c>)
 8004b34:	f1a0 0c04 	sub.w	ip, r0, #4
 8004b38:	f1dc 0000 	rsbs	r0, ip, #0
 8004b3c:	eb40 000c 	adc.w	r0, r0, ip
 8004b40:	f7fb ff4e 	bl	80009e0 <_test_assert>
 8004b44:	4605      	mov	r5, r0
 8004b46:	b110      	cbz	r0, 8004b4e <oslib_test_002_001_execute+0x1de>
 8004b48:	f386 8811 	msr	BASEPRI, r6
 8004b4c:	e72c      	b.n	80049a8 <oslib_test_002_001_execute+0x38>
 8004b4e:	f380 8811 	msr	BASEPRI, r0
 8004b52:	f388 8811 	msr	BASEPRI, r8
    test_assert_lock(mb1.rdptr == mb1.wrptr, "pointers not aligned");
 8004b56:	e9d4 3002 	ldrd	r3, r0, [r4, #8]
 8004b5a:	1ac6      	subs	r6, r0, r3
 8004b5c:	4270      	negs	r0, r6
 8004b5e:	4170      	adcs	r0, r6
 8004b60:	494b      	ldr	r1, [pc, #300]	; (8004c90 <oslib_test_002_001_execute+0x320>)
 8004b62:	f7fb ff3d 	bl	80009e0 <_test_assert>
 8004b66:	2800      	cmp	r0, #0
 8004b68:	f47f af4c 	bne.w	8004a04 <oslib_test_002_001_execute+0x94>
 8004b6c:	f380 8811 	msr	BASEPRI, r0
  test_set_step(6);
 8004b70:	2306      	movs	r3, #6
      msg1 = chMBFetchTimeout(&mb1, &msg2, TIME_INFINITE);
 8004b72:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 8004c68 <oslib_test_002_001_execute+0x2f8>
      test_assert(msg1 == MSG_OK, "wrong wake-up message");
 8004b76:	4e43      	ldr	r6, [pc, #268]	; (8004c84 <oslib_test_002_001_execute+0x314>)
  test_set_step(6);
 8004b78:	603b      	str	r3, [r7, #0]
 8004b7a:	2504      	movs	r5, #4
      msg1 = chMBFetchTimeout(&mb1, &msg2, TIME_INFINITE);
 8004b7c:	a901      	add	r1, sp, #4
 8004b7e:	f04f 32ff 	mov.w	r2, #4294967295
 8004b82:	4640      	mov	r0, r8
 8004b84:	f7ff fc4c 	bl	8004420 <chMBFetchTimeout>
      test_assert(msg1 == MSG_OK, "wrong wake-up message");
 8004b88:	fab0 f080 	clz	r0, r0
 8004b8c:	4631      	mov	r1, r6
 8004b8e:	0940      	lsrs	r0, r0, #5
 8004b90:	f7fb ff26 	bl	80009e0 <_test_assert>
 8004b94:	2800      	cmp	r0, #0
 8004b96:	f47f af07 	bne.w	80049a8 <oslib_test_002_001_execute+0x38>
      test_emit_token(msg2);
 8004b9a:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8004b9e:	f7fb ffc7 	bl	8000b30 <test_emit_token>
    for (i = 0; i < MB_SIZE; i++) {
 8004ba2:	3d01      	subs	r5, #1
 8004ba4:	d1ea      	bne.n	8004b7c <oslib_test_002_001_execute+0x20c>
    test_assert_sequence("ABCD", "wrong get sequence");
 8004ba6:	493b      	ldr	r1, [pc, #236]	; (8004c94 <oslib_test_002_001_execute+0x324>)
 8004ba8:	483b      	ldr	r0, [pc, #236]	; (8004c98 <oslib_test_002_001_execute+0x328>)
 8004baa:	f7fc f899 	bl	8000ce0 <_test_assert_sequence>
 8004bae:	2800      	cmp	r0, #0
 8004bb0:	f47f aefa 	bne.w	80049a8 <oslib_test_002_001_execute+0x38>
  test_set_step(7);
 8004bb4:	2307      	movs	r3, #7
    msg1 = chMBPostTimeout(&mb1, 'B' + i, TIME_INFINITE);
 8004bb6:	2146      	movs	r1, #70	; 0x46
 8004bb8:	482b      	ldr	r0, [pc, #172]	; (8004c68 <oslib_test_002_001_execute+0x2f8>)
  test_set_step(7);
 8004bba:	603b      	str	r3, [r7, #0]
    msg1 = chMBPostTimeout(&mb1, 'B' + i, TIME_INFINITE);
 8004bbc:	f04f 32ff 	mov.w	r2, #4294967295
 8004bc0:	f7ff fc8e 	bl	80044e0 <chMBPostTimeout>
    test_assert(msg1 == MSG_OK, "wrong wake-up message");
 8004bc4:	fab0 f080 	clz	r0, r0
 8004bc8:	492e      	ldr	r1, [pc, #184]	; (8004c84 <oslib_test_002_001_execute+0x314>)
 8004bca:	0940      	lsrs	r0, r0, #5
 8004bcc:	f7fb ff08 	bl	80009e0 <_test_assert>
 8004bd0:	2800      	cmp	r0, #0
 8004bd2:	f47f aee9 	bne.w	80049a8 <oslib_test_002_001_execute+0x38>
    msg1 = chMBFetchTimeout(&mb1, &msg2, TIME_INFINITE);
 8004bd6:	a901      	add	r1, sp, #4
 8004bd8:	4823      	ldr	r0, [pc, #140]	; (8004c68 <oslib_test_002_001_execute+0x2f8>)
 8004bda:	f04f 32ff 	mov.w	r2, #4294967295
 8004bde:	f7ff fc1f 	bl	8004420 <chMBFetchTimeout>
    test_assert(msg1 == MSG_OK, "wrong wake-up message");
 8004be2:	fab0 f080 	clz	r0, r0
 8004be6:	4927      	ldr	r1, [pc, #156]	; (8004c84 <oslib_test_002_001_execute+0x314>)
 8004be8:	0940      	lsrs	r0, r0, #5
 8004bea:	f7fb fef9 	bl	80009e0 <_test_assert>
 8004bee:	2800      	cmp	r0, #0
 8004bf0:	f47f aeda 	bne.w	80049a8 <oslib_test_002_001_execute+0x38>
  test_set_step(8);
 8004bf4:	2308      	movs	r3, #8
 8004bf6:	603b      	str	r3, [r7, #0]
 8004bf8:	2620      	movs	r6, #32
 8004bfa:	f386 8811 	msr	BASEPRI, r6
 8004bfe:	e9d4 1200 	ldrd	r1, r2, [r4]
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 8004c02:	6923      	ldr	r3, [r4, #16]
  return (size_t)(mbp->top - mbp->buffer);
 8004c04:	1a52      	subs	r2, r2, r1
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 8004c06:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
    test_assert_lock(chMBGetFreeCountI(&mb1) == MB_SIZE, "not empty");
 8004c0a:	1f19      	subs	r1, r3, #4
 8004c0c:	4248      	negs	r0, r1
 8004c0e:	4148      	adcs	r0, r1
 8004c10:	4917      	ldr	r1, [pc, #92]	; (8004c70 <oslib_test_002_001_execute+0x300>)
 8004c12:	f7fb fee5 	bl	80009e0 <_test_assert>
 8004c16:	2800      	cmp	r0, #0
 8004c18:	f47f aef4 	bne.w	8004a04 <oslib_test_002_001_execute+0x94>
 8004c1c:	f385 8811 	msr	BASEPRI, r5
 8004c20:	f386 8811 	msr	BASEPRI, r6
    test_assert_lock(chMBGetUsedCountI(&mb1) == 0, "still full");
 8004c24:	6920      	ldr	r0, [r4, #16]
 8004c26:	4913      	ldr	r1, [pc, #76]	; (8004c74 <oslib_test_002_001_execute+0x304>)
 8004c28:	fab0 f080 	clz	r0, r0
 8004c2c:	0940      	lsrs	r0, r0, #5
 8004c2e:	f7fb fed7 	bl	80009e0 <_test_assert>
 8004c32:	2800      	cmp	r0, #0
 8004c34:	f47f aee6 	bne.w	8004a04 <oslib_test_002_001_execute+0x94>
 8004c38:	f385 8811 	msr	BASEPRI, r5
    test_assert(mb1.buffer == mb1.wrptr, "write pointer not aligned to base");
 8004c3c:	6820      	ldr	r0, [r4, #0]
 8004c3e:	68a3      	ldr	r3, [r4, #8]
 8004c40:	490d      	ldr	r1, [pc, #52]	; (8004c78 <oslib_test_002_001_execute+0x308>)
 8004c42:	1ac2      	subs	r2, r0, r3
 8004c44:	4250      	negs	r0, r2
 8004c46:	4150      	adcs	r0, r2
 8004c48:	f7fb feca 	bl	80009e0 <_test_assert>
 8004c4c:	2800      	cmp	r0, #0
 8004c4e:	f47f aeab 	bne.w	80049a8 <oslib_test_002_001_execute+0x38>
    test_assert(mb1.buffer == mb1.rdptr, "read pointer not aligned to base");
 8004c52:	6820      	ldr	r0, [r4, #0]
 8004c54:	68e3      	ldr	r3, [r4, #12]
 8004c56:	4909      	ldr	r1, [pc, #36]	; (8004c7c <oslib_test_002_001_execute+0x30c>)
 8004c58:	1ac3      	subs	r3, r0, r3
 8004c5a:	4258      	negs	r0, r3
 8004c5c:	4158      	adcs	r0, r3
 8004c5e:	f7fb febf 	bl	80009e0 <_test_assert>
 8004c62:	e6a1      	b.n	80049a8 <oslib_test_002_001_execute+0x38>
 8004c64:	2000149c 	.word	0x2000149c
 8004c68:	2000084c 	.word	0x2000084c
 8004c6c:	08009fb8 	.word	0x08009fb8
 8004c70:	08009fc4 	.word	0x08009fc4
 8004c74:	08009fd0 	.word	0x08009fd0
 8004c78:	08009fdc 	.word	0x08009fdc
 8004c7c:	0800a000 	.word	0x0800a000
 8004c80:	0800a070 	.word	0x0800a070
 8004c84:	08009fa0 	.word	0x08009fa0
 8004c88:	0800a024 	.word	0x0800a024
 8004c8c:	0800a030 	.word	0x0800a030
 8004c90:	0800a03c 	.word	0x0800a03c
 8004c94:	0800a054 	.word	0x0800a054
 8004c98:	0800a068 	.word	0x0800a068
 8004c9c:	00000000 	.word	0x00000000

08004ca0 <chMtxUnlock>:
void chMtxUnlock(mutex_t *mp) {
 8004ca0:	b538      	push	{r3, r4, r5, lr}
  thread_t *ctp = currp;
 8004ca2:	4b16      	ldr	r3, [pc, #88]	; (8004cfc <chMtxUnlock+0x5c>)
void chMtxUnlock(mutex_t *mp) {
 8004ca4:	4601      	mov	r1, r0
  thread_t *ctp = currp;
 8004ca6:	699d      	ldr	r5, [r3, #24]
 8004ca8:	2320      	movs	r3, #32
 8004caa:	f383 8811 	msr	BASEPRI, r3
  return (bool)(tqp->next != (const thread_t *)tqp);
 8004cae:	6800      	ldr	r0, [r0, #0]
    ctp->mtxlist = mp->next;
 8004cb0:	68cb      	ldr	r3, [r1, #12]
 8004cb2:	63ab      	str	r3, [r5, #56]	; 0x38
    if (chMtxQueueNotEmptyS(mp)) {
 8004cb4:	4288      	cmp	r0, r1
 8004cb6:	d01b      	beq.n	8004cf0 <chMtxUnlock+0x50>
      tprio_t newprio = ctp->realprio;
 8004cb8:	6bec      	ldr	r4, [r5, #60]	; 0x3c
      while (lmp != NULL) {
 8004cba:	b14b      	cbz	r3, 8004cd0 <chMtxUnlock+0x30>
 8004cbc:	681a      	ldr	r2, [r3, #0]
        if (chMtxQueueNotEmptyS(lmp) &&
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d003      	beq.n	8004cca <chMtxUnlock+0x2a>
 8004cc2:	6892      	ldr	r2, [r2, #8]
 8004cc4:	4294      	cmp	r4, r2
 8004cc6:	bf38      	it	cc
 8004cc8:	4614      	movcc	r4, r2
        lmp = lmp->next;
 8004cca:	68db      	ldr	r3, [r3, #12]
      while (lmp != NULL) {
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d1f5      	bne.n	8004cbc <chMtxUnlock+0x1c>
      mp->next = tp->mtxlist;
 8004cd0:	6b82      	ldr	r2, [r0, #56]	; 0x38
  tqp->next             = tp->queue.next;
 8004cd2:	6803      	ldr	r3, [r0, #0]
      ctp->prio = newprio;
 8004cd4:	60ac      	str	r4, [r5, #8]
 8004cd6:	600b      	str	r3, [r1, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 8004cd8:	6059      	str	r1, [r3, #4]
      mp->next = tp->mtxlist;
 8004cda:	e9c1 0202 	strd	r0, r2, [r1, #8]
      tp->mtxlist = mp;
 8004cde:	6381      	str	r1, [r0, #56]	; 0x38
      (void) chSchReadyI(tp);
 8004ce0:	f7fc fa96 	bl	8001210 <chSchReadyI>
      chSchRescheduleS();
 8004ce4:	f7fe fe0c 	bl	8003900 <chSchRescheduleS>
 8004ce8:	2300      	movs	r3, #0
 8004cea:	f383 8811 	msr	BASEPRI, r3
}
 8004cee:	bd38      	pop	{r3, r4, r5, pc}
      mp->owner = NULL;
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	6083      	str	r3, [r0, #8]
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	f383 8811 	msr	BASEPRI, r3
}
 8004cfa:	bd38      	pop	{r3, r4, r5, pc}
 8004cfc:	200009b0 	.word	0x200009b0

08004d00 <chHeapAllocAligned.constprop.0>:
 * @return              A pointer to the aligned allocated block.
 * @retval NULL         if the block cannot be allocated.
 *
 * @api
 */
void *chHeapAllocAligned(memory_heap_t *heapp, size_t size, unsigned align) {
 8004d00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

  chDbgCheck((size > 0U) && MEM_IS_VALID_ALIGNMENT(align));

  /* If an heap is not specified then the default system header is used.*/
  if (heapp == NULL) {
    heapp = &default_heap;
 8004d04:	4e38      	ldr	r6, [pc, #224]	; (8004de8 <chHeapAllocAligned.constprop.0+0xe8>)
 8004d06:	2800      	cmp	r0, #0
 8004d08:	bf18      	it	ne
 8004d0a:	4606      	movne	r6, r0

  /* Size is converted in number of elementary allocation units.*/
  pages = MEM_ALIGN_NEXT(size, CH_HEAP_ALIGNMENT) / CH_HEAP_ALIGNMENT;

  /* Taking heap mutex/semaphore.*/
  H_LOCK(heapp);
 8004d0c:	f106 080c 	add.w	r8, r6, #12
 8004d10:	4640      	mov	r0, r8
  pages = MEM_ALIGN_NEXT(size, CH_HEAP_ALIGNMENT) / CH_HEAP_ALIGNMENT;
 8004d12:	1dcf      	adds	r7, r1, #7
void *chHeapAllocAligned(memory_heap_t *heapp, size_t size, unsigned align) {
 8004d14:	460d      	mov	r5, r1
  H_LOCK(heapp);
 8004d16:	f7fe fa33 	bl	8003180 <chMtxLock>

  /* Start of the free blocks list.*/
  qp = &heapp->header;
  while (H_NEXT(qp) != NULL) {
 8004d1a:	6872      	ldr	r2, [r6, #4]
  pages = MEM_ALIGN_NEXT(size, CH_HEAP_ALIGNMENT) / CH_HEAP_ALIGNMENT;
 8004d1c:	08ff      	lsrs	r7, r7, #3
 8004d1e:	1d31      	adds	r1, r6, #4
  while (H_NEXT(qp) != NULL) {
 8004d20:	b90a      	cbnz	r2, 8004d26 <chHeapAllocAligned.constprop.0+0x26>
 8004d22:	e019      	b.n	8004d58 <chHeapAllocAligned.constprop.0+0x58>
 8004d24:	461a      	mov	r2, r3
    hp = H_NEXT(qp);

    /* Pointer aligned to the requested alignment.*/
    ahp = (heap_header_t *)MEM_ALIGN_NEXT(H_BLOCK(hp), align) - 1U;

    if ((ahp < H_LIMIT(hp)) && (pages <= NPAGES(H_LIMIT(hp), ahp + 1U))) {
 8004d26:	f8d2 c004 	ldr.w	ip, [r2, #4]
    ahp = (heap_header_t *)MEM_ALIGN_NEXT(H_BLOCK(hp), align) - 1U;
 8004d2a:	f102 030f 	add.w	r3, r2, #15
 8004d2e:	f023 0307 	bic.w	r3, r3, #7
    if ((ahp < H_LIMIT(hp)) && (pages <= NPAGES(H_LIMIT(hp), ahp + 1U))) {
 8004d32:	f10c 0401 	add.w	r4, ip, #1
 8004d36:	4699      	mov	r9, r3
 8004d38:	eb02 04c4 	add.w	r4, r2, r4, lsl #3
    ahp = (heap_header_t *)MEM_ALIGN_NEXT(H_BLOCK(hp), align) - 1U;
 8004d3c:	3b08      	subs	r3, #8
    if ((ahp < H_LIMIT(hp)) && (pages <= NPAGES(H_LIMIT(hp), ahp + 1U))) {
 8004d3e:	eba4 0009 	sub.w	r0, r4, r9
 8004d42:	42a3      	cmp	r3, r4
 8004d44:	ea4f 0ee0 	mov.w	lr, r0, asr #3
 8004d48:	d202      	bcs.n	8004d50 <chHeapAllocAligned.constprop.0+0x50>
 8004d4a:	ebb7 0fe0 	cmp.w	r7, r0, asr #3
 8004d4e:	d913      	bls.n	8004d78 <chHeapAllocAligned.constprop.0+0x78>
  while (H_NEXT(qp) != NULL) {
 8004d50:	6813      	ldr	r3, [r2, #0]
 8004d52:	4611      	mov	r1, r2
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d1e5      	bne.n	8004d24 <chHeapAllocAligned.constprop.0+0x24>
    /* Next in the free blocks list.*/
    qp = hp;
  }

  /* Releasing heap mutex/semaphore.*/
  H_UNLOCK(heapp);
 8004d58:	4640      	mov	r0, r8
 8004d5a:	f7ff ffa1 	bl	8004ca0 <chMtxUnlock>

  /* More memory is required, tries to get it from the associated provider
     else fails.*/
  if (heapp->provider != NULL) {
 8004d5e:	6833      	ldr	r3, [r6, #0]
 8004d60:	b3bb      	cbz	r3, 8004dd2 <chHeapAllocAligned.constprop.0+0xd2>
    ahp = heapp->provider(pages * CH_HEAP_ALIGNMENT,
 8004d62:	2208      	movs	r2, #8
 8004d64:	00f8      	lsls	r0, r7, #3
 8004d66:	4611      	mov	r1, r2
 8004d68:	4798      	blx	r3
                          align,
                          sizeof (heap_header_t));
    if (ahp != NULL) {
 8004d6a:	4681      	mov	r9, r0
 8004d6c:	b108      	cbz	r0, 8004d72 <chHeapAllocAligned.constprop.0+0x72>
      hp = ahp - 1U;
      H_HEAP(hp) = heapp;
      H_SIZE(hp) = size;
 8004d6e:	e940 6502 	strd	r6, r5, [r0, #-8]
      /*lint -restore*/
    }
  }

  return NULL;
}
 8004d72:	4648      	mov	r0, r9
 8004d74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (ahp > hp) {
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d818      	bhi.n	8004dae <chHeapAllocAligned.constprop.0+0xae>
        if (H_PAGES(hp) == pages) {
 8004d7c:	4567      	cmp	r7, ip
 8004d7e:	d02c      	beq.n	8004dda <chHeapAllocAligned.constprop.0+0xda>
          fp = H_BLOCK(hp) + pages;
 8004d80:	3701      	adds	r7, #1
 8004d82:	eb02 00c7 	add.w	r0, r2, r7, lsl #3
          H_PAGES(fp) = NPAGES(H_LIMIT(hp), H_BLOCK(fp));
 8004d86:	f100 0308 	add.w	r3, r0, #8
 8004d8a:	1ae3      	subs	r3, r4, r3
 8004d8c:	10db      	asrs	r3, r3, #3
          H_NEXT(fp) = H_NEXT(hp);
 8004d8e:	6814      	ldr	r4, [r2, #0]
 8004d90:	f842 4037 	str.w	r4, [r2, r7, lsl #3]
 8004d94:	f102 0908 	add.w	r9, r2, #8
          H_PAGES(fp) = NPAGES(H_LIMIT(hp), H_BLOCK(fp));
 8004d98:	6043      	str	r3, [r0, #4]
          H_NEXT(qp) = fp;
 8004d9a:	6008      	str	r0, [r1, #0]
 8004d9c:	4613      	mov	r3, r2
      H_UNLOCK(heapp);
 8004d9e:	4640      	mov	r0, r8
      H_HEAP(hp) = heapp;
 8004da0:	e9c3 6500 	strd	r6, r5, [r3]
      H_UNLOCK(heapp);
 8004da4:	f7ff ff7c 	bl	8004ca0 <chMtxUnlock>
}
 8004da8:	4648      	mov	r0, r9
 8004daa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        H_PAGES(hp) = NPAGES(ahp, H_BLOCK(hp));
 8004dae:	f102 0108 	add.w	r1, r2, #8
 8004db2:	1a59      	subs	r1, r3, r1
 8004db4:	10c9      	asrs	r1, r1, #3
        if (bpages > pages) {
 8004db6:	4577      	cmp	r7, lr
        H_PAGES(hp) = NPAGES(ahp, H_BLOCK(hp));
 8004db8:	6051      	str	r1, [r2, #4]
        if (bpages > pages) {
 8004dba:	d2f0      	bcs.n	8004d9e <chHeapAllocAligned.constprop.0+0x9e>
          fp = H_BLOCK(ahp) + pages;
 8004dbc:	1c7c      	adds	r4, r7, #1
          H_PAGES(fp) = (bpages - pages) - 1U;
 8004dbe:	43f9      	mvns	r1, r7
          fp = H_BLOCK(ahp) + pages;
 8004dc0:	eb03 00c4 	add.w	r0, r3, r4, lsl #3
          H_NEXT(fp) = H_NEXT(hp);
 8004dc4:	6817      	ldr	r7, [r2, #0]
          H_PAGES(fp) = (bpages - pages) - 1U;
 8004dc6:	4471      	add	r1, lr
 8004dc8:	6041      	str	r1, [r0, #4]
          H_NEXT(fp) = H_NEXT(hp);
 8004dca:	f843 7034 	str.w	r7, [r3, r4, lsl #3]
          H_NEXT(hp) = fp;
 8004dce:	6010      	str	r0, [r2, #0]
 8004dd0:	e7e5      	b.n	8004d9e <chHeapAllocAligned.constprop.0+0x9e>
  return NULL;
 8004dd2:	4699      	mov	r9, r3
}
 8004dd4:	4648      	mov	r0, r9
 8004dd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          H_NEXT(qp) = H_NEXT(hp);
 8004dda:	4691      	mov	r9, r2
 8004ddc:	4613      	mov	r3, r2
 8004dde:	f859 2b08 	ldr.w	r2, [r9], #8
 8004de2:	600a      	str	r2, [r1, #0]
 8004de4:	e7db      	b.n	8004d9e <chHeapAllocAligned.constprop.0+0x9e>
 8004de6:	bf00      	nop
 8004de8:	20000b50 	.word	0x20000b50
 8004dec:	00000000 	.word	0x00000000

08004df0 <chThdCreateFromHeap.constprop.0>:
thread_t *chThdCreateFromHeap(memory_heap_t *heapp, size_t size,
 8004df0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004df4:	4605      	mov	r5, r0
 8004df6:	b086      	sub	sp, #24
 8004df8:	460f      	mov	r7, r1
  wsp = chHeapAllocAligned(heapp, size, PORT_WORKING_AREA_ALIGN);
 8004dfa:	4601      	mov	r1, r0
 8004dfc:	4811      	ldr	r0, [pc, #68]	; (8004e44 <chThdCreateFromHeap.constprop.0+0x54>)
thread_t *chThdCreateFromHeap(memory_heap_t *heapp, size_t size,
 8004dfe:	4690      	mov	r8, r2
 8004e00:	461e      	mov	r6, r3
  wsp = chHeapAllocAligned(heapp, size, PORT_WORKING_AREA_ALIGN);
 8004e02:	f7ff ff7d 	bl	8004d00 <chHeapAllocAligned.constprop.0>
  if (wsp == NULL) {
 8004e06:	4604      	mov	r4, r0
 8004e08:	b1c0      	cbz	r0, 8004e3c <chThdCreateFromHeap.constprop.0+0x4c>
  thread_descriptor_t td = {
 8004e0a:	4b0f      	ldr	r3, [pc, #60]	; (8004e48 <chThdCreateFromHeap.constprop.0+0x58>)
 8004e0c:	f8cd 800c 	str.w	r8, [sp, #12]
    (stkalign_t *)((uint8_t *)wsp + size),
 8004e10:	4405      	add	r5, r0
  thread_descriptor_t td = {
 8004e12:	e9cd 3604 	strd	r3, r6, [sp, #16]
 8004e16:	9502      	str	r5, [sp, #8]
 8004e18:	e9cd 7000 	strd	r7, r0, [sp]
 8004e1c:	2320      	movs	r3, #32
 8004e1e:	f383 8811 	msr	BASEPRI, r3
  tp = chThdCreateSuspendedI(&td);
 8004e22:	4668      	mov	r0, sp
 8004e24:	f7fc f97c 	bl	8001120 <chThdCreateSuspendedI>
  tp->flags = CH_FLAG_MODE_HEAP;
 8004e28:	2301      	movs	r3, #1
 8004e2a:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
  chSchWakeupS(tp, MSG_OK);
 8004e2e:	2100      	movs	r1, #0
  tp = chThdCreateSuspendedI(&td);
 8004e30:	4604      	mov	r4, r0
  chSchWakeupS(tp, MSG_OK);
 8004e32:	f7fd f8e5 	bl	8002000 <chSchWakeupS>
 8004e36:	2300      	movs	r3, #0
 8004e38:	f383 8811 	msr	BASEPRI, r3
}
 8004e3c:	4620      	mov	r0, r4
 8004e3e:	b006      	add	sp, #24
 8004e40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004e44:	20000bb0 	.word	0x20000bb0
 8004e48:	08000c61 	.word	0x08000c61
 8004e4c:	00000000 	.word	0x00000000

08004e50 <dyn_create_object_heap>:
                                             size_t size) {
 8004e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  dyn_element_t *p = dlp->next;
 8004e52:	680c      	ldr	r4, [r1, #0]
  while (p != (dyn_element_t *)dlp) {
 8004e54:	42a1      	cmp	r1, r4
                                             size_t size) {
 8004e56:	460d      	mov	r5, r1
 8004e58:	4606      	mov	r6, r0
 8004e5a:	4617      	mov	r7, r2
  while (p != (dyn_element_t *)dlp) {
 8004e5c:	d103      	bne.n	8004e66 <dyn_create_object_heap+0x16>
 8004e5e:	e00d      	b.n	8004e7c <dyn_create_object_heap+0x2c>
    p = p->next;
 8004e60:	6824      	ldr	r4, [r4, #0]
  while (p != (dyn_element_t *)dlp) {
 8004e62:	42a5      	cmp	r5, r4
 8004e64:	d00a      	beq.n	8004e7c <dyn_create_object_heap+0x2c>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 8004e66:	2208      	movs	r2, #8
 8004e68:	4631      	mov	r1, r6
 8004e6a:	18a0      	adds	r0, r4, r2
 8004e6c:	f004 f85a 	bl	8008f24 <strncmp>
 8004e70:	2800      	cmp	r0, #0
 8004e72:	d1f5      	bne.n	8004e60 <dyn_create_object_heap+0x10>
  if (dep != NULL) {
 8004e74:	b114      	cbz	r4, 8004e7c <dyn_create_object_heap+0x2c>
    return NULL;
 8004e76:	4604      	mov	r4, r0
}
 8004e78:	4620      	mov	r0, r4
 8004e7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 *
 * @api
 */
static inline void *chHeapAlloc(memory_heap_t *heapp, size_t size) {

  return chHeapAllocAligned(heapp, size, CH_HEAP_ALIGNMENT);
 8004e7c:	4639      	mov	r1, r7
 8004e7e:	2000      	movs	r0, #0
 8004e80:	f7ff ff3e 	bl	8004d00 <chHeapAllocAligned.constprop.0>
  if (dep == NULL) {
 8004e84:	4604      	mov	r4, r0
 8004e86:	2800      	cmp	r0, #0
 8004e88:	d0f6      	beq.n	8004e78 <dyn_create_object_heap+0x28>
  strncpy(dep->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH);
 8004e8a:	2208      	movs	r2, #8
 8004e8c:	4631      	mov	r1, r6
 8004e8e:	4410      	add	r0, r2
 8004e90:	f004 f886 	bl	8008fa0 <strncpy>
  dep->next = dlp->next;
 8004e94:	682b      	ldr	r3, [r5, #0]
  dep->refs = (ucnt_t)1;
 8004e96:	2201      	movs	r2, #1
  dep->next = dlp->next;
 8004e98:	e9c4 3200 	strd	r3, r2, [r4]
}
 8004e9c:	4620      	mov	r0, r4
  dlp->next = dep;
 8004e9e:	602c      	str	r4, [r5, #0]
}
 8004ea0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ea2:	bf00      	nop
	...

08004eb0 <chPipeWriteTimeout.constprop.0>:
 *                      lower than @p n means that a timeout occurred or the
 *                      pipe went in reset state.
 *
 * @api
 */
size_t chPipeWriteTimeout(pipe_t *pp, const uint8_t *bp,
 8004eb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  size_t max = n;

  chDbgCheck(n > 0U);

  /* If the pipe is in reset state then returns immediately.*/
  if (pp->reset) {
 8004eb4:	f8df a0e0 	ldr.w	sl, [pc, #224]	; 8004f98 <chPipeWriteTimeout.constprop.0+0xe8>
 8004eb8:	f89a 3014 	ldrb.w	r3, [sl, #20]
size_t chPipeWriteTimeout(pipe_t *pp, const uint8_t *bp,
 8004ebc:	b083      	sub	sp, #12
  if (pp->reset) {
 8004ebe:	b11b      	cbz	r3, 8004ec8 <chPipeWriteTimeout.constprop.0+0x18>
    return (size_t)0;
 8004ec0:	2000      	movs	r0, #0
  }

  PW_UNLOCK(pp);

  return max - n;
}
 8004ec2:	b003      	add	sp, #12
 8004ec4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ec8:	4680      	mov	r8, r0
  PW_LOCK(pp);
 8004eca:	f10a 0030 	add.w	r0, sl, #48	; 0x30
 8004ece:	f7fe f957 	bl	8003180 <chMtxLock>
 8004ed2:	4e2f      	ldr	r6, [pc, #188]	; (8004f90 <chPipeWriteTimeout.constprop.0+0xe0>)
 8004ed4:	4645      	mov	r5, r8
  PC_LOCK(pp);
 8004ed6:	f10a 0720 	add.w	r7, sl, #32
      chThdResume(&pp->rtr, MSG_OK);
 8004eda:	f10a 091c 	add.w	r9, sl, #28
 8004ede:	e018      	b.n	8004f12 <chPipeWriteTimeout.constprop.0+0x62>
    memcpy((void *)pp->wrptr, (const void *)bp, s1);
 8004ee0:	f7fb fa04 	bl	80002ec <memcpy>
    memcpy((void *)pp->buffer, (const void *)bp, s2);
 8004ee4:	9b01      	ldr	r3, [sp, #4]
 8004ee6:	f8da 0000 	ldr.w	r0, [sl]
 8004eea:	461a      	mov	r2, r3
 8004eec:	eb06 010b 	add.w	r1, r6, fp
 8004ef0:	f7fb f9fc 	bl	80002ec <memcpy>
    pp->wrptr = pp->buffer + s2;
 8004ef4:	f8da 2000 	ldr.w	r2, [sl]
 8004ef8:	9b01      	ldr	r3, [sp, #4]
  PC_UNLOCK(pp);
 8004efa:	4638      	mov	r0, r7
    pp->wrptr = pp->buffer + s2;
 8004efc:	4413      	add	r3, r2
 8004efe:	f8ca 3008 	str.w	r3, [sl, #8]
  PC_UNLOCK(pp);
 8004f02:	f7ff fecd 	bl	8004ca0 <chMtxUnlock>
      n  -= done;
 8004f06:	1b2d      	subs	r5, r5, r4
      chThdResume(&pp->rtr, MSG_OK);
 8004f08:	4648      	mov	r0, r9
      bp += done;
 8004f0a:	4426      	add	r6, r4
      chThdResume(&pp->rtr, MSG_OK);
 8004f0c:	f7fd f8e8 	bl	80020e0 <chThdResume.constprop.0>
  while (n > 0U) {
 8004f10:	b36d      	cbz	r5, 8004f6e <chPipeWriteTimeout.constprop.0+0xbe>
  PC_LOCK(pp);
 8004f12:	4638      	mov	r0, r7
 8004f14:	f7fe f934 	bl	8003180 <chMtxLock>
 */
static inline size_t chPipeGetSize(const pipe_t *pp) {

  /*lint -save -e9033 [10.8] Perfectly safe pointers
    arithmetic.*/
  return (size_t)(pp->top - pp->buffer);
 8004f18:	e9da 4200 	ldrd	r4, r2, [sl]
 *
 * @api
 */
static inline size_t chPipeGetFreeCount(const pipe_t *pp) {

  return chPipeGetSize(pp) - chPipeGetUsedCount(pp);
 8004f1c:	f8da 3010 	ldr.w	r3, [sl, #16]
  s1 = (size_t)(pp->top - pp->wrptr);
 8004f20:	f8da 0008 	ldr.w	r0, [sl, #8]
  return (size_t)(pp->top - pp->buffer);
 8004f24:	1b14      	subs	r4, r2, r4
  return chPipeGetSize(pp) - chPipeGetUsedCount(pp);
 8004f26:	1ae4      	subs	r4, r4, r3
 8004f28:	42ac      	cmp	r4, r5
 8004f2a:	bf28      	it	cs
 8004f2c:	462c      	movcs	r4, r5
 8004f2e:	eba2 0b00 	sub.w	fp, r2, r0
  pp->cnt += n;
 8004f32:	4423      	add	r3, r4
  if (n < s1) {
 8004f34:	455c      	cmp	r4, fp
  pp->cnt += n;
 8004f36:	f8ca 3010 	str.w	r3, [sl, #16]
  if (n < s1) {
 8004f3a:	d31f      	bcc.n	8004f7c <chPipeWriteTimeout.constprop.0+0xcc>
    s2 = n - s1;
 8004f3c:	eba4 030b 	sub.w	r3, r4, fp
    memcpy((void *)pp->wrptr, (const void *)bp, s1);
 8004f40:	465a      	mov	r2, fp
 8004f42:	4631      	mov	r1, r6
    s2 = n - s1;
 8004f44:	9301      	str	r3, [sp, #4]
  else if (n > s1) {
 8004f46:	d8cb      	bhi.n	8004ee0 <chPipeWriteTimeout.constprop.0+0x30>
    memcpy((void *)pp->wrptr, (const void *)bp, n);
 8004f48:	4622      	mov	r2, r4
 8004f4a:	f7fb f9cf 	bl	80002ec <memcpy>
    pp->wrptr = pp->buffer;
 8004f4e:	f8da 3000 	ldr.w	r3, [sl]
 8004f52:	f8ca 3008 	str.w	r3, [sl, #8]
  PC_UNLOCK(pp);
 8004f56:	4638      	mov	r0, r7
 8004f58:	f7ff fea2 	bl	8004ca0 <chMtxUnlock>
    if (done == (size_t)0) {
 8004f5c:	2c00      	cmp	r4, #0
 8004f5e:	d1d2      	bne.n	8004f06 <chPipeWriteTimeout.constprop.0+0x56>
 8004f60:	2320      	movs	r3, #32
 8004f62:	f383 8811 	msr	BASEPRI, r3
 8004f66:	f384 8811 	msr	BASEPRI, r4
 8004f6a:	eba8 0805 	sub.w	r8, r8, r5
  PW_UNLOCK(pp);
 8004f6e:	4809      	ldr	r0, [pc, #36]	; (8004f94 <chPipeWriteTimeout.constprop.0+0xe4>)
 8004f70:	f7ff fe96 	bl	8004ca0 <chMtxUnlock>
 8004f74:	4640      	mov	r0, r8
}
 8004f76:	b003      	add	sp, #12
 8004f78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    memcpy((void *)pp->wrptr, (const void *)bp, n);
 8004f7c:	4622      	mov	r2, r4
 8004f7e:	4631      	mov	r1, r6
 8004f80:	f7fb f9b4 	bl	80002ec <memcpy>
    pp->wrptr += n;
 8004f84:	f8da 3008 	ldr.w	r3, [sl, #8]
 8004f88:	4423      	add	r3, r4
 8004f8a:	f8ca 3008 	str.w	r3, [sl, #8]
 8004f8e:	e7e2      	b.n	8004f56 <chPipeWriteTimeout.constprop.0+0xa6>
 8004f90:	0800b150 	.word	0x0800b150
 8004f94:	200008bc 	.word	0x200008bc
 8004f98:	2000088c 	.word	0x2000088c
 8004f9c:	00000000 	.word	0x00000000

08004fa0 <chPipeReadTimeout.constprop.0>:
 *                      lower than @p n means that a timeout occurred or the
 *                      pipe went in reset state.
 *
 * @api
 */
size_t chPipeReadTimeout(pipe_t *pp, uint8_t *bp,
 8004fa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  size_t max = n;

  chDbgCheck(n > 0U);

  /* If the pipe is in reset state then returns immediately.*/
  if (pp->reset) {
 8004fa4:	4d2f      	ldr	r5, [pc, #188]	; (8005064 <chPipeReadTimeout.constprop.0+0xc4>)
 8004fa6:	7d2b      	ldrb	r3, [r5, #20]
size_t chPipeReadTimeout(pipe_t *pp, uint8_t *bp,
 8004fa8:	b083      	sub	sp, #12
  if (pp->reset) {
 8004faa:	b11b      	cbz	r3, 8004fb4 <chPipeReadTimeout.constprop.0+0x14>
    return (size_t)0;
 8004fac:	2000      	movs	r0, #0
  }

  PR_UNLOCK(pp);

  return max - n;
}
 8004fae:	b003      	add	sp, #12
 8004fb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004fb4:	468a      	mov	sl, r1
 8004fb6:	4680      	mov	r8, r0
  PR_LOCK(pp);
 8004fb8:	f105 0040 	add.w	r0, r5, #64	; 0x40
 8004fbc:	f7fe f8e0 	bl	8003180 <chMtxLock>
 8004fc0:	4657      	mov	r7, sl
  PC_LOCK(pp);
 8004fc2:	f105 0920 	add.w	r9, r5, #32
      chThdResume(&pp->wtr, MSG_OK);
 8004fc6:	f105 0b18 	add.w	fp, r5, #24
 8004fca:	e015      	b.n	8004ff8 <chPipeReadTimeout.constprop.0+0x58>
    memcpy((void *)bp, (void *)pp->rdptr, s1);
 8004fcc:	f7fb f98e 	bl	80002ec <memcpy>
    memcpy((void *)bp, (void *)pp->buffer, s2);
 8004fd0:	9b01      	ldr	r3, [sp, #4]
 8004fd2:	6829      	ldr	r1, [r5, #0]
 8004fd4:	461a      	mov	r2, r3
 8004fd6:	eb08 0006 	add.w	r0, r8, r6
 8004fda:	f7fb f987 	bl	80002ec <memcpy>
    pp->rdptr = pp->buffer + s2;
 8004fde:	682a      	ldr	r2, [r5, #0]
 8004fe0:	9b01      	ldr	r3, [sp, #4]
  PC_UNLOCK(pp);
 8004fe2:	4648      	mov	r0, r9
    pp->rdptr = pp->buffer + s2;
 8004fe4:	4413      	add	r3, r2
 8004fe6:	60eb      	str	r3, [r5, #12]
  PC_UNLOCK(pp);
 8004fe8:	f7ff fe5a 	bl	8004ca0 <chMtxUnlock>
      n  -= done;
 8004fec:	1b3f      	subs	r7, r7, r4
      chThdResume(&pp->wtr, MSG_OK);
 8004fee:	4658      	mov	r0, fp
      bp += done;
 8004ff0:	44a0      	add	r8, r4
      chThdResume(&pp->wtr, MSG_OK);
 8004ff2:	f7fd f875 	bl	80020e0 <chThdResume.constprop.0>
  while (n > 0U) {
 8004ff6:	b337      	cbz	r7, 8005046 <chPipeReadTimeout.constprop.0+0xa6>
  PC_LOCK(pp);
 8004ff8:	4648      	mov	r0, r9
 8004ffa:	f7fe f8c1 	bl	8003180 <chMtxLock>
  s1 = (size_t)(pp->top - pp->rdptr);
 8004ffe:	e9d5 1303 	ldrd	r1, r3, [r5, #12]
 8005002:	686e      	ldr	r6, [r5, #4]
 8005004:	429f      	cmp	r7, r3
 8005006:	463c      	mov	r4, r7
 8005008:	eba6 0601 	sub.w	r6, r6, r1
 800500c:	bf28      	it	cs
 800500e:	461c      	movcs	r4, r3
  pp->cnt -= n;
 8005010:	1b1b      	subs	r3, r3, r4
  if (n < s1) {
 8005012:	42b4      	cmp	r4, r6
  pp->cnt -= n;
 8005014:	612b      	str	r3, [r5, #16]
  if (n < s1) {
 8005016:	d31d      	bcc.n	8005054 <chPipeReadTimeout.constprop.0+0xb4>
    s2 = n - s1;
 8005018:	eba4 0306 	sub.w	r3, r4, r6
    memcpy((void *)bp, (void *)pp->rdptr, s1);
 800501c:	4632      	mov	r2, r6
    s2 = n - s1;
 800501e:	9301      	str	r3, [sp, #4]
    memcpy((void *)bp, (void *)pp->rdptr, s1);
 8005020:	4640      	mov	r0, r8
  else if (n > s1) {
 8005022:	d8d3      	bhi.n	8004fcc <chPipeReadTimeout.constprop.0+0x2c>
    memcpy((void *)bp, (void *)pp->rdptr, n);
 8005024:	4622      	mov	r2, r4
 8005026:	f7fb f961 	bl	80002ec <memcpy>
    pp->rdptr = pp->buffer;
 800502a:	682b      	ldr	r3, [r5, #0]
 800502c:	60eb      	str	r3, [r5, #12]
  PC_UNLOCK(pp);
 800502e:	4648      	mov	r0, r9
 8005030:	f7ff fe36 	bl	8004ca0 <chMtxUnlock>
    if (done == (size_t)0) {
 8005034:	2c00      	cmp	r4, #0
 8005036:	d1d9      	bne.n	8004fec <chPipeReadTimeout.constprop.0+0x4c>
 8005038:	2320      	movs	r3, #32
 800503a:	f383 8811 	msr	BASEPRI, r3
 800503e:	f384 8811 	msr	BASEPRI, r4
 8005042:	ebaa 0a07 	sub.w	sl, sl, r7
  PR_UNLOCK(pp);
 8005046:	4808      	ldr	r0, [pc, #32]	; (8005068 <chPipeReadTimeout.constprop.0+0xc8>)
 8005048:	f7ff fe2a 	bl	8004ca0 <chMtxUnlock>
 800504c:	4650      	mov	r0, sl
}
 800504e:	b003      	add	sp, #12
 8005050:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    memcpy((void *)bp, (void *)pp->rdptr, n);
 8005054:	4622      	mov	r2, r4
 8005056:	4640      	mov	r0, r8
 8005058:	f7fb f948 	bl	80002ec <memcpy>
    pp->rdptr += n;
 800505c:	68eb      	ldr	r3, [r5, #12]
 800505e:	4423      	add	r3, r4
 8005060:	60eb      	str	r3, [r5, #12]
 8005062:	e7e4      	b.n	800502e <chPipeReadTimeout.constprop.0+0x8e>
 8005064:	2000088c 	.word	0x2000088c
 8005068:	200008cc 	.word	0x200008cc
 800506c:	00000000 	.word	0x00000000

08005070 <oslib_test_003_002_execute>:

static void oslib_test_003_002_execute(void) {
 8005070:	b530      	push	{r4, r5, lr}

  /* [3.2.1] Reading while pipe is empty.*/
  test_set_step(1);
 8005072:	4d22      	ldr	r5, [pc, #136]	; (80050fc <oslib_test_003_002_execute+0x8c>)
static void oslib_test_003_002_execute(void) {
 8005074:	b085      	sub	sp, #20
  test_set_step(1);
 8005076:	2301      	movs	r3, #1
  {
    size_t n;
    uint8_t buf[PIPE_SIZE];

    n = chPipeReadTimeout(&pipe1, buf, PIPE_SIZE, TIME_IMMEDIATE);
 8005078:	2110      	movs	r1, #16
 800507a:	4668      	mov	r0, sp
  test_set_step(1);
 800507c:	602b      	str	r3, [r5, #0]
    n = chPipeReadTimeout(&pipe1, buf, PIPE_SIZE, TIME_IMMEDIATE);
 800507e:	f7ff ff8f 	bl	8004fa0 <chPipeReadTimeout.constprop.0>
    test_assert(n == 0, "wrong size");
 8005082:	fab0 f080 	clz	r0, r0
 8005086:	491e      	ldr	r1, [pc, #120]	; (8005100 <oslib_test_003_002_execute+0x90>)
 8005088:	0940      	lsrs	r0, r0, #5
 800508a:	f7fb fca9 	bl	80009e0 <_test_assert>
 800508e:	b940      	cbnz	r0, 80050a2 <oslib_test_003_002_execute+0x32>
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 8005090:	4c1c      	ldr	r4, [pc, #112]	; (8005104 <oslib_test_003_002_execute+0x94>)
 8005092:	6822      	ldr	r2, [r4, #0]
 8005094:	68e3      	ldr	r3, [r4, #12]
 8005096:	4293      	cmp	r3, r2
 8005098:	d01d      	beq.n	80050d6 <oslib_test_003_002_execute+0x66>
 800509a:	491b      	ldr	r1, [pc, #108]	; (8005108 <oslib_test_003_002_execute+0x98>)
 800509c:	f7fb fca0 	bl	80009e0 <_test_assert>
 80050a0:	b108      	cbz	r0, 80050a6 <oslib_test_003_002_execute+0x36>
                (pipe1.wrptr == pipe1.buffer) &&
                (pipe1.cnt == PIPE_SIZE / 2),
                "invalid pipe state");
  }
  test_end_step(2);
}
 80050a2:	b005      	add	sp, #20
 80050a4:	bd30      	pop	{r4, r5, pc}
  test_set_step(2);
 80050a6:	2302      	movs	r3, #2
    n = chPipeWriteTimeout(&pipe1, pipe_pattern, PIPE_SIZE, TIME_IMMEDIATE);
 80050a8:	2010      	movs	r0, #16
  test_set_step(2);
 80050aa:	602b      	str	r3, [r5, #0]
    n = chPipeWriteTimeout(&pipe1, pipe_pattern, PIPE_SIZE, TIME_IMMEDIATE);
 80050ac:	f7ff ff00 	bl	8004eb0 <chPipeWriteTimeout.constprop.0>
    test_assert(n == PIPE_SIZE / 2, "wrong size");
 80050b0:	f1a0 0008 	sub.w	r0, r0, #8
 80050b4:	fab0 f080 	clz	r0, r0
 80050b8:	4911      	ldr	r1, [pc, #68]	; (8005100 <oslib_test_003_002_execute+0x90>)
 80050ba:	0940      	lsrs	r0, r0, #5
 80050bc:	f7fb fc90 	bl	80009e0 <_test_assert>
 80050c0:	2800      	cmp	r0, #0
 80050c2:	d1ee      	bne.n	80050a2 <oslib_test_003_002_execute+0x32>
    test_assert((pipe1.rdptr == pipe1.wrptr) &&
 80050c4:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d00c      	beq.n	80050e6 <oslib_test_003_002_execute+0x76>
 80050cc:	490e      	ldr	r1, [pc, #56]	; (8005108 <oslib_test_003_002_execute+0x98>)
 80050ce:	f7fb fc87 	bl	80009e0 <_test_assert>
}
 80050d2:	b005      	add	sp, #20
 80050d4:	bd30      	pop	{r4, r5, pc}
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 80050d6:	68a2      	ldr	r2, [r4, #8]
 80050d8:	4293      	cmp	r3, r2
 80050da:	d1de      	bne.n	800509a <oslib_test_003_002_execute+0x2a>
 80050dc:	6920      	ldr	r0, [r4, #16]
 80050de:	fab0 f080 	clz	r0, r0
 80050e2:	0940      	lsrs	r0, r0, #5
 80050e4:	e7d9      	b.n	800509a <oslib_test_003_002_execute+0x2a>
    test_assert((pipe1.rdptr == pipe1.wrptr) &&
 80050e6:	6822      	ldr	r2, [r4, #0]
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d1ef      	bne.n	80050cc <oslib_test_003_002_execute+0x5c>
 80050ec:	6920      	ldr	r0, [r4, #16]
 80050ee:	f1a0 0008 	sub.w	r0, r0, #8
 80050f2:	fab0 f080 	clz	r0, r0
 80050f6:	0940      	lsrs	r0, r0, #5
 80050f8:	e7e8      	b.n	80050cc <oslib_test_003_002_execute+0x5c>
 80050fa:	bf00      	nop
 80050fc:	2000149c 	.word	0x2000149c
 8005100:	08009fb8 	.word	0x08009fb8
 8005104:	2000088c 	.word	0x2000088c
 8005108:	0800a084 	.word	0x0800a084
 800510c:	00000000 	.word	0x00000000

08005110 <chFactoryRegisterObject.constprop.0>:
 * @retval NULL         if the object to be registered cannot be allocated or
 *                      a registered object with the same name exists.
 *
 * @api
 */
registered_object_t *chFactoryRegisterObject(const char *name,
 8005110:	b538      	push	{r3, r4, r5, lr}
 8005112:	4605      	mov	r5, r0
                                             void *objp) {
  registered_object_t *rop;

  F_LOCK();
 8005114:	4807      	ldr	r0, [pc, #28]	; (8005134 <chFactoryRegisterObject.constprop.0+0x24>)
 8005116:	f7fe f833 	bl	8003180 <chMtxLock>

  rop = (registered_object_t *)dyn_create_object_pool(name,
 800511a:	4a07      	ldr	r2, [pc, #28]	; (8005138 <chFactoryRegisterObject.constprop.0+0x28>)
 800511c:	4807      	ldr	r0, [pc, #28]	; (800513c <chFactoryRegisterObject.constprop.0+0x2c>)
 800511e:	1f11      	subs	r1, r2, #4
 8005120:	f7fc fefe 	bl	8001f20 <dyn_create_object_pool>
                                                      &ch_factory.obj_list,
                                                      &ch_factory.obj_pool);
  if (rop != NULL) {
 8005124:	4604      	mov	r4, r0
 8005126:	b100      	cbz	r0, 800512a <chFactoryRegisterObject.constprop.0+0x1a>
    /* Initializing registered object data.*/
    rop->objp = objp;
 8005128:	6105      	str	r5, [r0, #16]
  }

  F_UNLOCK();
 800512a:	4802      	ldr	r0, [pc, #8]	; (8005134 <chFactoryRegisterObject.constprop.0+0x24>)
 800512c:	f7ff fdb8 	bl	8004ca0 <chMtxUnlock>

  return rop;
}
 8005130:	4620      	mov	r0, r4
 8005132:	bd38      	pop	{r3, r4, r5, pc}
 8005134:	20000a28 	.word	0x20000a28
 8005138:	20000a3c 	.word	0x20000a3c
 800513c:	0800a098 	.word	0x0800a098

08005140 <chFactoryFindObject.constprop.0>:
 * @retval NULL         if a registered object with the specified name
 *                      does not exist.
 *
 * @api
 */
registered_object_t *chFactoryFindObject(const char *name) {
 8005140:	b538      	push	{r3, r4, r5, lr}
  registered_object_t *rop;

  F_LOCK();
 8005142:	4d07      	ldr	r5, [pc, #28]	; (8005160 <chFactoryFindObject.constprop.0+0x20>)
 8005144:	4628      	mov	r0, r5
 8005146:	f7fe f81b 	bl	8003180 <chMtxLock>

  rop = (registered_object_t *)dyn_find_object(name, &ch_factory.obj_list);
 800514a:	f105 0110 	add.w	r1, r5, #16
 800514e:	4805      	ldr	r0, [pc, #20]	; (8005164 <chFactoryFindObject.constprop.0+0x24>)
 8005150:	f7fc fec6 	bl	8001ee0 <dyn_find_object>
 8005154:	4604      	mov	r4, r0

  F_UNLOCK();
 8005156:	4628      	mov	r0, r5
 8005158:	f7ff fda2 	bl	8004ca0 <chMtxUnlock>

  return rop;
}
 800515c:	4620      	mov	r0, r4
 800515e:	bd38      	pop	{r3, r4, r5, pc}
 8005160:	20000a28 	.word	0x20000a28
 8005164:	0800a098 	.word	0x0800a098
	...

08005170 <chFactoryCreateBuffer.constprop.0>:
 * @retval NULL         if the dynamic buffer object cannot be allocated or
 *                      a dynamic buffer object with the same name exists.
 *
 * @api
 */
dyn_buffer_t *chFactoryCreateBuffer(const char *name, size_t size) {
 8005170:	b510      	push	{r4, lr}
  dyn_buffer_t *dbp;

  F_LOCK();
 8005172:	480a      	ldr	r0, [pc, #40]	; (800519c <chFactoryCreateBuffer.constprop.0+0x2c>)
 8005174:	f7fe f804 	bl	8003180 <chMtxLock>

  dbp = (dyn_buffer_t *)dyn_create_object_heap(name,
 8005178:	4909      	ldr	r1, [pc, #36]	; (80051a0 <chFactoryCreateBuffer.constprop.0+0x30>)
 800517a:	480a      	ldr	r0, [pc, #40]	; (80051a4 <chFactoryCreateBuffer.constprop.0+0x34>)
 800517c:	2280      	movs	r2, #128	; 0x80
 800517e:	f7ff fe67 	bl	8004e50 <dyn_create_object_heap>
                                               &ch_factory.buf_list,
                                               size);
  if (dbp != NULL) {
 8005182:	4604      	mov	r4, r0
 8005184:	b120      	cbz	r0, 8005190 <chFactoryCreateBuffer.constprop.0+0x20>
    /* Initializing buffer object data.*/
    memset((void *)(dbp + 1), 0, size);
 8005186:	2280      	movs	r2, #128	; 0x80
 8005188:	2100      	movs	r1, #0
 800518a:	3010      	adds	r0, #16
 800518c:	f003 fe7a 	bl	8008e84 <memset>
  }

  F_UNLOCK();
 8005190:	4802      	ldr	r0, [pc, #8]	; (800519c <chFactoryCreateBuffer.constprop.0+0x2c>)
 8005192:	f7ff fd85 	bl	8004ca0 <chMtxUnlock>

  return dbp;
}
 8005196:	4620      	mov	r0, r4
 8005198:	bd10      	pop	{r4, pc}
 800519a:	bf00      	nop
 800519c:	20000a28 	.word	0x20000a28
 80051a0:	20000a4c 	.word	0x20000a4c
 80051a4:	0800a0a0 	.word	0x0800a0a0
	...

080051b0 <chFactoryFindBuffer.constprop.0>:
 * @retval NULL         if a dynamic buffer object with the specified name
 *                      does not exist.
 *
 * @api
 */
dyn_buffer_t *chFactoryFindBuffer(const char *name) {
 80051b0:	b538      	push	{r3, r4, r5, lr}
  dyn_buffer_t *dbp;

  F_LOCK();
 80051b2:	4d07      	ldr	r5, [pc, #28]	; (80051d0 <chFactoryFindBuffer.constprop.0+0x20>)
 80051b4:	4628      	mov	r0, r5
 80051b6:	f7fd ffe3 	bl	8003180 <chMtxLock>

  dbp = (dyn_buffer_t *)dyn_find_object(name, &ch_factory.buf_list);
 80051ba:	f105 0124 	add.w	r1, r5, #36	; 0x24
 80051be:	4805      	ldr	r0, [pc, #20]	; (80051d4 <chFactoryFindBuffer.constprop.0+0x24>)
 80051c0:	f7fc fe8e 	bl	8001ee0 <dyn_find_object>
 80051c4:	4604      	mov	r4, r0

  F_UNLOCK();
 80051c6:	4628      	mov	r0, r5
 80051c8:	f7ff fd6a 	bl	8004ca0 <chMtxUnlock>

  return dbp;
}
 80051cc:	4620      	mov	r0, r4
 80051ce:	bd38      	pop	{r3, r4, r5, pc}
 80051d0:	20000a28 	.word	0x20000a28
 80051d4:	0800a0a0 	.word	0x0800a0a0
	...

080051e0 <chFactoryCreateSemaphore.constprop.0>:
 * @retval NULL         if the dynamic semaphore object cannot be allocated or
 *                      a dynamic semaphore with the same name exists.
 *
 * @api
 */
dyn_semaphore_t *chFactoryCreateSemaphore(const char *name, cnt_t n) {
 80051e0:	b510      	push	{r4, lr}
  dyn_semaphore_t *dsp;

  F_LOCK();
 80051e2:	480a      	ldr	r0, [pc, #40]	; (800520c <chFactoryCreateSemaphore.constprop.0+0x2c>)
 80051e4:	f7fd ffcc 	bl	8003180 <chMtxLock>

  dsp = (dyn_semaphore_t *)dyn_create_object_pool(name,
 80051e8:	4a09      	ldr	r2, [pc, #36]	; (8005210 <chFactoryCreateSemaphore.constprop.0+0x30>)
 80051ea:	480a      	ldr	r0, [pc, #40]	; (8005214 <chFactoryCreateSemaphore.constprop.0+0x34>)
 80051ec:	1f11      	subs	r1, r2, #4
 80051ee:	f7fc fe97 	bl	8001f20 <dyn_create_object_pool>
                                                  &ch_factory.sem_list,
                                                  &ch_factory.sem_pool);
  if (dsp != NULL) {
 80051f2:	4604      	mov	r4, r0
 80051f4:	b128      	cbz	r0, 8005202 <chFactoryCreateSemaphore.constprop.0+0x22>
    /* Initializing semaphore object dataa.*/
    chSemObjectInit(&dsp->sem, n);
 80051f6:	f100 0310 	add.w	r3, r0, #16
  tqp->prev = (thread_t *)tqp;
 80051fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80051fe:	2200      	movs	r2, #0
 8005200:	6182      	str	r2, [r0, #24]
  }

  F_UNLOCK();
 8005202:	4802      	ldr	r0, [pc, #8]	; (800520c <chFactoryCreateSemaphore.constprop.0+0x2c>)
 8005204:	f7ff fd4c 	bl	8004ca0 <chMtxUnlock>

  return dsp;
}
 8005208:	4620      	mov	r0, r4
 800520a:	bd10      	pop	{r4, pc}
 800520c:	20000a28 	.word	0x20000a28
 8005210:	20000a54 	.word	0x20000a54
 8005214:	0800a0a8 	.word	0x0800a0a8
	...

08005220 <chFactoryFindSemaphore.constprop.0>:
 * @retval NULL         if a dynamic semaphore object with the specified name
 *                      does not exist.
 *
 * @api
 */
dyn_semaphore_t *chFactoryFindSemaphore(const char *name) {
 8005220:	b538      	push	{r3, r4, r5, lr}
  dyn_semaphore_t *dsp;

  F_LOCK();
 8005222:	4d07      	ldr	r5, [pc, #28]	; (8005240 <chFactoryFindSemaphore.constprop.0+0x20>)
 8005224:	4628      	mov	r0, r5
 8005226:	f7fd ffab 	bl	8003180 <chMtxLock>

  dsp = (dyn_semaphore_t *)dyn_find_object(name, &ch_factory.sem_list);
 800522a:	f105 0128 	add.w	r1, r5, #40	; 0x28
 800522e:	4805      	ldr	r0, [pc, #20]	; (8005244 <chFactoryFindSemaphore.constprop.0+0x24>)
 8005230:	f7fc fe56 	bl	8001ee0 <dyn_find_object>
 8005234:	4604      	mov	r4, r0

  F_UNLOCK();
 8005236:	4628      	mov	r0, r5
 8005238:	f7ff fd32 	bl	8004ca0 <chMtxUnlock>

  return dsp;
}
 800523c:	4620      	mov	r0, r4
 800523e:	bd38      	pop	{r3, r4, r5, pc}
 8005240:	20000a28 	.word	0x20000a28
 8005244:	0800a0a8 	.word	0x0800a0a8
	...

08005250 <chFactoryCreateMailbox.constprop.0>:
 * @retval NULL         if the dynamic mailbox object cannot be allocated or
 *                      a dynamic mailbox object with the same name exists.
 *
 * @api
 */
dyn_mailbox_t *chFactoryCreateMailbox(const char *name, size_t n) {
 8005250:	b538      	push	{r3, r4, r5, lr}
  dyn_mailbox_t *dmp;

  F_LOCK();
 8005252:	4811      	ldr	r0, [pc, #68]	; (8005298 <chFactoryCreateMailbox.constprop.0+0x48>)
 8005254:	f7fd ff94 	bl	8003180 <chMtxLock>

  dmp = (dyn_mailbox_t *)dyn_create_object_heap(name,
 8005258:	4910      	ldr	r1, [pc, #64]	; (800529c <chFactoryCreateMailbox.constprop.0+0x4c>)
 800525a:	4811      	ldr	r0, [pc, #68]	; (80052a0 <chFactoryCreateMailbox.constprop.0+0x50>)
 800525c:	2278      	movs	r2, #120	; 0x78
 800525e:	f7ff fdf7 	bl	8004e50 <dyn_create_object_heap>
                                                &ch_factory.mbx_list,
                                                sizeof (dyn_mailbox_t) +
                                                (n * sizeof (msg_t)));
  if (dmp != NULL) {
 8005262:	4604      	mov	r4, r0
 8005264:	b198      	cbz	r0, 800528e <chFactoryCreateMailbox.constprop.0+0x3e>
    /* Initializing mailbox object data.*/
    chMBObjectInit(&dmp->mbx, (msg_t *)(dmp + 1), n);
 8005266:	f100 0338 	add.w	r3, r0, #56	; 0x38
  chThdQueueObjectInit(&mbp->qw);
 800526a:	f104 0128 	add.w	r1, r4, #40	; 0x28
  chThdQueueObjectInit(&mbp->qr);
 800526e:	f104 0230 	add.w	r2, r4, #48	; 0x30
  mbp->wrptr  = buf;
 8005272:	e9c4 3306 	strd	r3, r3, [r4, #24]
 8005276:	e9c4 110a 	strd	r1, r1, [r4, #40]	; 0x28
 800527a:	e9c4 220c 	strd	r2, r2, [r4, #48]	; 0x30
  mbp->top    = &buf[n];
 800527e:	f100 0578 	add.w	r5, r0, #120	; 0x78
  mbp->cnt    = (size_t)0;
 8005282:	2000      	movs	r0, #0
  mbp->buffer = buf;
 8005284:	6123      	str	r3, [r4, #16]
  mbp->top    = &buf[n];
 8005286:	6165      	str	r5, [r4, #20]
  mbp->cnt    = (size_t)0;
 8005288:	6220      	str	r0, [r4, #32]
  mbp->reset  = false;
 800528a:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  }

  F_UNLOCK();
 800528e:	4802      	ldr	r0, [pc, #8]	; (8005298 <chFactoryCreateMailbox.constprop.0+0x48>)
 8005290:	f7ff fd06 	bl	8004ca0 <chMtxUnlock>

  return dmp;
}
 8005294:	4620      	mov	r0, r4
 8005296:	bd38      	pop	{r3, r4, r5, pc}
 8005298:	20000a28 	.word	0x20000a28
 800529c:	20000a64 	.word	0x20000a64
 80052a0:	0800a0b0 	.word	0x0800a0b0
	...

080052b0 <chFactoryFindMailbox.constprop.0>:
 * @retval NULL         if a dynamic mailbox object with the specified name
 *                      does not exist.
 *
 * @api
 */
dyn_mailbox_t *chFactoryFindMailbox(const char *name) {
 80052b0:	b538      	push	{r3, r4, r5, lr}
  dyn_mailbox_t *dmp;

  F_LOCK();
 80052b2:	4d07      	ldr	r5, [pc, #28]	; (80052d0 <chFactoryFindMailbox.constprop.0+0x20>)
 80052b4:	4628      	mov	r0, r5
 80052b6:	f7fd ff63 	bl	8003180 <chMtxLock>

  dmp = (dyn_mailbox_t *)dyn_find_object(name, &ch_factory.mbx_list);
 80052ba:	f105 013c 	add.w	r1, r5, #60	; 0x3c
 80052be:	4805      	ldr	r0, [pc, #20]	; (80052d4 <chFactoryFindMailbox.constprop.0+0x24>)
 80052c0:	f7fc fe0e 	bl	8001ee0 <dyn_find_object>
 80052c4:	4604      	mov	r4, r0

  F_UNLOCK();
 80052c6:	4628      	mov	r0, r5
 80052c8:	f7ff fcea 	bl	8004ca0 <chMtxUnlock>

  return dmp;
}
 80052cc:	4620      	mov	r0, r4
 80052ce:	bd38      	pop	{r3, r4, r5, pc}
 80052d0:	20000a28 	.word	0x20000a28
 80052d4:	0800a0b0 	.word	0x0800a0b0
	...

080052e0 <chFactoryCreateObjectsFIFO.constprop.0>:
 *                      allocated or a dynamic "objects FIFO" object with
 *                      the same name exists.
 *
 * @api
 */
dyn_objects_fifo_t *chFactoryCreateObjectsFIFO(const char *name,
 80052e0:	b570      	push	{r4, r5, r6, lr}
                                               size_t objsize,
                                               size_t objn,
                                               unsigned objalign) {
  dyn_objects_fifo_t *dofp;

  F_LOCK();
 80052e2:	4818      	ldr	r0, [pc, #96]	; (8005344 <chFactoryCreateObjectsFIFO.constprop.0+0x64>)
 80052e4:	f7fd ff4c 	bl	8003180 <chMtxLock>

  dofp = (dyn_objects_fifo_t *)dyn_create_object_heap(name,
 80052e8:	4917      	ldr	r1, [pc, #92]	; (8005348 <chFactoryCreateObjectsFIFO.constprop.0+0x68>)
 80052ea:	4818      	ldr	r0, [pc, #96]	; (800534c <chFactoryCreateObjectsFIFO.constprop.0+0x6c>)
 80052ec:	f44f 72ca 	mov.w	r2, #404	; 0x194
 80052f0:	f7ff fdae 	bl	8004e50 <dyn_create_object_heap>
                                                      &ch_factory.fifo_list,
                                                      sizeof (dyn_objects_fifo_t) +
                                                      (objn * sizeof (msg_t)) +
                                                      (objn * objsize));
  if (dofp != NULL) {
 80052f4:	4604      	mov	r4, r0
 80052f6:	b300      	cbz	r0, 800533a <chFactoryCreateObjectsFIFO.constprop.0+0x5a>
  mp->next = NULL;
 80052f8:	2600      	movs	r6, #0
    msg_t *msgbuf = (msg_t *)(dofp + 1);

    /* Initializing mailbox object data.*/
    chFifoObjectInitAligned(&dofp->fifo, objsize, objn, objalign,
                            (void *)&msgbuf[objn], msgbuf);
 80052fa:	f100 0594 	add.w	r5, r0, #148	; 0x94
  mp->object_size = size;
 80052fe:	2210      	movs	r2, #16
  mp->align = align;
 8005300:	2304      	movs	r3, #4
                                           size_t objn, unsigned objalign,
                                           void *objbuf, msg_t *msgbuf) {

  chDbgCheck((objsize >= objalign) && ((objsize % objalign) == 0U));

  chGuardedPoolObjectInitAligned(&ofp->free, objsize, objalign);
 8005302:	3010      	adds	r0, #16
 8005304:	e9c4 2308 	strd	r2, r3, [r4, #32]
  chGuardedPoolLoadArray(&ofp->free, objbuf, objn);
 8005308:	4629      	mov	r1, r5
 800530a:	e9c4 0004 	strd	r0, r0, [r4, #16]
  mp->next = NULL;
 800530e:	61e6      	str	r6, [r4, #28]
  mp->provider = provider;
 8005310:	62a6      	str	r6, [r4, #40]	; 0x28
 8005312:	61a6      	str	r6, [r4, #24]
 8005314:	f7fe ffec 	bl	80042f0 <chGuardedPoolLoadArray>
    msg_t *msgbuf = (msg_t *)(dofp + 1);
 8005318:	f104 0354 	add.w	r3, r4, #84	; 0x54
  chThdQueueObjectInit(&mbp->qw);
 800531c:	f104 0144 	add.w	r1, r4, #68	; 0x44
  chThdQueueObjectInit(&mbp->qr);
 8005320:	f104 024c 	add.w	r2, r4, #76	; 0x4c
  mbp->wrptr  = buf;
 8005324:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
 8005328:	e9c4 1111 	strd	r1, r1, [r4, #68]	; 0x44
 800532c:	e9c4 2213 	strd	r2, r2, [r4, #76]	; 0x4c
  mbp->top    = &buf[n];
 8005330:	6325      	str	r5, [r4, #48]	; 0x30
  mbp->cnt    = (size_t)0;
 8005332:	63e6      	str	r6, [r4, #60]	; 0x3c
  mbp->reset  = false;
 8005334:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
  mbp->buffer = buf;
 8005338:	62e3      	str	r3, [r4, #44]	; 0x2c
  }

  F_UNLOCK();
 800533a:	4802      	ldr	r0, [pc, #8]	; (8005344 <chFactoryCreateObjectsFIFO.constprop.0+0x64>)
 800533c:	f7ff fcb0 	bl	8004ca0 <chMtxUnlock>

  return dofp;
}
 8005340:	4620      	mov	r0, r4
 8005342:	bd70      	pop	{r4, r5, r6, pc}
 8005344:	20000a28 	.word	0x20000a28
 8005348:	20000a68 	.word	0x20000a68
 800534c:	0800a0b8 	.word	0x0800a0b8

08005350 <chFactoryFindObjectsFIFO.constprop.0>:
 * @retval NULL         if a dynamic "objects FIFO" object with the specified
 *                      name does not exist.
 *
 * @api
 */
dyn_objects_fifo_t *chFactoryFindObjectsFIFO(const char *name) {
 8005350:	b538      	push	{r3, r4, r5, lr}
  dyn_objects_fifo_t *dofp;

  F_LOCK();
 8005352:	4d07      	ldr	r5, [pc, #28]	; (8005370 <chFactoryFindObjectsFIFO.constprop.0+0x20>)
 8005354:	4628      	mov	r0, r5
 8005356:	f7fd ff13 	bl	8003180 <chMtxLock>

  dofp = (dyn_objects_fifo_t *)dyn_find_object(name, &ch_factory.fifo_list);
 800535a:	f105 0140 	add.w	r1, r5, #64	; 0x40
 800535e:	4805      	ldr	r0, [pc, #20]	; (8005374 <chFactoryFindObjectsFIFO.constprop.0+0x24>)
 8005360:	f7fc fdbe 	bl	8001ee0 <dyn_find_object>
 8005364:	4604      	mov	r4, r0

  F_UNLOCK();
 8005366:	4628      	mov	r0, r5
 8005368:	f7ff fc9a 	bl	8004ca0 <chMtxUnlock>

  return dofp;
}
 800536c:	4620      	mov	r0, r4
 800536e:	bd38      	pop	{r3, r4, r5, pc}
 8005370:	20000a28 	.word	0x20000a28
 8005374:	0800a0b8 	.word	0x0800a0b8
	...

08005380 <chFactoryCreatePipe.constprop.0>:
 *                      allocated or a dynamic pipe object with
 *                      the same name exists.
 *
 * @api
 */
dyn_pipe_t *chFactoryCreatePipe(const char *name, size_t size) {
 8005380:	b538      	push	{r3, r4, r5, lr}
  dyn_pipe_t *dpp;

  F_LOCK();
 8005382:	4815      	ldr	r0, [pc, #84]	; (80053d8 <chFactoryCreatePipe.constprop.0+0x58>)
 8005384:	f7fd fefc 	bl	8003180 <chMtxLock>

  dpp = (dyn_pipe_t *)dyn_create_object_heap(name,
 8005388:	4914      	ldr	r1, [pc, #80]	; (80053dc <chFactoryCreatePipe.constprop.0+0x5c>)
 800538a:	4815      	ldr	r0, [pc, #84]	; (80053e0 <chFactoryCreatePipe.constprop.0+0x60>)
 800538c:	2270      	movs	r2, #112	; 0x70
 800538e:	f7ff fd5f 	bl	8004e50 <dyn_create_object_heap>
                                             &ch_factory.pipe_list,
                                             sizeof (dyn_pipe_t) + size);
  if (dpp != NULL) {
 8005392:	4604      	mov	r4, r0
 8005394:	b1d8      	cbz	r0, 80053ce <chFactoryCreatePipe.constprop.0+0x4e>
    /* Initializing mailbox object data.*/
    chPipeObjectInit(&dpp->pipe, (uint8_t *)(dpp + 1), size);
 8005396:	f100 0260 	add.w	r2, r0, #96	; 0x60
  pp->cnt    = (size_t)0;
 800539a:	2300      	movs	r3, #0
  pp->top    = &buf[n];
 800539c:	f100 0570 	add.w	r5, r0, #112	; 0x70
  pp->wrptr  = buf;
 80053a0:	e9c4 2206 	strd	r2, r2, [r4, #24]
  PC_INIT(pp);
 80053a4:	3030      	adds	r0, #48	; 0x30
  PW_INIT(pp);
 80053a6:	f104 0140 	add.w	r1, r4, #64	; 0x40
  pp->buffer = buf;
 80053aa:	6122      	str	r2, [r4, #16]
  PR_INIT(pp);
 80053ac:	f104 0250 	add.w	r2, r4, #80	; 0x50
  pp->rtr    = NULL;
 80053b0:	e9c4 330a 	strd	r3, r3, [r4, #40]	; 0x28
 80053b4:	e9c4 000c 	strd	r0, r0, [r4, #48]	; 0x30
 80053b8:	e9c4 1110 	strd	r1, r1, [r4, #64]	; 0x40
 80053bc:	e9c4 2214 	strd	r2, r2, [r4, #80]	; 0x50
  pp->top    = &buf[n];
 80053c0:	6165      	str	r5, [r4, #20]
  pp->cnt    = (size_t)0;
 80053c2:	6223      	str	r3, [r4, #32]
  pp->reset  = false;
 80053c4:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  mp->owner = NULL;
 80053c8:	63a3      	str	r3, [r4, #56]	; 0x38
 80053ca:	64a3      	str	r3, [r4, #72]	; 0x48
 80053cc:	65a3      	str	r3, [r4, #88]	; 0x58
  }

  F_UNLOCK();
 80053ce:	4802      	ldr	r0, [pc, #8]	; (80053d8 <chFactoryCreatePipe.constprop.0+0x58>)
 80053d0:	f7ff fc66 	bl	8004ca0 <chMtxUnlock>

  return dpp;
}
 80053d4:	4620      	mov	r0, r4
 80053d6:	bd38      	pop	{r3, r4, r5, pc}
 80053d8:	20000a28 	.word	0x20000a28
 80053dc:	20000a6c 	.word	0x20000a6c
 80053e0:	0800a0c0 	.word	0x0800a0c0
	...

080053f0 <chFactoryFindPipe.constprop.0>:
 * @retval NULL         if a dynamic pipe object with the specified
 *                      name does not exist.
 *
 * @api
 */
dyn_pipe_t *chFactoryFindPipe(const char *name) {
 80053f0:	b538      	push	{r3, r4, r5, lr}
  dyn_pipe_t *dpp;

  F_LOCK();
 80053f2:	4d07      	ldr	r5, [pc, #28]	; (8005410 <chFactoryFindPipe.constprop.0+0x20>)
 80053f4:	4628      	mov	r0, r5
 80053f6:	f7fd fec3 	bl	8003180 <chMtxLock>

  dpp = (dyn_pipe_t *)dyn_find_object(name, &ch_factory.pipe_list);
 80053fa:	f105 0144 	add.w	r1, r5, #68	; 0x44
 80053fe:	4805      	ldr	r0, [pc, #20]	; (8005414 <chFactoryFindPipe.constprop.0+0x24>)
 8005400:	f7fc fd6e 	bl	8001ee0 <dyn_find_object>
 8005404:	4604      	mov	r4, r0

  F_UNLOCK();
 8005406:	4628      	mov	r0, r5
 8005408:	f7ff fc4a 	bl	8004ca0 <chMtxUnlock>

  return dpp;
}
 800540c:	4620      	mov	r0, r4
 800540e:	bd38      	pop	{r3, r4, r5, pc}
 8005410:	20000a28 	.word	0x20000a28
 8005414:	0800a0c0 	.word	0x0800a0c0
	...

08005420 <oslib_test_003_001_execute>:
static void oslib_test_003_001_execute(void) {
 8005420:	b570      	push	{r4, r5, r6, lr}
  PC_LOCK(pp);
 8005422:	4c1f      	ldr	r4, [pc, #124]	; (80054a0 <oslib_test_003_001_execute+0x80>)
  test_set_step(1);
 8005424:	4e1f      	ldr	r6, [pc, #124]	; (80054a4 <oslib_test_003_001_execute+0x84>)
 8005426:	2501      	movs	r5, #1
static void oslib_test_003_001_execute(void) {
 8005428:	b084      	sub	sp, #16
 800542a:	f104 0020 	add.w	r0, r4, #32
  test_set_step(1);
 800542e:	6035      	str	r5, [r6, #0]
 8005430:	f7fd fea6 	bl	8003180 <chMtxLock>
  pp->wrptr = pp->buffer;
 8005434:	6823      	ldr	r3, [r4, #0]
  pp->reset = true;
 8005436:	7525      	strb	r5, [r4, #20]
  pp->cnt   = (size_t)0;
 8005438:	2200      	movs	r2, #0
  pp->rdptr = pp->buffer;
 800543a:	e9c4 3302 	strd	r3, r3, [r4, #8]
  pp->cnt   = (size_t)0;
 800543e:	6122      	str	r2, [r4, #16]
 8005440:	2320      	movs	r3, #32
 8005442:	f383 8811 	msr	BASEPRI, r3
  if (*trp != NULL) {
 8005446:	69a0      	ldr	r0, [r4, #24]
 8005448:	b128      	cbz	r0, 8005456 <oslib_test_003_001_execute+0x36>
    tp->u.rdymsg = msg;
 800544a:	f06f 0301 	mvn.w	r3, #1
 800544e:	6243      	str	r3, [r0, #36]	; 0x24
    *trp = NULL;
 8005450:	61a2      	str	r2, [r4, #24]
    (void) chSchReadyI(tp);
 8005452:	f7fb fedd 	bl	8001210 <chSchReadyI>
  if (*trp != NULL) {
 8005456:	69e0      	ldr	r0, [r4, #28]
 8005458:	b130      	cbz	r0, 8005468 <oslib_test_003_001_execute+0x48>
    tp->u.rdymsg = msg;
 800545a:	f06f 0301 	mvn.w	r3, #1
 800545e:	6243      	str	r3, [r0, #36]	; 0x24
    *trp = NULL;
 8005460:	2300      	movs	r3, #0
 8005462:	61e3      	str	r3, [r4, #28]
    (void) chSchReadyI(tp);
 8005464:	f7fb fed4 	bl	8001210 <chSchReadyI>
  chSchRescheduleS();
 8005468:	f7fe fa4a 	bl	8003900 <chSchRescheduleS>
 800546c:	2500      	movs	r5, #0
 800546e:	f385 8811 	msr	BASEPRI, r5
  PC_UNLOCK(pp);
 8005472:	480d      	ldr	r0, [pc, #52]	; (80054a8 <oslib_test_003_001_execute+0x88>)
 8005474:	f7ff fc14 	bl	8004ca0 <chMtxUnlock>
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 8005478:	6822      	ldr	r2, [r4, #0]
 800547a:	68e3      	ldr	r3, [r4, #12]
 800547c:	4293      	cmp	r3, r2
 800547e:	d006      	beq.n	800548e <oslib_test_003_001_execute+0x6e>
 8005480:	4628      	mov	r0, r5
 8005482:	490a      	ldr	r1, [pc, #40]	; (80054ac <oslib_test_003_001_execute+0x8c>)
 8005484:	f7fb faac 	bl	80009e0 <_test_assert>
 8005488:	b190      	cbz	r0, 80054b0 <oslib_test_003_001_execute+0x90>
}
 800548a:	b004      	add	sp, #16
 800548c:	bd70      	pop	{r4, r5, r6, pc}
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 800548e:	68a2      	ldr	r2, [r4, #8]
 8005490:	4293      	cmp	r3, r2
 8005492:	d1f5      	bne.n	8005480 <oslib_test_003_001_execute+0x60>
 8005494:	6925      	ldr	r5, [r4, #16]
 8005496:	fab5 f085 	clz	r0, r5
 800549a:	0940      	lsrs	r0, r0, #5
 800549c:	e7f1      	b.n	8005482 <oslib_test_003_001_execute+0x62>
 800549e:	bf00      	nop
 80054a0:	2000088c 	.word	0x2000088c
 80054a4:	2000149c 	.word	0x2000149c
 80054a8:	200008ac 	.word	0x200008ac
 80054ac:	0800a084 	.word	0x0800a084
  test_set_step(2);
 80054b0:	2302      	movs	r3, #2
    n = chPipeWriteTimeout(&pipe1, pipe_pattern, PIPE_SIZE, TIME_IMMEDIATE);
 80054b2:	2010      	movs	r0, #16
  test_set_step(2);
 80054b4:	6033      	str	r3, [r6, #0]
    n = chPipeWriteTimeout(&pipe1, pipe_pattern, PIPE_SIZE, TIME_IMMEDIATE);
 80054b6:	f7ff fcfb 	bl	8004eb0 <chPipeWriteTimeout.constprop.0>
    test_assert(n == 0, "not reset");
 80054ba:	fab0 f080 	clz	r0, r0
 80054be:	49c3      	ldr	r1, [pc, #780]	; (80057cc <oslib_test_003_001_execute+0x3ac>)
 80054c0:	0940      	lsrs	r0, r0, #5
 80054c2:	f7fb fa8d 	bl	80009e0 <_test_assert>
 80054c6:	2800      	cmp	r0, #0
 80054c8:	d1df      	bne.n	800548a <oslib_test_003_001_execute+0x6a>
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 80054ca:	6822      	ldr	r2, [r4, #0]
 80054cc:	68e3      	ldr	r3, [r4, #12]
 80054ce:	4293      	cmp	r3, r2
 80054d0:	f000 818d 	beq.w	80057ee <oslib_test_003_001_execute+0x3ce>
 80054d4:	49be      	ldr	r1, [pc, #760]	; (80057d0 <oslib_test_003_001_execute+0x3b0>)
 80054d6:	f7fb fa83 	bl	80009e0 <_test_assert>
 80054da:	2800      	cmp	r0, #0
 80054dc:	d1d5      	bne.n	800548a <oslib_test_003_001_execute+0x6a>
  test_set_step(3);
 80054de:	2303      	movs	r3, #3
    n = chPipeReadTimeout(&pipe1, buf, PIPE_SIZE, TIME_IMMEDIATE);
 80054e0:	2110      	movs	r1, #16
 80054e2:	4668      	mov	r0, sp
  test_set_step(3);
 80054e4:	6033      	str	r3, [r6, #0]
    n = chPipeReadTimeout(&pipe1, buf, PIPE_SIZE, TIME_IMMEDIATE);
 80054e6:	f7ff fd5b 	bl	8004fa0 <chPipeReadTimeout.constprop.0>
    test_assert(n == 0, "not reset");
 80054ea:	fab0 f080 	clz	r0, r0
 80054ee:	49b7      	ldr	r1, [pc, #732]	; (80057cc <oslib_test_003_001_execute+0x3ac>)
 80054f0:	0940      	lsrs	r0, r0, #5
 80054f2:	f7fb fa75 	bl	80009e0 <_test_assert>
 80054f6:	2800      	cmp	r0, #0
 80054f8:	d1c7      	bne.n	800548a <oslib_test_003_001_execute+0x6a>
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 80054fa:	6822      	ldr	r2, [r4, #0]
 80054fc:	68e3      	ldr	r3, [r4, #12]
 80054fe:	4293      	cmp	r3, r2
 8005500:	f000 8187 	beq.w	8005812 <oslib_test_003_001_execute+0x3f2>
 8005504:	49b2      	ldr	r1, [pc, #712]	; (80057d0 <oslib_test_003_001_execute+0x3b0>)
 8005506:	f7fb fa6b 	bl	80009e0 <_test_assert>
 800550a:	2800      	cmp	r0, #0
 800550c:	d1bd      	bne.n	800548a <oslib_test_003_001_execute+0x6a>
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 800550e:	6822      	ldr	r2, [r4, #0]
 8005510:	68e3      	ldr	r3, [r4, #12]
 *
 * @api
 */
static inline void chPipeResume(pipe_t *pp) {

  pp->reset = false;
 8005512:	7520      	strb	r0, [r4, #20]
  test_set_step(4);
 8005514:	2104      	movs	r1, #4
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 8005516:	4293      	cmp	r3, r2
  test_set_step(4);
 8005518:	6031      	str	r1, [r6, #0]
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 800551a:	f000 8171 	beq.w	8005800 <oslib_test_003_001_execute+0x3e0>
 800551e:	49ac      	ldr	r1, [pc, #688]	; (80057d0 <oslib_test_003_001_execute+0x3b0>)
 8005520:	f7fb fa5e 	bl	80009e0 <_test_assert>
 8005524:	2800      	cmp	r0, #0
 8005526:	d1b0      	bne.n	800548a <oslib_test_003_001_execute+0x6a>
  test_set_step(5);
 8005528:	2305      	movs	r3, #5
    n = chPipeWriteTimeout(&pipe1, pipe_pattern, PIPE_SIZE, TIME_IMMEDIATE);
 800552a:	2010      	movs	r0, #16
  test_set_step(5);
 800552c:	6033      	str	r3, [r6, #0]
    n = chPipeWriteTimeout(&pipe1, pipe_pattern, PIPE_SIZE, TIME_IMMEDIATE);
 800552e:	f7ff fcbf 	bl	8004eb0 <chPipeWriteTimeout.constprop.0>
    test_assert(n == PIPE_SIZE, "wrong size");
 8005532:	f1a0 0010 	sub.w	r0, r0, #16
 8005536:	fab0 f080 	clz	r0, r0
 800553a:	49a6      	ldr	r1, [pc, #664]	; (80057d4 <oslib_test_003_001_execute+0x3b4>)
 800553c:	0940      	lsrs	r0, r0, #5
 800553e:	f7fb fa4f 	bl	80009e0 <_test_assert>
 8005542:	2800      	cmp	r0, #0
 8005544:	d1a1      	bne.n	800548a <oslib_test_003_001_execute+0x6a>
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 8005546:	6822      	ldr	r2, [r4, #0]
 8005548:	68e3      	ldr	r3, [r4, #12]
 800554a:	4293      	cmp	r3, r2
 800554c:	f000 816a 	beq.w	8005824 <oslib_test_003_001_execute+0x404>
 8005550:	499f      	ldr	r1, [pc, #636]	; (80057d0 <oslib_test_003_001_execute+0x3b0>)
 8005552:	f7fb fa45 	bl	80009e0 <_test_assert>
 8005556:	2800      	cmp	r0, #0
 8005558:	d197      	bne.n	800548a <oslib_test_003_001_execute+0x6a>
  test_set_step(6);
 800555a:	2306      	movs	r3, #6
    n = chPipeReadTimeout(&pipe1, buf, PIPE_SIZE, TIME_IMMEDIATE);
 800555c:	2110      	movs	r1, #16
 800555e:	4668      	mov	r0, sp
  test_set_step(6);
 8005560:	6033      	str	r3, [r6, #0]
    n = chPipeReadTimeout(&pipe1, buf, PIPE_SIZE, TIME_IMMEDIATE);
 8005562:	f7ff fd1d 	bl	8004fa0 <chPipeReadTimeout.constprop.0>
    test_assert(n == PIPE_SIZE, "wrong size");
 8005566:	f1a0 0010 	sub.w	r0, r0, #16
 800556a:	fab0 f080 	clz	r0, r0
 800556e:	4999      	ldr	r1, [pc, #612]	; (80057d4 <oslib_test_003_001_execute+0x3b4>)
 8005570:	0940      	lsrs	r0, r0, #5
 8005572:	f7fb fa35 	bl	80009e0 <_test_assert>
 8005576:	2800      	cmp	r0, #0
 8005578:	d187      	bne.n	800548a <oslib_test_003_001_execute+0x6a>
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 800557a:	6822      	ldr	r2, [r4, #0]
 800557c:	68e3      	ldr	r3, [r4, #12]
 800557e:	4293      	cmp	r3, r2
 8005580:	f000 815b 	beq.w	800583a <oslib_test_003_001_execute+0x41a>
 8005584:	4992      	ldr	r1, [pc, #584]	; (80057d0 <oslib_test_003_001_execute+0x3b0>)
 8005586:	f7fb fa2b 	bl	80009e0 <_test_assert>
 800558a:	2800      	cmp	r0, #0
 800558c:	f47f af7d 	bne.w	800548a <oslib_test_003_001_execute+0x6a>
    test_assert(memcmp(pipe_pattern, buf, PIPE_SIZE) == 0, "content mismatch");
 8005590:	4b91      	ldr	r3, [pc, #580]	; (80057d8 <oslib_test_003_001_execute+0x3b8>)
 8005592:	9a00      	ldr	r2, [sp, #0]
 8005594:	429a      	cmp	r2, r3
 8005596:	f000 8159 	beq.w	800584c <oslib_test_003_001_execute+0x42c>
 800559a:	2001      	movs	r0, #1
 800559c:	498f      	ldr	r1, [pc, #572]	; (80057dc <oslib_test_003_001_execute+0x3bc>)
 800559e:	f080 0001 	eor.w	r0, r0, #1
 80055a2:	f7fb fa1d 	bl	80009e0 <_test_assert>
 80055a6:	2800      	cmp	r0, #0
 80055a8:	f47f af6f 	bne.w	800548a <oslib_test_003_001_execute+0x6a>
  test_set_step(7);
 80055ac:	2307      	movs	r3, #7
    n = chPipeWriteTimeout(&pipe1, pipe_pattern, 4, TIME_IMMEDIATE);
 80055ae:	2004      	movs	r0, #4
  test_set_step(7);
 80055b0:	6033      	str	r3, [r6, #0]
    n = chPipeWriteTimeout(&pipe1, pipe_pattern, 4, TIME_IMMEDIATE);
 80055b2:	f7ff fc7d 	bl	8004eb0 <chPipeWriteTimeout.constprop.0>
    test_assert(n == 4, "wrong size");
 80055b6:	f1a0 0004 	sub.w	r0, r0, #4
 80055ba:	fab0 f080 	clz	r0, r0
 80055be:	4985      	ldr	r1, [pc, #532]	; (80057d4 <oslib_test_003_001_execute+0x3b4>)
 80055c0:	0940      	lsrs	r0, r0, #5
 80055c2:	f7fb fa0d 	bl	80009e0 <_test_assert>
 80055c6:	2800      	cmp	r0, #0
 80055c8:	f47f af5f 	bne.w	800548a <oslib_test_003_001_execute+0x6a>
    test_assert((pipe1.rdptr != pipe1.wrptr) &&
 80055cc:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d003      	beq.n	80055dc <oslib_test_003_001_execute+0x1bc>
 80055d4:	6822      	ldr	r2, [r4, #0]
 80055d6:	4293      	cmp	r3, r2
 80055d8:	f000 8153 	beq.w	8005882 <oslib_test_003_001_execute+0x462>
 80055dc:	497c      	ldr	r1, [pc, #496]	; (80057d0 <oslib_test_003_001_execute+0x3b0>)
 80055de:	f7fb f9ff 	bl	80009e0 <_test_assert>
 80055e2:	2800      	cmp	r0, #0
 80055e4:	f47f af51 	bne.w	800548a <oslib_test_003_001_execute+0x6a>
  test_set_step(8);
 80055e8:	2308      	movs	r3, #8
    n = chPipeWriteTimeout(&pipe1, pipe_pattern, PIPE_SIZE - 4, TIME_IMMEDIATE);
 80055ea:	200c      	movs	r0, #12
  test_set_step(8);
 80055ec:	6033      	str	r3, [r6, #0]
    n = chPipeWriteTimeout(&pipe1, pipe_pattern, PIPE_SIZE - 4, TIME_IMMEDIATE);
 80055ee:	f7ff fc5f 	bl	8004eb0 <chPipeWriteTimeout.constprop.0>
    test_assert(n == PIPE_SIZE - 4, "wrong size");
 80055f2:	f1a0 0e0c 	sub.w	lr, r0, #12
 80055f6:	f1de 0000 	rsbs	r0, lr, #0
 80055fa:	eb40 000e 	adc.w	r0, r0, lr
 80055fe:	4975      	ldr	r1, [pc, #468]	; (80057d4 <oslib_test_003_001_execute+0x3b4>)
 8005600:	f7fb f9ee 	bl	80009e0 <_test_assert>
 8005604:	2800      	cmp	r0, #0
 8005606:	f47f af40 	bne.w	800548a <oslib_test_003_001_execute+0x6a>
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 800560a:	6822      	ldr	r2, [r4, #0]
 800560c:	68e3      	ldr	r3, [r4, #12]
 800560e:	4293      	cmp	r3, r2
 8005610:	f000 813c 	beq.w	800588c <oslib_test_003_001_execute+0x46c>
 8005614:	496e      	ldr	r1, [pc, #440]	; (80057d0 <oslib_test_003_001_execute+0x3b0>)
 8005616:	f7fb f9e3 	bl	80009e0 <_test_assert>
 800561a:	2800      	cmp	r0, #0
 800561c:	f47f af35 	bne.w	800548a <oslib_test_003_001_execute+0x6a>
  test_set_step(9);
 8005620:	2309      	movs	r3, #9
    n = chPipeReadTimeout(&pipe1, buf, 4, TIME_IMMEDIATE);
 8005622:	2104      	movs	r1, #4
 8005624:	4668      	mov	r0, sp
  test_set_step(9);
 8005626:	6033      	str	r3, [r6, #0]
    n = chPipeReadTimeout(&pipe1, buf, 4, TIME_IMMEDIATE);
 8005628:	f7ff fcba 	bl	8004fa0 <chPipeReadTimeout.constprop.0>
    test_assert(n == 4, "wrong size");
 800562c:	1f05      	subs	r5, r0, #4
 800562e:	4268      	negs	r0, r5
 8005630:	4168      	adcs	r0, r5
 8005632:	4968      	ldr	r1, [pc, #416]	; (80057d4 <oslib_test_003_001_execute+0x3b4>)
 8005634:	f7fb f9d4 	bl	80009e0 <_test_assert>
 8005638:	2800      	cmp	r0, #0
 800563a:	f47f af26 	bne.w	800548a <oslib_test_003_001_execute+0x6a>
    test_assert((pipe1.rdptr != pipe1.buffer) &&
 800563e:	6823      	ldr	r3, [r4, #0]
 8005640:	68e2      	ldr	r2, [r4, #12]
 8005642:	429a      	cmp	r2, r3
 8005644:	d003      	beq.n	800564e <oslib_test_003_001_execute+0x22e>
 8005646:	68a2      	ldr	r2, [r4, #8]
 8005648:	4293      	cmp	r3, r2
 800564a:	f000 8145 	beq.w	80058d8 <oslib_test_003_001_execute+0x4b8>
 800564e:	4960      	ldr	r1, [pc, #384]	; (80057d0 <oslib_test_003_001_execute+0x3b0>)
 8005650:	f7fb f9c6 	bl	80009e0 <_test_assert>
 8005654:	2800      	cmp	r0, #0
 8005656:	f47f af18 	bne.w	800548a <oslib_test_003_001_execute+0x6a>
    test_assert(memcmp(pipe_pattern, buf, 4) == 0, "content mismatch");
 800565a:	9800      	ldr	r0, [sp, #0]
 800565c:	4b5e      	ldr	r3, [pc, #376]	; (80057d8 <oslib_test_003_001_execute+0x3b8>)
 800565e:	495f      	ldr	r1, [pc, #380]	; (80057dc <oslib_test_003_001_execute+0x3bc>)
 8005660:	1ac2      	subs	r2, r0, r3
 8005662:	4250      	negs	r0, r2
 8005664:	4150      	adcs	r0, r2
 8005666:	f7fb f9bb 	bl	80009e0 <_test_assert>
 800566a:	2800      	cmp	r0, #0
 800566c:	f47f af0d 	bne.w	800548a <oslib_test_003_001_execute+0x6a>
  test_set_step(10);
 8005670:	230a      	movs	r3, #10
    n = chPipeReadTimeout(&pipe1, buf, PIPE_SIZE - 4, TIME_IMMEDIATE);
 8005672:	210c      	movs	r1, #12
 8005674:	4668      	mov	r0, sp
  test_set_step(10);
 8005676:	6033      	str	r3, [r6, #0]
    n = chPipeReadTimeout(&pipe1, buf, PIPE_SIZE - 4, TIME_IMMEDIATE);
 8005678:	f7ff fc92 	bl	8004fa0 <chPipeReadTimeout.constprop.0>
    test_assert(n == PIPE_SIZE - 4, "wrong size");
 800567c:	f1a0 030c 	sub.w	r3, r0, #12
 8005680:	4258      	negs	r0, r3
 8005682:	4158      	adcs	r0, r3
 8005684:	4953      	ldr	r1, [pc, #332]	; (80057d4 <oslib_test_003_001_execute+0x3b4>)
 8005686:	f7fb f9ab 	bl	80009e0 <_test_assert>
 800568a:	2800      	cmp	r0, #0
 800568c:	f47f aefd 	bne.w	800548a <oslib_test_003_001_execute+0x6a>
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 8005690:	6822      	ldr	r2, [r4, #0]
 8005692:	68e3      	ldr	r3, [r4, #12]
 8005694:	4293      	cmp	r3, r2
 8005696:	f000 8105 	beq.w	80058a4 <oslib_test_003_001_execute+0x484>
 800569a:	494d      	ldr	r1, [pc, #308]	; (80057d0 <oslib_test_003_001_execute+0x3b0>)
 800569c:	f7fb f9a0 	bl	80009e0 <_test_assert>
 80056a0:	2800      	cmp	r0, #0
 80056a2:	f47f aef2 	bne.w	800548a <oslib_test_003_001_execute+0x6a>
    test_assert(memcmp(pipe_pattern, buf, PIPE_SIZE - 4) == 0, "content mismatch");
 80056a6:	4669      	mov	r1, sp
 80056a8:	484d      	ldr	r0, [pc, #308]	; (80057e0 <oslib_test_003_001_execute+0x3c0>)
 80056aa:	220c      	movs	r2, #12
 80056ac:	f003 fbba 	bl	8008e24 <memcmp>
 80056b0:	fab0 f080 	clz	r0, r0
 80056b4:	4949      	ldr	r1, [pc, #292]	; (80057dc <oslib_test_003_001_execute+0x3bc>)
 80056b6:	0940      	lsrs	r0, r0, #5
 80056b8:	f7fb f992 	bl	80009e0 <_test_assert>
 80056bc:	2800      	cmp	r0, #0
 80056be:	f47f aee4 	bne.w	800548a <oslib_test_003_001_execute+0x6a>
  test_set_step(11);
 80056c2:	230b      	movs	r3, #11
    n = chPipeWriteTimeout(&pipe1, pipe_pattern, 5, TIME_IMMEDIATE);
 80056c4:	2005      	movs	r0, #5
  test_set_step(11);
 80056c6:	6033      	str	r3, [r6, #0]
    n = chPipeWriteTimeout(&pipe1, pipe_pattern, 5, TIME_IMMEDIATE);
 80056c8:	f7ff fbf2 	bl	8004eb0 <chPipeWriteTimeout.constprop.0>
    test_assert(n == 5, "wrong size");
 80056cc:	f1a0 0e05 	sub.w	lr, r0, #5
 80056d0:	f1de 0000 	rsbs	r0, lr, #0
 80056d4:	eb40 000e 	adc.w	r0, r0, lr
 80056d8:	493e      	ldr	r1, [pc, #248]	; (80057d4 <oslib_test_003_001_execute+0x3b4>)
 80056da:	f7fb f981 	bl	80009e0 <_test_assert>
 80056de:	2800      	cmp	r0, #0
 80056e0:	f47f aed3 	bne.w	800548a <oslib_test_003_001_execute+0x6a>
    test_assert((pipe1.rdptr != pipe1.wrptr) &&
 80056e4:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d003      	beq.n	80056f4 <oslib_test_003_001_execute+0x2d4>
 80056ec:	6822      	ldr	r2, [r4, #0]
 80056ee:	4293      	cmp	r3, r2
 80056f0:	f000 80e1 	beq.w	80058b6 <oslib_test_003_001_execute+0x496>
 80056f4:	4936      	ldr	r1, [pc, #216]	; (80057d0 <oslib_test_003_001_execute+0x3b0>)
 80056f6:	f7fb f973 	bl	80009e0 <_test_assert>
 80056fa:	2800      	cmp	r0, #0
 80056fc:	f47f aec5 	bne.w	800548a <oslib_test_003_001_execute+0x6a>
  test_set_step(12);
 8005700:	230c      	movs	r3, #12
    n = chPipeReadTimeout(&pipe1, buf, 5, TIME_IMMEDIATE);
 8005702:	2105      	movs	r1, #5
 8005704:	4668      	mov	r0, sp
  test_set_step(12);
 8005706:	6033      	str	r3, [r6, #0]
    n = chPipeReadTimeout(&pipe1, buf, 5, TIME_IMMEDIATE);
 8005708:	f7ff fc4a 	bl	8004fa0 <chPipeReadTimeout.constprop.0>
    test_assert(n == 5, "wrong size");
 800570c:	1f45      	subs	r5, r0, #5
 800570e:	4268      	negs	r0, r5
 8005710:	4168      	adcs	r0, r5
 8005712:	4930      	ldr	r1, [pc, #192]	; (80057d4 <oslib_test_003_001_execute+0x3b4>)
 8005714:	f7fb f964 	bl	80009e0 <_test_assert>
 8005718:	2800      	cmp	r0, #0
 800571a:	f47f aeb6 	bne.w	800548a <oslib_test_003_001_execute+0x6a>
    test_assert((pipe1.rdptr == pipe1.wrptr) &&
 800571e:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 8005722:	4293      	cmp	r3, r2
 8005724:	f000 80e8 	beq.w	80058f8 <oslib_test_003_001_execute+0x4d8>
 8005728:	4929      	ldr	r1, [pc, #164]	; (80057d0 <oslib_test_003_001_execute+0x3b0>)
 800572a:	f7fb f959 	bl	80009e0 <_test_assert>
 800572e:	2800      	cmp	r0, #0
 8005730:	f47f aeab 	bne.w	800548a <oslib_test_003_001_execute+0x6a>
    test_assert(memcmp(pipe_pattern, buf, 5) == 0, "content mismatch");
 8005734:	4669      	mov	r1, sp
 8005736:	482a      	ldr	r0, [pc, #168]	; (80057e0 <oslib_test_003_001_execute+0x3c0>)
 8005738:	2205      	movs	r2, #5
 800573a:	f003 fb73 	bl	8008e24 <memcmp>
 800573e:	fab0 f080 	clz	r0, r0
 8005742:	4926      	ldr	r1, [pc, #152]	; (80057dc <oslib_test_003_001_execute+0x3bc>)
 8005744:	0940      	lsrs	r0, r0, #5
 8005746:	f7fb f94b 	bl	80009e0 <_test_assert>
 800574a:	2800      	cmp	r0, #0
 800574c:	f47f ae9d 	bne.w	800548a <oslib_test_003_001_execute+0x6a>
  test_set_step(13);
 8005750:	230d      	movs	r3, #13
    n = chPipeWriteTimeout(&pipe1, pipe_pattern, PIPE_SIZE, TIME_IMMEDIATE);
 8005752:	2010      	movs	r0, #16
  test_set_step(13);
 8005754:	6033      	str	r3, [r6, #0]
    n = chPipeWriteTimeout(&pipe1, pipe_pattern, PIPE_SIZE, TIME_IMMEDIATE);
 8005756:	f7ff fbab 	bl	8004eb0 <chPipeWriteTimeout.constprop.0>
    test_assert(n == PIPE_SIZE, "wrong size");
 800575a:	f1a0 0110 	sub.w	r1, r0, #16
 800575e:	4248      	negs	r0, r1
 8005760:	4148      	adcs	r0, r1
 8005762:	491c      	ldr	r1, [pc, #112]	; (80057d4 <oslib_test_003_001_execute+0x3b4>)
 8005764:	f7fb f93c 	bl	80009e0 <_test_assert>
 8005768:	2800      	cmp	r0, #0
 800576a:	f47f ae8e 	bne.w	800548a <oslib_test_003_001_execute+0x6a>
    test_assert((pipe1.rdptr == pipe1.wrptr) &&
 800576e:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 8005772:	4293      	cmp	r3, r2
 8005774:	f000 80b6 	beq.w	80058e4 <oslib_test_003_001_execute+0x4c4>
 8005778:	4915      	ldr	r1, [pc, #84]	; (80057d0 <oslib_test_003_001_execute+0x3b0>)
 800577a:	f7fb f931 	bl	80009e0 <_test_assert>
 800577e:	2800      	cmp	r0, #0
 8005780:	f47f ae83 	bne.w	800548a <oslib_test_003_001_execute+0x6a>
  test_set_step(14);
 8005784:	230e      	movs	r3, #14
    n = chPipeReadTimeout(&pipe1, buf, PIPE_SIZE, TIME_IMMEDIATE);
 8005786:	2110      	movs	r1, #16
 8005788:	4668      	mov	r0, sp
  test_set_step(14);
 800578a:	6033      	str	r3, [r6, #0]
    n = chPipeReadTimeout(&pipe1, buf, PIPE_SIZE, TIME_IMMEDIATE);
 800578c:	f7ff fc08 	bl	8004fa0 <chPipeReadTimeout.constprop.0>
    test_assert(n == PIPE_SIZE, "wrong size");
 8005790:	f1a0 0310 	sub.w	r3, r0, #16
 8005794:	4258      	negs	r0, r3
 8005796:	4158      	adcs	r0, r3
 8005798:	490e      	ldr	r1, [pc, #56]	; (80057d4 <oslib_test_003_001_execute+0x3b4>)
 800579a:	f7fb f921 	bl	80009e0 <_test_assert>
 800579e:	2800      	cmp	r0, #0
 80057a0:	f47f ae73 	bne.w	800548a <oslib_test_003_001_execute+0x6a>
    test_assert((pipe1.rdptr == pipe1.wrptr) &&
 80057a4:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 80057a8:	4293      	cmp	r3, r2
 80057aa:	f000 808c 	beq.w	80058c6 <oslib_test_003_001_execute+0x4a6>
 80057ae:	4908      	ldr	r1, [pc, #32]	; (80057d0 <oslib_test_003_001_execute+0x3b0>)
 80057b0:	f7fb f916 	bl	80009e0 <_test_assert>
 80057b4:	2800      	cmp	r0, #0
 80057b6:	f47f ae68 	bne.w	800548a <oslib_test_003_001_execute+0x6a>
    test_assert(memcmp(pipe_pattern, buf, PIPE_SIZE) == 0, "content mismatch");
 80057ba:	4669      	mov	r1, sp
 80057bc:	2210      	movs	r2, #16
 80057be:	4808      	ldr	r0, [pc, #32]	; (80057e0 <oslib_test_003_001_execute+0x3c0>)
 80057c0:	f003 fb30 	bl	8008e24 <memcmp>
 80057c4:	fab0 f080 	clz	r0, r0
 80057c8:	e00c      	b.n	80057e4 <oslib_test_003_001_execute+0x3c4>
 80057ca:	bf00      	nop
 80057cc:	0800a0c8 	.word	0x0800a0c8
 80057d0:	0800a084 	.word	0x0800a084
 80057d4:	08009fb8 	.word	0x08009fb8
 80057d8:	33323130 	.word	0x33323130
 80057dc:	0800a0d4 	.word	0x0800a0d4
 80057e0:	0800b150 	.word	0x0800b150
 80057e4:	4949      	ldr	r1, [pc, #292]	; (800590c <oslib_test_003_001_execute+0x4ec>)
 80057e6:	0940      	lsrs	r0, r0, #5
 80057e8:	f7fb f8fa 	bl	80009e0 <_test_assert>
  test_end_step(14);
 80057ec:	e64d      	b.n	800548a <oslib_test_003_001_execute+0x6a>
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 80057ee:	68a2      	ldr	r2, [r4, #8]
 80057f0:	4293      	cmp	r3, r2
 80057f2:	f47f ae6f 	bne.w	80054d4 <oslib_test_003_001_execute+0xb4>
 80057f6:	6920      	ldr	r0, [r4, #16]
 80057f8:	fab0 f080 	clz	r0, r0
 80057fc:	0940      	lsrs	r0, r0, #5
 80057fe:	e669      	b.n	80054d4 <oslib_test_003_001_execute+0xb4>
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 8005800:	68a2      	ldr	r2, [r4, #8]
 8005802:	4293      	cmp	r3, r2
 8005804:	f47f ae8b 	bne.w	800551e <oslib_test_003_001_execute+0xfe>
 8005808:	6920      	ldr	r0, [r4, #16]
 800580a:	fab0 f080 	clz	r0, r0
 800580e:	0940      	lsrs	r0, r0, #5
 8005810:	e685      	b.n	800551e <oslib_test_003_001_execute+0xfe>
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 8005812:	68a2      	ldr	r2, [r4, #8]
 8005814:	4293      	cmp	r3, r2
 8005816:	f47f ae75 	bne.w	8005504 <oslib_test_003_001_execute+0xe4>
 800581a:	6920      	ldr	r0, [r4, #16]
 800581c:	fab0 f080 	clz	r0, r0
 8005820:	0940      	lsrs	r0, r0, #5
 8005822:	e66f      	b.n	8005504 <oslib_test_003_001_execute+0xe4>
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 8005824:	68a2      	ldr	r2, [r4, #8]
 8005826:	4293      	cmp	r3, r2
 8005828:	f47f ae92 	bne.w	8005550 <oslib_test_003_001_execute+0x130>
 800582c:	6920      	ldr	r0, [r4, #16]
 800582e:	f1a0 0010 	sub.w	r0, r0, #16
 8005832:	fab0 f080 	clz	r0, r0
 8005836:	0940      	lsrs	r0, r0, #5
 8005838:	e68a      	b.n	8005550 <oslib_test_003_001_execute+0x130>
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 800583a:	68a2      	ldr	r2, [r4, #8]
 800583c:	4293      	cmp	r3, r2
 800583e:	f47f aea1 	bne.w	8005584 <oslib_test_003_001_execute+0x164>
 8005842:	6920      	ldr	r0, [r4, #16]
 8005844:	fab0 f080 	clz	r0, r0
 8005848:	0940      	lsrs	r0, r0, #5
 800584a:	e69b      	b.n	8005584 <oslib_test_003_001_execute+0x164>
    test_assert(memcmp(pipe_pattern, buf, PIPE_SIZE) == 0, "content mismatch");
 800584c:	9a01      	ldr	r2, [sp, #4]
 800584e:	f103 3304 	add.w	r3, r3, #67372036	; 0x4040404
 8005852:	429a      	cmp	r2, r3
 8005854:	f47f aea1 	bne.w	800559a <oslib_test_003_001_execute+0x17a>
 8005858:	f103 6330 	add.w	r3, r3, #184549376	; 0xb000000
 800585c:	9a02      	ldr	r2, [sp, #8]
 800585e:	f503 2330 	add.w	r3, r3, #720896	; 0xb0000
 8005862:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005866:	429a      	cmp	r2, r3
 8005868:	f47f ae97 	bne.w	800559a <oslib_test_003_001_execute+0x17a>
 800586c:	f103 6380 	add.w	r3, r3, #67108864	; 0x4000000
 8005870:	9a03      	ldr	r2, [sp, #12]
 8005872:	f503 2381 	add.w	r3, r3, #264192	; 0x40800
 8005876:	f203 330b 	addw	r3, r3, #779	; 0x30b
 800587a:	429a      	cmp	r2, r3
 800587c:	f47f ae8d 	bne.w	800559a <oslib_test_003_001_execute+0x17a>
 8005880:	e68c      	b.n	800559c <oslib_test_003_001_execute+0x17c>
    test_assert((pipe1.rdptr != pipe1.wrptr) &&
 8005882:	6920      	ldr	r0, [r4, #16]
 8005884:	1f03      	subs	r3, r0, #4
 8005886:	4258      	negs	r0, r3
 8005888:	4158      	adcs	r0, r3
 800588a:	e6a7      	b.n	80055dc <oslib_test_003_001_execute+0x1bc>
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 800588c:	68a2      	ldr	r2, [r4, #8]
 800588e:	4293      	cmp	r3, r2
 8005890:	f47f aec0 	bne.w	8005614 <oslib_test_003_001_execute+0x1f4>
 8005894:	6920      	ldr	r0, [r4, #16]
 8005896:	f1a0 0c10 	sub.w	ip, r0, #16
 800589a:	f1dc 0000 	rsbs	r0, ip, #0
 800589e:	eb40 000c 	adc.w	r0, r0, ip
 80058a2:	e6b7      	b.n	8005614 <oslib_test_003_001_execute+0x1f4>
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 80058a4:	68a2      	ldr	r2, [r4, #8]
 80058a6:	4293      	cmp	r3, r2
 80058a8:	f47f aef7 	bne.w	800569a <oslib_test_003_001_execute+0x27a>
 80058ac:	6920      	ldr	r0, [r4, #16]
 80058ae:	fab0 f080 	clz	r0, r0
 80058b2:	0940      	lsrs	r0, r0, #5
 80058b4:	e6f1      	b.n	800569a <oslib_test_003_001_execute+0x27a>
    test_assert((pipe1.rdptr != pipe1.wrptr) &&
 80058b6:	6920      	ldr	r0, [r4, #16]
 80058b8:	f1a0 0c05 	sub.w	ip, r0, #5
 80058bc:	f1dc 0000 	rsbs	r0, ip, #0
 80058c0:	eb40 000c 	adc.w	r0, r0, ip
 80058c4:	e716      	b.n	80056f4 <oslib_test_003_001_execute+0x2d4>
    test_assert((pipe1.rdptr == pipe1.wrptr) &&
 80058c6:	6822      	ldr	r2, [r4, #0]
 80058c8:	4293      	cmp	r3, r2
 80058ca:	f43f af70 	beq.w	80057ae <oslib_test_003_001_execute+0x38e>
 80058ce:	6920      	ldr	r0, [r4, #16]
 80058d0:	fab0 f080 	clz	r0, r0
 80058d4:	0940      	lsrs	r0, r0, #5
 80058d6:	e76a      	b.n	80057ae <oslib_test_003_001_execute+0x38e>
    test_assert((pipe1.rdptr != pipe1.buffer) &&
 80058d8:	6920      	ldr	r0, [r4, #16]
 80058da:	f1a0 010c 	sub.w	r1, r0, #12
 80058de:	4248      	negs	r0, r1
 80058e0:	4148      	adcs	r0, r1
 80058e2:	e6b4      	b.n	800564e <oslib_test_003_001_execute+0x22e>
    test_assert((pipe1.rdptr == pipe1.wrptr) &&
 80058e4:	6822      	ldr	r2, [r4, #0]
 80058e6:	4293      	cmp	r3, r2
 80058e8:	f43f af46 	beq.w	8005778 <oslib_test_003_001_execute+0x358>
 80058ec:	6920      	ldr	r0, [r4, #16]
 80058ee:	f1a0 0210 	sub.w	r2, r0, #16
 80058f2:	4250      	negs	r0, r2
 80058f4:	4150      	adcs	r0, r2
 80058f6:	e73f      	b.n	8005778 <oslib_test_003_001_execute+0x358>
    test_assert((pipe1.rdptr == pipe1.wrptr) &&
 80058f8:	6822      	ldr	r2, [r4, #0]
 80058fa:	4293      	cmp	r3, r2
 80058fc:	f43f af14 	beq.w	8005728 <oslib_test_003_001_execute+0x308>
 8005900:	6920      	ldr	r0, [r4, #16]
 8005902:	fab0 f080 	clz	r0, r0
 8005906:	0940      	lsrs	r0, r0, #5
 8005908:	e70e      	b.n	8005728 <oslib_test_003_001_execute+0x308>
 800590a:	bf00      	nop
 800590c:	0800a0d4 	.word	0x0800a0d4

08005910 <rt_test_011_011_execute>:
static void rt_test_011_011_execute(void) {
 8005910:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  test_set_step(1);
 8005914:	f8df 8080 	ldr.w	r8, [pc, #128]	; 8005998 <rt_test_011_011_execute+0x88>
      chMtxLock(&mtx1);
 8005918:	4c1c      	ldr	r4, [pc, #112]	; (800598c <rt_test_011_011_execute+0x7c>)
  test_set_step(1);
 800591a:	2301      	movs	r3, #1
 800591c:	f8c8 3000 	str.w	r3, [r8]
    start = test_wait_tick();
 8005920:	f7fd fac6 	bl	8002eb0 <test_wait_tick>
    n = 0;
 8005924:	2500      	movs	r5, #0
    start = test_wait_tick();
 8005926:	4606      	mov	r6, r0
 8005928:	f04f 4980 	mov.w	r9, #1073741824	; 0x40000000
    } while (chVTIsSystemTimeWithinX(start, end));
 800592c:	f242 770f 	movw	r7, #9999	; 0x270f
      chMtxLock(&mtx1);
 8005930:	4620      	mov	r0, r4
 8005932:	f7fd fc25 	bl	8003180 <chMtxLock>
      chMtxUnlock(&mtx1);
 8005936:	4620      	mov	r0, r4
 8005938:	f7ff f9b2 	bl	8004ca0 <chMtxUnlock>
      chMtxLock(&mtx1);
 800593c:	4620      	mov	r0, r4
 800593e:	f7fd fc1f 	bl	8003180 <chMtxLock>
      chMtxUnlock(&mtx1);
 8005942:	4620      	mov	r0, r4
 8005944:	f7ff f9ac 	bl	8004ca0 <chMtxUnlock>
      chMtxLock(&mtx1);
 8005948:	4620      	mov	r0, r4
 800594a:	f7fd fc19 	bl	8003180 <chMtxLock>
      chMtxUnlock(&mtx1);
 800594e:	4620      	mov	r0, r4
 8005950:	f7ff f9a6 	bl	8004ca0 <chMtxUnlock>
      chMtxLock(&mtx1);
 8005954:	4620      	mov	r0, r4
 8005956:	f7fd fc13 	bl	8003180 <chMtxLock>
      chMtxUnlock(&mtx1);
 800595a:	4620      	mov	r0, r4
 800595c:	f7ff f9a0 	bl	8004ca0 <chMtxUnlock>
 8005960:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
 8005964:	1b9b      	subs	r3, r3, r6
    } while (chVTIsSystemTimeWithinX(start, end));
 8005966:	42bb      	cmp	r3, r7
      n++;
 8005968:	f105 0501 	add.w	r5, r5, #1
    } while (chVTIsSystemTimeWithinX(start, end));
 800596c:	d9e0      	bls.n	8005930 <rt_test_011_011_execute+0x20>
  test_set_step(2);
 800596e:	2302      	movs	r3, #2
    test_print("--- Score : ");
 8005970:	4807      	ldr	r0, [pc, #28]	; (8005990 <rt_test_011_011_execute+0x80>)
  test_set_step(2);
 8005972:	f8c8 3000 	str.w	r3, [r8]
    test_print("--- Score : ");
 8005976:	f7fb f99b 	bl	8000cb0 <test_print>
    test_printn(n * 4);
 800597a:	00a8      	lsls	r0, r5, #2
 800597c:	f7fb f8c8 	bl	8000b10 <test_printn>
}
 8005980:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    test_println(" lock+unlock/S");
 8005984:	4803      	ldr	r0, [pc, #12]	; (8005994 <rt_test_011_011_execute+0x84>)
 8005986:	f7fb b973 	b.w	8000c70 <test_println>
 800598a:	bf00      	nop
 800598c:	20000c60 	.word	0x20000c60
 8005990:	08009e84 	.word	0x08009e84
 8005994:	0800a0e8 	.word	0x0800a0e8
 8005998:	2000149c 	.word	0x2000149c
 800599c:	00000000 	.word	0x00000000

080059a0 <thread8>:
static THD_FUNCTION(thread8, p) {
 80059a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059a2:	4604      	mov	r4, r0
  chMtxLock(&m2);
 80059a4:	481b      	ldr	r0, [pc, #108]	; (8005a14 <thread8+0x74>)
 80059a6:	f7fd fbeb 	bl	8003180 <chMtxLock>
  chMtxLock(&m1);
 80059aa:	481b      	ldr	r0, [pc, #108]	; (8005a18 <thread8+0x78>)
 80059ac:	f7fd fbe8 	bl	8003180 <chMtxLock>
 80059b0:	2320      	movs	r3, #32
 80059b2:	f383 8811 	msr	BASEPRI, r3
  return ch.rlist.current;
 80059b6:	4d19      	ldr	r5, [pc, #100]	; (8005a1c <thread8+0x7c>)
 *
 * @xclass
 */
static inline mutex_t *chMtxGetNextMutexX(void) {

  return chThdGetSelfX()->mtxlist;
 80059b8:	69ab      	ldr	r3, [r5, #24]
 80059ba:	6b9e      	ldr	r6, [r3, #56]	; 0x38
  chDbgCheckClassS();
  chDbgCheck((cp != NULL) && (timeout != TIME_IMMEDIATE));
  chDbgAssert(mp != NULL, "not owning a mutex");

  /* Releasing "current" mutex.*/
  chMtxUnlockS(mp);
 80059bc:	4630      	mov	r0, r6
 80059be:	f7fb fd1f 	bl	8001400 <chMtxUnlockS>

  /* Start waiting on the condition variable, on exit the mutex is taken
     again.*/
  currp->u.wtobjp = cp;
 80059c2:	4b17      	ldr	r3, [pc, #92]	; (8005a20 <thread8+0x80>)
 80059c4:	69aa      	ldr	r2, [r5, #24]
  thread_t *cp = (thread_t *)tqp;
 80059c6:	4619      	mov	r1, r3
 80059c8:	6253      	str	r3, [r2, #36]	; 0x24
 80059ca:	e003      	b.n	80059d4 <thread8+0x34>
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 80059cc:	689f      	ldr	r7, [r3, #8]
 80059ce:	6890      	ldr	r0, [r2, #8]
 80059d0:	4287      	cmp	r7, r0
 80059d2:	d302      	bcc.n	80059da <thread8+0x3a>
    cp = cp->queue.next;
 80059d4:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 80059d6:	428b      	cmp	r3, r1
 80059d8:	d1f8      	bne.n	80059cc <thread8+0x2c>
  tp->queue.prev             = cp->queue.prev;
 80059da:	6859      	ldr	r1, [r3, #4]
    chSchGoSleepS(newstate);
 80059dc:	2007      	movs	r0, #7
 80059de:	e9c2 3100 	strd	r3, r1, [r2]
  tp->queue.prev->queue.next = tp;
 80059e2:	600a      	str	r2, [r1, #0]
  cp->queue.prev             = tp;
 80059e4:	605a      	str	r2, [r3, #4]
 80059e6:	f7fc fc23 	bl	8002230 <chSchGoSleepS>
  return currp->u.rdymsg;
 80059ea:	69ab      	ldr	r3, [r5, #24]
  queue_prio_insert(currp, &cp->queue);
  msg = chSchGoSleepTimeoutS(CH_STATE_WTCOND, timeout);
  if (msg != MSG_TIMEOUT) {
 80059ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ee:	3301      	adds	r3, #1
 80059f0:	d002      	beq.n	80059f8 <thread8+0x58>
    chMtxLockS(mp);
 80059f2:	4630      	mov	r0, r6
 80059f4:	f7fd fb64 	bl	80030c0 <chMtxLockS>
 80059f8:	2300      	movs	r3, #0
 80059fa:	f383 8811 	msr	BASEPRI, r3
  test_emit_token(*(char *)p);
 80059fe:	7820      	ldrb	r0, [r4, #0]
 8005a00:	f7fb f896 	bl	8000b30 <test_emit_token>
  chMtxUnlock(&m1);
 8005a04:	4804      	ldr	r0, [pc, #16]	; (8005a18 <thread8+0x78>)
 8005a06:	f7ff f94b 	bl	8004ca0 <chMtxUnlock>
}
 8005a0a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  chMtxUnlock(&m2);
 8005a0e:	4801      	ldr	r0, [pc, #4]	; (8005a14 <thread8+0x74>)
 8005a10:	f7ff b946 	b.w	8004ca0 <chMtxUnlock>
 8005a14:	2000083c 	.word	0x2000083c
 8005a18:	2000082c 	.word	0x2000082c
 8005a1c:	200009b0 	.word	0x200009b0
 8005a20:	20000800 	.word	0x20000800
	...

08005a30 <thread6>:
static THD_FUNCTION(thread6, p) {
 8005a30:	b570      	push	{r4, r5, r6, lr}
 8005a32:	4605      	mov	r5, r0
  chMtxLock(&m1);
 8005a34:	4816      	ldr	r0, [pc, #88]	; (8005a90 <thread6+0x60>)
 8005a36:	f7fd fba3 	bl	8003180 <chMtxLock>
 8005a3a:	2320      	movs	r3, #32
 8005a3c:	f383 8811 	msr	BASEPRI, r3
  thread_t *ctp = currp;
 8005a40:	4b14      	ldr	r3, [pc, #80]	; (8005a94 <thread6+0x64>)
 8005a42:	699c      	ldr	r4, [r3, #24]
 8005a44:	6ba6      	ldr	r6, [r4, #56]	; 0x38
  chMtxUnlockS(mp);
 8005a46:	4630      	mov	r0, r6
 8005a48:	f7fb fcda 	bl	8001400 <chMtxUnlockS>
  ctp->u.wtobjp = cp;
 8005a4c:	4a12      	ldr	r2, [pc, #72]	; (8005a98 <thread6+0x68>)
 8005a4e:	6262      	str	r2, [r4, #36]	; 0x24
  thread_t *cp = (thread_t *)tqp;
 8005a50:	4613      	mov	r3, r2
 8005a52:	e003      	b.n	8005a5c <thread6+0x2c>
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 8005a54:	6898      	ldr	r0, [r3, #8]
 8005a56:	68a1      	ldr	r1, [r4, #8]
 8005a58:	4288      	cmp	r0, r1
 8005a5a:	d302      	bcc.n	8005a62 <thread6+0x32>
    cp = cp->queue.next;
 8005a5c:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d1f8      	bne.n	8005a54 <thread6+0x24>
  tp->queue.prev             = cp->queue.prev;
 8005a62:	685a      	ldr	r2, [r3, #4]
  chSchGoSleepS(CH_STATE_WTCOND);
 8005a64:	2007      	movs	r0, #7
 8005a66:	e9c4 3200 	strd	r3, r2, [r4]
  tp->queue.prev->queue.next = tp;
 8005a6a:	6014      	str	r4, [r2, #0]
  cp->queue.prev             = tp;
 8005a6c:	605c      	str	r4, [r3, #4]
 8005a6e:	f7fc fbdf 	bl	8002230 <chSchGoSleepS>
  chMtxLockS(mp);
 8005a72:	4630      	mov	r0, r6
 8005a74:	f7fd fb24 	bl	80030c0 <chMtxLockS>
 8005a78:	2300      	movs	r3, #0
 8005a7a:	f383 8811 	msr	BASEPRI, r3
  test_emit_token(*(char *)p);
 8005a7e:	7828      	ldrb	r0, [r5, #0]
 8005a80:	f7fb f856 	bl	8000b30 <test_emit_token>
}
 8005a84:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  chMtxUnlock(&m1);
 8005a88:	4801      	ldr	r0, [pc, #4]	; (8005a90 <thread6+0x60>)
 8005a8a:	f7ff b909 	b.w	8004ca0 <chMtxUnlock>
 8005a8e:	bf00      	nop
 8005a90:	2000082c 	.word	0x2000082c
 8005a94:	200009b0 	.word	0x200009b0
 8005a98:	20000800 	.word	0x20000800
 8005a9c:	00000000 	.word	0x00000000

08005aa0 <thread9>:
static THD_FUNCTION(thread9, p) {
 8005aa0:	b538      	push	{r3, r4, r5, lr}
  chMtxLock(&m2);
 8005aa2:	4d06      	ldr	r5, [pc, #24]	; (8005abc <thread9+0x1c>)
static THD_FUNCTION(thread9, p) {
 8005aa4:	4604      	mov	r4, r0
  chMtxLock(&m2);
 8005aa6:	4628      	mov	r0, r5
 8005aa8:	f7fd fb6a 	bl	8003180 <chMtxLock>
  test_emit_token(*(char *)p);
 8005aac:	7820      	ldrb	r0, [r4, #0]
 8005aae:	f7fb f83f 	bl	8000b30 <test_emit_token>
  chMtxUnlock(&m2);
 8005ab2:	4628      	mov	r0, r5
}
 8005ab4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  chMtxUnlock(&m2);
 8005ab8:	f7ff b8f2 	b.w	8004ca0 <chMtxUnlock>
 8005abc:	2000083c 	.word	0x2000083c

08005ac0 <rt_test_007_005_execute>:
static void rt_test_007_005_execute(void) {
 8005ac0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ac4:	4d4f      	ldr	r5, [pc, #316]	; (8005c04 <rt_test_007_005_execute+0x144>)
  test_set_step(2);
 8005ac6:	4c50      	ldr	r4, [pc, #320]	; (8005c08 <rt_test_007_005_execute+0x148>)
  return chThdGetSelfX()->prio;
 8005ac8:	69aa      	ldr	r2, [r5, #24]
 8005aca:	2302      	movs	r3, #2
 8005acc:	6896      	ldr	r6, [r2, #8]
 8005ace:	6023      	str	r3, [r4, #0]
    b = chMtxTryLock(&m1);
 8005ad0:	f7fa fcee 	bl	80004b0 <chMtxTryLock.constprop.0>
    test_assert(b, "already locked");
 8005ad4:	494d      	ldr	r1, [pc, #308]	; (8005c0c <rt_test_007_005_execute+0x14c>)
 8005ad6:	f7fa ff83 	bl	80009e0 <_test_assert>
 8005ada:	b108      	cbz	r0, 8005ae0 <rt_test_007_005_execute+0x20>
}
 8005adc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  test_set_step(3);
 8005ae0:	2303      	movs	r3, #3
 8005ae2:	6023      	str	r3, [r4, #0]
    b = chMtxTryLock(&m1);
 8005ae4:	f7fa fce4 	bl	80004b0 <chMtxTryLock.constprop.0>
    test_assert(!b, "not locked");
 8005ae8:	f080 0001 	eor.w	r0, r0, #1
 8005aec:	4948      	ldr	r1, [pc, #288]	; (8005c10 <rt_test_007_005_execute+0x150>)
 8005aee:	b2c0      	uxtb	r0, r0
 8005af0:	f7fa ff76 	bl	80009e0 <_test_assert>
 8005af4:	2800      	cmp	r0, #0
 8005af6:	d1f1      	bne.n	8005adc <rt_test_007_005_execute+0x1c>
    chMtxUnlock(&m1);
 8005af8:	4f46      	ldr	r7, [pc, #280]	; (8005c14 <rt_test_007_005_execute+0x154>)
  test_set_step(4);
 8005afa:	2304      	movs	r3, #4
    chMtxUnlock(&m1);
 8005afc:	4638      	mov	r0, r7
  test_set_step(4);
 8005afe:	6023      	str	r3, [r4, #0]
    chMtxUnlock(&m1);
 8005b00:	f7ff f8ce 	bl	8004ca0 <chMtxUnlock>
    test_assert(m1.owner == NULL, "still owned");
 8005b04:	68b8      	ldr	r0, [r7, #8]
 8005b06:	4944      	ldr	r1, [pc, #272]	; (8005c18 <rt_test_007_005_execute+0x158>)
 8005b08:	fab0 f080 	clz	r0, r0
 8005b0c:	0940      	lsrs	r0, r0, #5
 8005b0e:	f7fa ff67 	bl	80009e0 <_test_assert>
 8005b12:	2800      	cmp	r0, #0
 8005b14:	d1e2      	bne.n	8005adc <rt_test_007_005_execute+0x1c>
  return (bool)(tqp->next == (const thread_t *)tqp);
 8005b16:	6838      	ldr	r0, [r7, #0]
    test_assert(queue_isempty(&m1.queue), "queue not empty");
 8005b18:	4940      	ldr	r1, [pc, #256]	; (8005c1c <rt_test_007_005_execute+0x15c>)
 8005b1a:	1bc0      	subs	r0, r0, r7
 8005b1c:	fab0 f080 	clz	r0, r0
 8005b20:	0940      	lsrs	r0, r0, #5
 8005b22:	f7fa ff5d 	bl	80009e0 <_test_assert>
 8005b26:	2800      	cmp	r0, #0
 8005b28:	d1d8      	bne.n	8005adc <rt_test_007_005_execute+0x1c>
 8005b2a:	69ab      	ldr	r3, [r5, #24]
    test_assert(chThdGetPriorityX() == prio, "wrong priority level");
 8005b2c:	493c      	ldr	r1, [pc, #240]	; (8005c20 <rt_test_007_005_execute+0x160>)
 8005b2e:	6898      	ldr	r0, [r3, #8]
 8005b30:	1b80      	subs	r0, r0, r6
 8005b32:	fab0 f080 	clz	r0, r0
  test_set_step(5);
 8005b36:	2305      	movs	r3, #5
    test_assert(chThdGetPriorityX() == prio, "wrong priority level");
 8005b38:	0940      	lsrs	r0, r0, #5
  test_set_step(5);
 8005b3a:	6023      	str	r3, [r4, #0]
    test_assert(chThdGetPriorityX() == prio, "wrong priority level");
 8005b3c:	f7fa ff50 	bl	80009e0 <_test_assert>
 8005b40:	2800      	cmp	r0, #0
 8005b42:	d1cb      	bne.n	8005adc <rt_test_007_005_execute+0x1c>
  test_set_step(6);
 8005b44:	2306      	movs	r3, #6
 8005b46:	6023      	str	r3, [r4, #0]
    b = chMtxTryLock(&m1);
 8005b48:	f7fa fcb2 	bl	80004b0 <chMtxTryLock.constprop.0>
    test_assert(b, "already locked");
 8005b4c:	492f      	ldr	r1, [pc, #188]	; (8005c0c <rt_test_007_005_execute+0x14c>)
 8005b4e:	f7fa ff47 	bl	80009e0 <_test_assert>
 8005b52:	2800      	cmp	r0, #0
 8005b54:	d1c2      	bne.n	8005adc <rt_test_007_005_execute+0x1c>
    b = chMtxTryLock(&m1);
 8005b56:	f7fa fcab 	bl	80004b0 <chMtxTryLock.constprop.0>
    test_assert(!b, "not locked");
 8005b5a:	f080 0001 	eor.w	r0, r0, #1
 8005b5e:	492c      	ldr	r1, [pc, #176]	; (8005c10 <rt_test_007_005_execute+0x150>)
 8005b60:	b2c0      	uxtb	r0, r0
 8005b62:	f7fa ff3d 	bl	80009e0 <_test_assert>
 8005b66:	2800      	cmp	r0, #0
 8005b68:	d1b8      	bne.n	8005adc <rt_test_007_005_execute+0x1c>
 8005b6a:	2320      	movs	r3, #32
 8005b6c:	f383 8811 	msr	BASEPRI, r3
 *          inheritance mechanism.
 *
 * @sclass
 */
void chMtxUnlockAllS(void) {
  thread_t *ctp = currp;
 8005b70:	f8d5 9018 	ldr.w	r9, [r5, #24]

  if (ctp->mtxlist != NULL) {
 8005b74:	f8d9 3038 	ldr.w	r3, [r9, #56]	; 0x38
 8005b78:	b1db      	cbz	r3, 8005bb2 <rt_test_007_005_execute+0xf2>
      }
      else {
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
        mp->cnt = (cnt_t)0;
#endif
        mp->owner = NULL;
 8005b7a:	4680      	mov	r8, r0
  return (bool)(tqp->next != (const thread_t *)tqp);
 8005b7c:	681a      	ldr	r2, [r3, #0]
      ctp->mtxlist = mp->next;
 8005b7e:	68d9      	ldr	r1, [r3, #12]
 8005b80:	f8c9 1038 	str.w	r1, [r9, #56]	; 0x38
      if (chMtxQueueNotEmptyS(mp)) {
 8005b84:	4293      	cmp	r3, r2
        (void) chSchReadyI(tp);
 8005b86:	4610      	mov	r0, r2
      if (chMtxQueueNotEmptyS(mp)) {
 8005b88:	d037      	beq.n	8005bfa <rt_test_007_005_execute+0x13a>
        mp->next    = tp->mtxlist;
 8005b8a:	f8d2 c038 	ldr.w	ip, [r2, #56]	; 0x38
  tqp->next             = tp->queue.next;
 8005b8e:	6811      	ldr	r1, [r2, #0]
 8005b90:	6019      	str	r1, [r3, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 8005b92:	604b      	str	r3, [r1, #4]
 8005b94:	e9c3 2c02 	strd	r2, ip, [r3, #8]
        tp->mtxlist = mp;
 8005b98:	6393      	str	r3, [r2, #56]	; 0x38
        (void) chSchReadyI(tp);
 8005b9a:	f7fb fb39 	bl	8001210 <chSchReadyI>
 8005b9e:	f8d9 3038 	ldr.w	r3, [r9, #56]	; 0x38
      }
    } while (ctp->mtxlist != NULL);
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d1ea      	bne.n	8005b7c <rt_test_007_005_execute+0xbc>
    ctp->prio = ctp->realprio;
 8005ba6:	f8d9 303c 	ldr.w	r3, [r9, #60]	; 0x3c
 8005baa:	f8c9 3008 	str.w	r3, [r9, #8]
    chSchRescheduleS();
 8005bae:	f7fd fea7 	bl	8003900 <chSchRescheduleS>
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	f383 8811 	msr	BASEPRI, r3
    test_assert(m1.owner == NULL, "still owned");
 8005bb8:	68b8      	ldr	r0, [r7, #8]
 8005bba:	4917      	ldr	r1, [pc, #92]	; (8005c18 <rt_test_007_005_execute+0x158>)
 8005bbc:	fab0 f080 	clz	r0, r0
 8005bc0:	0940      	lsrs	r0, r0, #5
 8005bc2:	f7fa ff0d 	bl	80009e0 <_test_assert>
 8005bc6:	2800      	cmp	r0, #0
 8005bc8:	d188      	bne.n	8005adc <rt_test_007_005_execute+0x1c>
  return (bool)(tqp->next == (const thread_t *)tqp);
 8005bca:	6838      	ldr	r0, [r7, #0]
    test_assert(queue_isempty(&m1.queue), "queue not empty");
 8005bcc:	4913      	ldr	r1, [pc, #76]	; (8005c1c <rt_test_007_005_execute+0x15c>)
 8005bce:	1bc0      	subs	r0, r0, r7
 8005bd0:	fab0 f080 	clz	r0, r0
 8005bd4:	0940      	lsrs	r0, r0, #5
 8005bd6:	f7fa ff03 	bl	80009e0 <_test_assert>
 8005bda:	2800      	cmp	r0, #0
 8005bdc:	f47f af7e 	bne.w	8005adc <rt_test_007_005_execute+0x1c>
 8005be0:	69ab      	ldr	r3, [r5, #24]
    test_assert(chThdGetPriorityX() == prio, "wrong priority level");
 8005be2:	490f      	ldr	r1, [pc, #60]	; (8005c20 <rt_test_007_005_execute+0x160>)
 8005be4:	6898      	ldr	r0, [r3, #8]
 8005be6:	1b80      	subs	r0, r0, r6
  test_set_step(7);
 8005be8:	2307      	movs	r3, #7
    test_assert(chThdGetPriorityX() == prio, "wrong priority level");
 8005bea:	fab0 f080 	clz	r0, r0
  test_set_step(7);
 8005bee:	6023      	str	r3, [r4, #0]
    test_assert(chThdGetPriorityX() == prio, "wrong priority level");
 8005bf0:	0940      	lsrs	r0, r0, #5
}
 8005bf2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    test_assert(chThdGetPriorityX() == prio, "wrong priority level");
 8005bf6:	f7fa bef3 	b.w	80009e0 <_test_assert>
        mp->owner = NULL;
 8005bfa:	f8c3 8008 	str.w	r8, [r3, #8]
 8005bfe:	460b      	mov	r3, r1
 8005c00:	e7cf      	b.n	8005ba2 <rt_test_007_005_execute+0xe2>
 8005c02:	bf00      	nop
 8005c04:	200009b0 	.word	0x200009b0
 8005c08:	2000149c 	.word	0x2000149c
 8005c0c:	0800a0f8 	.word	0x0800a0f8
 8005c10:	0800a108 	.word	0x0800a108
 8005c14:	2000082c 	.word	0x2000082c
 8005c18:	0800a114 	.word	0x0800a114
 8005c1c:	08009edc 	.word	0x08009edc
 8005c20:	0800a120 	.word	0x0800a120
	...

08005c30 <rt_test_007_004_execute>:
static void rt_test_007_004_execute(void) {
 8005c30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  return ch.rlist.current;
 8005c34:	4d42      	ldr	r5, [pc, #264]	; (8005d40 <rt_test_007_004_execute+0x110>)
  test_set_step(2);
 8005c36:	4e43      	ldr	r6, [pc, #268]	; (8005d44 <rt_test_007_004_execute+0x114>)
  return chThdGetSelfX()->prio;
 8005c38:	69aa      	ldr	r2, [r5, #24]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, pa, thread4A, "A");
 8005c3a:	4b43      	ldr	r3, [pc, #268]	; (8005d48 <rt_test_007_004_execute+0x118>)
 8005c3c:	6894      	ldr	r4, [r2, #8]
 8005c3e:	4843      	ldr	r0, [pc, #268]	; (8005d4c <rt_test_007_004_execute+0x11c>)
 8005c40:	4a43      	ldr	r2, [pc, #268]	; (8005d50 <rt_test_007_004_execute+0x120>)
 8005c42:	4f44      	ldr	r7, [pc, #272]	; (8005d54 <rt_test_007_004_execute+0x124>)
    pa = p + 1;
 8005c44:	f104 0801 	add.w	r8, r4, #1
  test_set_step(2);
 8005c48:	f04f 0c02 	mov.w	ip, #2
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, pa, thread4A, "A");
 8005c4c:	4641      	mov	r1, r8
    pb = p + 2;
 8005c4e:	eb04 090c 	add.w	r9, r4, ip
  test_set_step(2);
 8005c52:	f8c6 c000 	str.w	ip, [r6]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, pa, thread4A, "A");
 8005c56:	f7fc fa03 	bl	8002060 <chThdCreateStatic.constprop.0>
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, pb, thread4B, "B");
 8005c5a:	4649      	mov	r1, r9
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, pa, thread4A, "A");
 8005c5c:	4684      	mov	ip, r0
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, pb, thread4B, "B");
 8005c5e:	4b3e      	ldr	r3, [pc, #248]	; (8005d58 <rt_test_007_004_execute+0x128>)
 8005c60:	4a3e      	ldr	r2, [pc, #248]	; (8005d5c <rt_test_007_004_execute+0x12c>)
 8005c62:	483f      	ldr	r0, [pc, #252]	; (8005d60 <rt_test_007_004_execute+0x130>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, pa, thread4A, "A");
 8005c64:	f8c7 c000 	str.w	ip, [r7]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, pb, thread4B, "B");
 8005c68:	f7fc f9fa 	bl	8002060 <chThdCreateStatic.constprop.0>
  test_set_step(3);
 8005c6c:	2303      	movs	r3, #3
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, pb, thread4B, "B");
 8005c6e:	4602      	mov	r2, r0
    chMtxLock(&m1);
 8005c70:	483c      	ldr	r0, [pc, #240]	; (8005d64 <rt_test_007_004_execute+0x134>)
  test_set_step(3);
 8005c72:	6033      	str	r3, [r6, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, pb, thread4B, "B");
 8005c74:	607a      	str	r2, [r7, #4]
    chMtxLock(&m1);
 8005c76:	f7fd fa83 	bl	8003180 <chMtxLock>
 8005c7a:	69ab      	ldr	r3, [r5, #24]
    test_assert(chThdGetPriorityX() == p, "wrong priority level");
 8005c7c:	493a      	ldr	r1, [pc, #232]	; (8005d68 <rt_test_007_004_execute+0x138>)
 8005c7e:	6898      	ldr	r0, [r3, #8]
 8005c80:	1b00      	subs	r0, r0, r4
 8005c82:	fab0 f080 	clz	r0, r0
 8005c86:	0940      	lsrs	r0, r0, #5
 8005c88:	f7fa feaa 	bl	80009e0 <_test_assert>
 8005c8c:	b108      	cbz	r0, 8005c92 <rt_test_007_004_execute+0x62>
}
 8005c8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  test_set_step(4);
 8005c92:	2304      	movs	r3, #4
    chThdSleepMilliseconds(100);
 8005c94:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  test_set_step(4);
 8005c98:	6033      	str	r3, [r6, #0]
    chThdSleepMilliseconds(100);
 8005c9a:	f7fc fe41 	bl	8002920 <chThdSleep>
 8005c9e:	69ab      	ldr	r3, [r5, #24]
    test_assert(chThdGetPriorityX() == pa, "wrong priority level");
 8005ca0:	4931      	ldr	r1, [pc, #196]	; (8005d68 <rt_test_007_004_execute+0x138>)
 8005ca2:	6898      	ldr	r0, [r3, #8]
 8005ca4:	eba0 0008 	sub.w	r0, r0, r8
 8005ca8:	fab0 f080 	clz	r0, r0
 8005cac:	0940      	lsrs	r0, r0, #5
 8005cae:	f7fa fe97 	bl	80009e0 <_test_assert>
 8005cb2:	2800      	cmp	r0, #0
 8005cb4:	d1eb      	bne.n	8005c8e <rt_test_007_004_execute+0x5e>
  test_set_step(5);
 8005cb6:	2305      	movs	r3, #5
    chMtxLock(&m2);
 8005cb8:	482c      	ldr	r0, [pc, #176]	; (8005d6c <rt_test_007_004_execute+0x13c>)
  test_set_step(5);
 8005cba:	6033      	str	r3, [r6, #0]
    chMtxLock(&m2);
 8005cbc:	f7fd fa60 	bl	8003180 <chMtxLock>
 8005cc0:	69ab      	ldr	r3, [r5, #24]
    test_assert(chThdGetPriorityX() == pa, "wrong priority level");
 8005cc2:	4929      	ldr	r1, [pc, #164]	; (8005d68 <rt_test_007_004_execute+0x138>)
 8005cc4:	6898      	ldr	r0, [r3, #8]
 8005cc6:	eba0 0008 	sub.w	r0, r0, r8
 8005cca:	fab0 f080 	clz	r0, r0
 8005cce:	0940      	lsrs	r0, r0, #5
 8005cd0:	f7fa fe86 	bl	80009e0 <_test_assert>
 8005cd4:	2800      	cmp	r0, #0
 8005cd6:	d1da      	bne.n	8005c8e <rt_test_007_004_execute+0x5e>
  test_set_step(6);
 8005cd8:	2306      	movs	r3, #6
    chThdSleepMilliseconds(100);
 8005cda:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  test_set_step(6);
 8005cde:	6033      	str	r3, [r6, #0]
    chThdSleepMilliseconds(100);
 8005ce0:	f7fc fe1e 	bl	8002920 <chThdSleep>
 8005ce4:	69ab      	ldr	r3, [r5, #24]
    test_assert(chThdGetPriorityX() == pb, "wrong priority level");
 8005ce6:	4920      	ldr	r1, [pc, #128]	; (8005d68 <rt_test_007_004_execute+0x138>)
 8005ce8:	6898      	ldr	r0, [r3, #8]
 8005cea:	eba0 0009 	sub.w	r0, r0, r9
 8005cee:	fab0 f080 	clz	r0, r0
 8005cf2:	0940      	lsrs	r0, r0, #5
 8005cf4:	f7fa fe74 	bl	80009e0 <_test_assert>
 8005cf8:	2800      	cmp	r0, #0
 8005cfa:	d1c8      	bne.n	8005c8e <rt_test_007_004_execute+0x5e>
  test_set_step(7);
 8005cfc:	2307      	movs	r3, #7
    chMtxUnlock(&m2);
 8005cfe:	481b      	ldr	r0, [pc, #108]	; (8005d6c <rt_test_007_004_execute+0x13c>)
  test_set_step(7);
 8005d00:	6033      	str	r3, [r6, #0]
    chMtxUnlock(&m2);
 8005d02:	f7fe ffcd 	bl	8004ca0 <chMtxUnlock>
 8005d06:	69ab      	ldr	r3, [r5, #24]
    test_assert(chThdGetPriorityX() == pa, "wrong priority level");
 8005d08:	4917      	ldr	r1, [pc, #92]	; (8005d68 <rt_test_007_004_execute+0x138>)
 8005d0a:	6898      	ldr	r0, [r3, #8]
 8005d0c:	eba0 0008 	sub.w	r0, r0, r8
 8005d10:	fab0 f080 	clz	r0, r0
 8005d14:	0940      	lsrs	r0, r0, #5
 8005d16:	f7fa fe63 	bl	80009e0 <_test_assert>
 8005d1a:	2800      	cmp	r0, #0
 8005d1c:	d1b7      	bne.n	8005c8e <rt_test_007_004_execute+0x5e>
  test_set_step(8);
 8005d1e:	2308      	movs	r3, #8
    chMtxUnlock(&m1);
 8005d20:	4810      	ldr	r0, [pc, #64]	; (8005d64 <rt_test_007_004_execute+0x134>)
  test_set_step(8);
 8005d22:	6033      	str	r3, [r6, #0]
    chMtxUnlock(&m1);
 8005d24:	f7fe ffbc 	bl	8004ca0 <chMtxUnlock>
 8005d28:	69ab      	ldr	r3, [r5, #24]
    test_assert(chThdGetPriorityX() == p, "wrong priority level");
 8005d2a:	490f      	ldr	r1, [pc, #60]	; (8005d68 <rt_test_007_004_execute+0x138>)
 8005d2c:	6898      	ldr	r0, [r3, #8]
 8005d2e:	1b00      	subs	r0, r0, r4
 8005d30:	fab0 f080 	clz	r0, r0
}
 8005d34:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    test_assert(chThdGetPriorityX() == p, "wrong priority level");
 8005d38:	0940      	lsrs	r0, r0, #5
 8005d3a:	f7fa be51 	b.w	80009e0 <_test_assert>
 8005d3e:	bf00      	nop
 8005d40:	200009b0 	.word	0x200009b0
 8005d44:	2000149c 	.word	0x2000149c
 8005d48:	0800a138 	.word	0x0800a138
 8005d4c:	20000d88 	.word	0x20000d88
 8005d50:	08005d71 	.word	0x08005d71
 8005d54:	200014b4 	.word	0x200014b4
 8005d58:	0800a13c 	.word	0x0800a13c
 8005d5c:	08004061 	.word	0x08004061
 8005d60:	20000ed0 	.word	0x20000ed0
 8005d64:	2000082c 	.word	0x2000082c
 8005d68:	0800a120 	.word	0x0800a120
 8005d6c:	2000083c 	.word	0x2000083c

08005d70 <thread4A>:
static THD_FUNCTION(thread4A, p) {
 8005d70:	b510      	push	{r4, lr}
  chMtxLock(&m1);
 8005d72:	4c06      	ldr	r4, [pc, #24]	; (8005d8c <thread4A+0x1c>)
  chThdSleepMilliseconds(50);
 8005d74:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005d78:	f7fc fdd2 	bl	8002920 <chThdSleep>
  chMtxLock(&m1);
 8005d7c:	4620      	mov	r0, r4
 8005d7e:	f7fd f9ff 	bl	8003180 <chMtxLock>
  chMtxUnlock(&m1);
 8005d82:	4620      	mov	r0, r4
}
 8005d84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  chMtxUnlock(&m1);
 8005d88:	f7fe bf8a 	b.w	8004ca0 <chMtxUnlock>
 8005d8c:	2000082c 	.word	0x2000082c

08005d90 <thread1.lto_priv.2>:
static THD_FUNCTION(thread1, p) {
 8005d90:	b538      	push	{r3, r4, r5, lr}
  chMtxLock(&m1);
 8005d92:	4d06      	ldr	r5, [pc, #24]	; (8005dac <thread1.lto_priv.2+0x1c>)
static THD_FUNCTION(thread1, p) {
 8005d94:	4604      	mov	r4, r0
  chMtxLock(&m1);
 8005d96:	4628      	mov	r0, r5
 8005d98:	f7fd f9f2 	bl	8003180 <chMtxLock>
  test_emit_token(*(char *)p);
 8005d9c:	7820      	ldrb	r0, [r4, #0]
 8005d9e:	f7fa fec7 	bl	8000b30 <test_emit_token>
  chMtxUnlock(&m1);
 8005da2:	4628      	mov	r0, r5
}
 8005da4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  chMtxUnlock(&m1);
 8005da8:	f7fe bf7a 	b.w	8004ca0 <chMtxUnlock>
 8005dac:	2000082c 	.word	0x2000082c

08005db0 <chFactoryReleaseSemaphore>:
void chFactoryReleaseSemaphore(dyn_semaphore_t *dsp) {
 8005db0:	b538      	push	{r3, r4, r5, lr}
  F_LOCK();
 8005db2:	4d14      	ldr	r5, [pc, #80]	; (8005e04 <chFactoryReleaseSemaphore+0x54>)
void chFactoryReleaseSemaphore(dyn_semaphore_t *dsp) {
 8005db4:	4604      	mov	r4, r0
  F_LOCK();
 8005db6:	4628      	mov	r0, r5
 8005db8:	f7fd f9e2 	bl	8003180 <chMtxLock>
  dep->refs--;
 8005dbc:	6863      	ldr	r3, [r4, #4]
 8005dbe:	3b01      	subs	r3, #1
 8005dc0:	6063      	str	r3, [r4, #4]
  if (dep->refs == (ucnt_t)0) {
 8005dc2:	b99b      	cbnz	r3, 8005dec <chFactoryReleaseSemaphore+0x3c>
  dyn_element_t *prev = (dyn_element_t *)dlp;
 8005dc4:	f105 0228 	add.w	r2, r5, #40	; 0x28
 8005dc8:	4613      	mov	r3, r2
  while (prev->next != (dyn_element_t *)dlp) {
 8005dca:	4619      	mov	r1, r3
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d011      	beq.n	8005df6 <chFactoryReleaseSemaphore+0x46>
    if (prev->next == element) {
 8005dd2:	429c      	cmp	r4, r3
 8005dd4:	d1f9      	bne.n	8005dca <chFactoryReleaseSemaphore+0x1a>
      prev->next = element->next;
 8005dd6:	6823      	ldr	r3, [r4, #0]
 8005dd8:	600b      	str	r3, [r1, #0]
 8005dda:	2320      	movs	r3, #32
 8005ddc:	f383 8811 	msr	BASEPRI, r3
  php->next = mp->next;
 8005de0:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8005de2:	6023      	str	r3, [r4, #0]
 8005de4:	2300      	movs	r3, #0
  mp->next = php;
 8005de6:	62ec      	str	r4, [r5, #44]	; 0x2c
 8005de8:	f383 8811 	msr	BASEPRI, r3
}
 8005dec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  F_UNLOCK();
 8005df0:	4804      	ldr	r0, [pc, #16]	; (8005e04 <chFactoryReleaseSemaphore+0x54>)
 8005df2:	f7fe bf55 	b.w	8004ca0 <chMtxUnlock>
 8005df6:	2320      	movs	r3, #32
 8005df8:	f383 8811 	msr	BASEPRI, r3
  php->next = mp->next;
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8005e00:	601a      	str	r2, [r3, #0]
 8005e02:	deff      	udf	#255	; 0xff
 8005e04:	20000a28 	.word	0x20000a28
	...

08005e10 <oslib_test_009_003_execute>:
      chFactoryReleaseSemaphore(dsp);
    }
  }
}

static void oslib_test_009_003_execute(void) {
 8005e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  dyn_semaphore_t *dsp;

  /* [9.3.1] Retrieving a dynamic semaphore by name, must not exist.*/
  test_set_step(1);
 8005e12:	4c43      	ldr	r4, [pc, #268]	; (8005f20 <oslib_test_009_003_execute+0x110>)
 8005e14:	2501      	movs	r5, #1
 8005e16:	6025      	str	r5, [r4, #0]
  {
    dsp = chFactoryFindSemaphore("mysem");
 8005e18:	f7ff fa02 	bl	8005220 <chFactoryFindSemaphore.constprop.0>
    test_assert(dsp == NULL, "found");
 8005e1c:	fab0 f080 	clz	r0, r0
 8005e20:	4940      	ldr	r1, [pc, #256]	; (8005f24 <oslib_test_009_003_execute+0x114>)
 8005e22:	0940      	lsrs	r0, r0, #5
 8005e24:	f7fa fddc 	bl	80009e0 <_test_assert>
 8005e28:	b100      	cbz	r0, 8005e2c <oslib_test_009_003_execute+0x1c>
  {
    dsp = chFactoryFindSemaphore("mysem");
    test_assert(dsp == NULL, "found");
  }
  test_end_step(6);
}
 8005e2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  test_set_step(2);
 8005e2c:	2302      	movs	r3, #2
 8005e2e:	6023      	str	r3, [r4, #0]
    dsp = chFactoryCreateSemaphore("mysem", 0);
 8005e30:	f7ff f9d6 	bl	80051e0 <chFactoryCreateSemaphore.constprop.0>
 8005e34:	4606      	mov	r6, r0
    test_assert(dsp != NULL, "cannot create");
 8005e36:	3800      	subs	r0, #0
 8005e38:	bf18      	it	ne
 8005e3a:	2001      	movne	r0, #1
 8005e3c:	493a      	ldr	r1, [pc, #232]	; (8005f28 <oslib_test_009_003_execute+0x118>)
 8005e3e:	f7fa fdcf 	bl	80009e0 <_test_assert>
 8005e42:	2800      	cmp	r0, #0
 8005e44:	d1f1      	bne.n	8005e2a <oslib_test_009_003_execute+0x1a>
  test_set_step(3);
 8005e46:	2303      	movs	r3, #3
 8005e48:	6023      	str	r3, [r4, #0]
    dsp1 = chFactoryCreateSemaphore("mysem", 0);
 8005e4a:	f7ff f9c9 	bl	80051e0 <chFactoryCreateSemaphore.constprop.0>
    test_assert(dsp1 == NULL, "can create");
 8005e4e:	fab0 f080 	clz	r0, r0
 8005e52:	4936      	ldr	r1, [pc, #216]	; (8005f2c <oslib_test_009_003_execute+0x11c>)
 8005e54:	0940      	lsrs	r0, r0, #5
 8005e56:	f7fa fdc3 	bl	80009e0 <_test_assert>
 8005e5a:	2800      	cmp	r0, #0
 8005e5c:	d1e5      	bne.n	8005e2a <oslib_test_009_003_execute+0x1a>
  test_set_step(4);
 8005e5e:	2304      	movs	r3, #4
 8005e60:	6023      	str	r3, [r4, #0]
    dsp1 = chFactoryFindSemaphore("mysem");
 8005e62:	f7ff f9dd 	bl	8005220 <chFactoryFindSemaphore.constprop.0>
 8005e66:	4607      	mov	r7, r0
    test_assert(dsp1 != NULL, "not found");
 8005e68:	3800      	subs	r0, #0
 8005e6a:	bf18      	it	ne
 8005e6c:	2001      	movne	r0, #1
 8005e6e:	4930      	ldr	r1, [pc, #192]	; (8005f30 <oslib_test_009_003_execute+0x120>)
 8005e70:	f7fa fdb6 	bl	80009e0 <_test_assert>
 8005e74:	2800      	cmp	r0, #0
 8005e76:	d1d8      	bne.n	8005e2a <oslib_test_009_003_execute+0x1a>
    test_assert(dsp == dsp1, "object reference mismatch");
 8005e78:	1bf0      	subs	r0, r6, r7
 8005e7a:	fab0 f080 	clz	r0, r0
 8005e7e:	492d      	ldr	r1, [pc, #180]	; (8005f34 <oslib_test_009_003_execute+0x124>)
 8005e80:	0940      	lsrs	r0, r0, #5
 8005e82:	f7fa fdad 	bl	80009e0 <_test_assert>
 8005e86:	2800      	cmp	r0, #0
 8005e88:	d1cf      	bne.n	8005e2a <oslib_test_009_003_execute+0x1a>
    test_assert(dsp1->element.refs == 2, "object reference mismatch");
 8005e8a:	6878      	ldr	r0, [r7, #4]
 8005e8c:	4929      	ldr	r1, [pc, #164]	; (8005f34 <oslib_test_009_003_execute+0x124>)
 8005e8e:	f1a0 0002 	sub.w	r0, r0, #2
 8005e92:	fab0 f080 	clz	r0, r0
 8005e96:	0940      	lsrs	r0, r0, #5
 8005e98:	f7fa fda2 	bl	80009e0 <_test_assert>
 8005e9c:	2800      	cmp	r0, #0
 8005e9e:	d1c4      	bne.n	8005e2a <oslib_test_009_003_execute+0x1a>
 *
 * @api
 */
static inline dyn_element_t *chFactoryDuplicateReference(dyn_element_t *dep) {

  dep->refs++;
 8005ea0:	687b      	ldr	r3, [r7, #4]
    test_assert(dsp1 == dsp2, "object reference mismatch");
 8005ea2:	4924      	ldr	r1, [pc, #144]	; (8005f34 <oslib_test_009_003_execute+0x124>)
 8005ea4:	442b      	add	r3, r5
 8005ea6:	4628      	mov	r0, r5
 8005ea8:	607b      	str	r3, [r7, #4]
 8005eaa:	f7fa fd99 	bl	80009e0 <_test_assert>
 8005eae:	2800      	cmp	r0, #0
 8005eb0:	d1bb      	bne.n	8005e2a <oslib_test_009_003_execute+0x1a>
    test_assert(dsp2->element.refs == 3, "object reference mismatch");
 8005eb2:	6878      	ldr	r0, [r7, #4]
 8005eb4:	491f      	ldr	r1, [pc, #124]	; (8005f34 <oslib_test_009_003_execute+0x124>)
 8005eb6:	f1a0 0003 	sub.w	r0, r0, #3
 8005eba:	fab0 f080 	clz	r0, r0
 8005ebe:	0940      	lsrs	r0, r0, #5
 8005ec0:	f7fa fd8e 	bl	80009e0 <_test_assert>
 8005ec4:	2800      	cmp	r0, #0
 8005ec6:	d1b0      	bne.n	8005e2a <oslib_test_009_003_execute+0x1a>
    chFactoryReleaseSemaphore(dsp2);
 8005ec8:	4638      	mov	r0, r7
 8005eca:	f7ff ff71 	bl	8005db0 <chFactoryReleaseSemaphore>
    test_assert(dsp1->element.refs == 2, "references mismatch");
 8005ece:	6878      	ldr	r0, [r7, #4]
 8005ed0:	4919      	ldr	r1, [pc, #100]	; (8005f38 <oslib_test_009_003_execute+0x128>)
 8005ed2:	f1a0 0002 	sub.w	r0, r0, #2
 8005ed6:	fab0 f080 	clz	r0, r0
 8005eda:	0940      	lsrs	r0, r0, #5
 8005edc:	f7fa fd80 	bl	80009e0 <_test_assert>
 8005ee0:	2800      	cmp	r0, #0
 8005ee2:	d1a2      	bne.n	8005e2a <oslib_test_009_003_execute+0x1a>
    chFactoryReleaseSemaphore(dsp1);
 8005ee4:	4638      	mov	r0, r7
 8005ee6:	f7ff ff63 	bl	8005db0 <chFactoryReleaseSemaphore>
    test_assert(dsp->element.refs == 1, "references mismatch");
 8005eea:	6870      	ldr	r0, [r6, #4]
 8005eec:	4912      	ldr	r1, [pc, #72]	; (8005f38 <oslib_test_009_003_execute+0x128>)
 8005eee:	1b40      	subs	r0, r0, r5
 8005ef0:	fab0 f080 	clz	r0, r0
 8005ef4:	0940      	lsrs	r0, r0, #5
 8005ef6:	f7fa fd73 	bl	80009e0 <_test_assert>
 8005efa:	2800      	cmp	r0, #0
 8005efc:	d195      	bne.n	8005e2a <oslib_test_009_003_execute+0x1a>
    chFactoryReleaseSemaphore(dsp);
 8005efe:	4630      	mov	r0, r6
  test_set_step(5);
 8005f00:	2305      	movs	r3, #5
 8005f02:	6023      	str	r3, [r4, #0]
    chFactoryReleaseSemaphore(dsp);
 8005f04:	f7ff ff54 	bl	8005db0 <chFactoryReleaseSemaphore>
  test_set_step(6);
 8005f08:	2306      	movs	r3, #6
 8005f0a:	6023      	str	r3, [r4, #0]
    dsp = chFactoryFindSemaphore("mysem");
 8005f0c:	f7ff f988 	bl	8005220 <chFactoryFindSemaphore.constprop.0>
    test_assert(dsp == NULL, "found");
 8005f10:	fab0 f080 	clz	r0, r0
}
 8005f14:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    test_assert(dsp == NULL, "found");
 8005f18:	4902      	ldr	r1, [pc, #8]	; (8005f24 <oslib_test_009_003_execute+0x114>)
 8005f1a:	0940      	lsrs	r0, r0, #5
 8005f1c:	f7fa bd60 	b.w	80009e0 <_test_assert>
 8005f20:	2000149c 	.word	0x2000149c
 8005f24:	0800a160 	.word	0x0800a160
 8005f28:	0800a140 	.word	0x0800a140
 8005f2c:	0800a150 	.word	0x0800a150
 8005f30:	0800a15c 	.word	0x0800a15c
 8005f34:	0800a168 	.word	0x0800a168
 8005f38:	0800a184 	.word	0x0800a184
 8005f3c:	00000000 	.word	0x00000000

08005f40 <oslib_test_009_003_teardown>:
static void oslib_test_009_003_teardown(void) {
 8005f40:	b510      	push	{r4, lr}
  dsp = chFactoryFindSemaphore("mysem");
 8005f42:	f7ff f96d 	bl	8005220 <chFactoryFindSemaphore.constprop.0>
  if (dsp != NULL) {
 8005f46:	b140      	cbz	r0, 8005f5a <oslib_test_009_003_teardown+0x1a>
    while (dsp->element.refs > 0U) {
 8005f48:	6843      	ldr	r3, [r0, #4]
 8005f4a:	4604      	mov	r4, r0
 8005f4c:	b12b      	cbz	r3, 8005f5a <oslib_test_009_003_teardown+0x1a>
      chFactoryReleaseSemaphore(dsp);
 8005f4e:	4620      	mov	r0, r4
 8005f50:	f7ff ff2e 	bl	8005db0 <chFactoryReleaseSemaphore>
    while (dsp->element.refs > 0U) {
 8005f54:	6863      	ldr	r3, [r4, #4]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d1f9      	bne.n	8005f4e <oslib_test_009_003_teardown+0xe>
}
 8005f5a:	bd10      	pop	{r4, pc}
 8005f5c:	0000      	movs	r0, r0
	...

08005f60 <chFactoryReleaseObject>:
void chFactoryReleaseObject(registered_object_t *rop) {
 8005f60:	b538      	push	{r3, r4, r5, lr}
  F_LOCK();
 8005f62:	4d14      	ldr	r5, [pc, #80]	; (8005fb4 <chFactoryReleaseObject+0x54>)
void chFactoryReleaseObject(registered_object_t *rop) {
 8005f64:	4604      	mov	r4, r0
  F_LOCK();
 8005f66:	4628      	mov	r0, r5
 8005f68:	f7fd f90a 	bl	8003180 <chMtxLock>
  dep->refs--;
 8005f6c:	6863      	ldr	r3, [r4, #4]
 8005f6e:	3b01      	subs	r3, #1
 8005f70:	6063      	str	r3, [r4, #4]
  if (dep->refs == (ucnt_t)0) {
 8005f72:	b99b      	cbnz	r3, 8005f9c <chFactoryReleaseObject+0x3c>
  dyn_element_t *prev = (dyn_element_t *)dlp;
 8005f74:	f105 0210 	add.w	r2, r5, #16
 8005f78:	4613      	mov	r3, r2
  while (prev->next != (dyn_element_t *)dlp) {
 8005f7a:	4619      	mov	r1, r3
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d011      	beq.n	8005fa6 <chFactoryReleaseObject+0x46>
    if (prev->next == element) {
 8005f82:	429c      	cmp	r4, r3
 8005f84:	d1f9      	bne.n	8005f7a <chFactoryReleaseObject+0x1a>
      prev->next = element->next;
 8005f86:	6823      	ldr	r3, [r4, #0]
 8005f88:	600b      	str	r3, [r1, #0]
 8005f8a:	2320      	movs	r3, #32
 8005f8c:	f383 8811 	msr	BASEPRI, r3
 8005f90:	696b      	ldr	r3, [r5, #20]
 8005f92:	6023      	str	r3, [r4, #0]
 8005f94:	2300      	movs	r3, #0
  mp->next = php;
 8005f96:	616c      	str	r4, [r5, #20]
 8005f98:	f383 8811 	msr	BASEPRI, r3
}
 8005f9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  F_UNLOCK();
 8005fa0:	4804      	ldr	r0, [pc, #16]	; (8005fb4 <chFactoryReleaseObject+0x54>)
 8005fa2:	f7fe be7d 	b.w	8004ca0 <chMtxUnlock>
 8005fa6:	2320      	movs	r3, #32
 8005fa8:	f383 8811 	msr	BASEPRI, r3
  php->next = mp->next;
 8005fac:	2300      	movs	r3, #0
 8005fae:	696a      	ldr	r2, [r5, #20]
 8005fb0:	601a      	str	r2, [r3, #0]
 8005fb2:	deff      	udf	#255	; 0xff
 8005fb4:	20000a28 	.word	0x20000a28
	...

08005fc0 <oslib_test_009_001_execute>:
static void oslib_test_009_001_execute(void) {
 8005fc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  test_set_step(1);
 8005fc4:	4c50      	ldr	r4, [pc, #320]	; (8006108 <oslib_test_009_001_execute+0x148>)
 8005fc6:	2501      	movs	r5, #1
 8005fc8:	6025      	str	r5, [r4, #0]
    rop = chFactoryFindObject("myobj");
 8005fca:	f7ff f8b9 	bl	8005140 <chFactoryFindObject.constprop.0>
    test_assert(rop == NULL, "found");
 8005fce:	fab0 f080 	clz	r0, r0
 8005fd2:	494e      	ldr	r1, [pc, #312]	; (800610c <oslib_test_009_001_execute+0x14c>)
 8005fd4:	0940      	lsrs	r0, r0, #5
 8005fd6:	f7fa fd03 	bl	80009e0 <_test_assert>
 8005fda:	b108      	cbz	r0, 8005fe0 <oslib_test_009_001_execute+0x20>
}
 8005fdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  test_set_step(2);
 8005fe0:	2302      	movs	r3, #2
    rop = chFactoryRegisterObject("myobj", (void *)&myobj);
 8005fe2:	484b      	ldr	r0, [pc, #300]	; (8006110 <oslib_test_009_001_execute+0x150>)
  test_set_step(2);
 8005fe4:	6023      	str	r3, [r4, #0]
    rop = chFactoryRegisterObject("myobj", (void *)&myobj);
 8005fe6:	f7ff f893 	bl	8005110 <chFactoryRegisterObject.constprop.0>
 8005fea:	4606      	mov	r6, r0
    test_assert(rop != NULL, "cannot register");
 8005fec:	3800      	subs	r0, #0
 8005fee:	bf18      	it	ne
 8005ff0:	2001      	movne	r0, #1
 8005ff2:	4948      	ldr	r1, [pc, #288]	; (8006114 <oslib_test_009_001_execute+0x154>)
 8005ff4:	f7fa fcf4 	bl	80009e0 <_test_assert>
 8005ff8:	2800      	cmp	r0, #0
 8005ffa:	d1ef      	bne.n	8005fdc <oslib_test_009_001_execute+0x1c>
  test_set_step(3);
 8005ffc:	2303      	movs	r3, #3
    rop1 = chFactoryRegisterObject("myobj", (void *)&myobj);
 8005ffe:	4846      	ldr	r0, [pc, #280]	; (8006118 <oslib_test_009_001_execute+0x158>)
  test_set_step(3);
 8006000:	6023      	str	r3, [r4, #0]
    rop1 = chFactoryRegisterObject("myobj", (void *)&myobj);
 8006002:	f7ff f885 	bl	8005110 <chFactoryRegisterObject.constprop.0>
    test_assert(rop1 == NULL, "can register");
 8006006:	fab0 f080 	clz	r0, r0
 800600a:	4944      	ldr	r1, [pc, #272]	; (800611c <oslib_test_009_001_execute+0x15c>)
 800600c:	0940      	lsrs	r0, r0, #5
 800600e:	f7fa fce7 	bl	80009e0 <_test_assert>
 8006012:	2800      	cmp	r0, #0
 8006014:	d1e2      	bne.n	8005fdc <oslib_test_009_001_execute+0x1c>
  test_set_step(4);
 8006016:	2304      	movs	r3, #4
 8006018:	6023      	str	r3, [r4, #0]
    rop1 = chFactoryFindObject("myobj");
 800601a:	f7ff f891 	bl	8005140 <chFactoryFindObject.constprop.0>
 800601e:	4607      	mov	r7, r0
    test_assert(rop1 != NULL, "not found");
 8006020:	3800      	subs	r0, #0
 8006022:	bf18      	it	ne
 8006024:	2001      	movne	r0, #1
 8006026:	493e      	ldr	r1, [pc, #248]	; (8006120 <oslib_test_009_001_execute+0x160>)
 8006028:	f7fa fcda 	bl	80009e0 <_test_assert>
 800602c:	2800      	cmp	r0, #0
 800602e:	d1d5      	bne.n	8005fdc <oslib_test_009_001_execute+0x1c>
    test_assert(*(uint32_t *)(rop1->objp) == 0x55aa, "object mismatch");
 8006030:	693b      	ldr	r3, [r7, #16]
 8006032:	493c      	ldr	r1, [pc, #240]	; (8006124 <oslib_test_009_001_execute+0x164>)
 8006034:	6818      	ldr	r0, [r3, #0]
 8006036:	f245 58aa 	movw	r8, #21930	; 0x55aa
 800603a:	eba0 0008 	sub.w	r0, r0, r8
 800603e:	fab0 f080 	clz	r0, r0
 8006042:	0940      	lsrs	r0, r0, #5
 8006044:	f7fa fccc 	bl	80009e0 <_test_assert>
 8006048:	2800      	cmp	r0, #0
 800604a:	d1c7      	bne.n	8005fdc <oslib_test_009_001_execute+0x1c>
    test_assert(rop == rop1, "object reference mismatch");
 800604c:	1bf0      	subs	r0, r6, r7
 800604e:	fab0 f080 	clz	r0, r0
 8006052:	4935      	ldr	r1, [pc, #212]	; (8006128 <oslib_test_009_001_execute+0x168>)
 8006054:	0940      	lsrs	r0, r0, #5
 8006056:	f7fa fcc3 	bl	80009e0 <_test_assert>
 800605a:	2800      	cmp	r0, #0
 800605c:	d1be      	bne.n	8005fdc <oslib_test_009_001_execute+0x1c>
    test_assert(rop1->element.refs == 2, "object reference mismatch");
 800605e:	6878      	ldr	r0, [r7, #4]
 8006060:	4931      	ldr	r1, [pc, #196]	; (8006128 <oslib_test_009_001_execute+0x168>)
 8006062:	f1a0 0002 	sub.w	r0, r0, #2
 8006066:	fab0 f080 	clz	r0, r0
 800606a:	0940      	lsrs	r0, r0, #5
 800606c:	f7fa fcb8 	bl	80009e0 <_test_assert>
 8006070:	2800      	cmp	r0, #0
 8006072:	d1b3      	bne.n	8005fdc <oslib_test_009_001_execute+0x1c>
 8006074:	687b      	ldr	r3, [r7, #4]
    test_assert(rop1 == rop2, "object reference mismatch");
 8006076:	492c      	ldr	r1, [pc, #176]	; (8006128 <oslib_test_009_001_execute+0x168>)
 8006078:	442b      	add	r3, r5
 800607a:	4628      	mov	r0, r5
 800607c:	607b      	str	r3, [r7, #4]
 800607e:	f7fa fcaf 	bl	80009e0 <_test_assert>
 8006082:	2800      	cmp	r0, #0
 8006084:	d1aa      	bne.n	8005fdc <oslib_test_009_001_execute+0x1c>
    test_assert(*(uint32_t *)(rop2->objp) == 0x55aa, "object mismatch");
 8006086:	693b      	ldr	r3, [r7, #16]
 8006088:	4926      	ldr	r1, [pc, #152]	; (8006124 <oslib_test_009_001_execute+0x164>)
 800608a:	6818      	ldr	r0, [r3, #0]
 800608c:	eba0 0008 	sub.w	r0, r0, r8
 8006090:	fab0 f080 	clz	r0, r0
 8006094:	0940      	lsrs	r0, r0, #5
 8006096:	f7fa fca3 	bl	80009e0 <_test_assert>
 800609a:	2800      	cmp	r0, #0
 800609c:	d19e      	bne.n	8005fdc <oslib_test_009_001_execute+0x1c>
    test_assert(rop2->element.refs == 3, "object reference mismatch");
 800609e:	6878      	ldr	r0, [r7, #4]
 80060a0:	4921      	ldr	r1, [pc, #132]	; (8006128 <oslib_test_009_001_execute+0x168>)
 80060a2:	f1a0 0003 	sub.w	r0, r0, #3
 80060a6:	fab0 f080 	clz	r0, r0
 80060aa:	0940      	lsrs	r0, r0, #5
 80060ac:	f7fa fc98 	bl	80009e0 <_test_assert>
 80060b0:	2800      	cmp	r0, #0
 80060b2:	d193      	bne.n	8005fdc <oslib_test_009_001_execute+0x1c>
    chFactoryReleaseObject(rop2);
 80060b4:	4638      	mov	r0, r7
 80060b6:	f7ff ff53 	bl	8005f60 <chFactoryReleaseObject>
    test_assert(rop1->element.refs == 2, "references mismatch");
 80060ba:	6878      	ldr	r0, [r7, #4]
 80060bc:	491b      	ldr	r1, [pc, #108]	; (800612c <oslib_test_009_001_execute+0x16c>)
 80060be:	1e82      	subs	r2, r0, #2
 80060c0:	4250      	negs	r0, r2
 80060c2:	4150      	adcs	r0, r2
 80060c4:	f7fa fc8c 	bl	80009e0 <_test_assert>
 80060c8:	2800      	cmp	r0, #0
 80060ca:	d187      	bne.n	8005fdc <oslib_test_009_001_execute+0x1c>
    chFactoryReleaseObject(rop1);
 80060cc:	4638      	mov	r0, r7
 80060ce:	f7ff ff47 	bl	8005f60 <chFactoryReleaseObject>
    test_assert(rop->element.refs == 1, "references mismatch");
 80060d2:	6870      	ldr	r0, [r6, #4]
 80060d4:	4915      	ldr	r1, [pc, #84]	; (800612c <oslib_test_009_001_execute+0x16c>)
 80060d6:	1b43      	subs	r3, r0, r5
 80060d8:	4258      	negs	r0, r3
 80060da:	4158      	adcs	r0, r3
 80060dc:	f7fa fc80 	bl	80009e0 <_test_assert>
 80060e0:	2800      	cmp	r0, #0
 80060e2:	f47f af7b 	bne.w	8005fdc <oslib_test_009_001_execute+0x1c>
    chFactoryReleaseObject(rop);
 80060e6:	4630      	mov	r0, r6
  test_set_step(5);
 80060e8:	2305      	movs	r3, #5
 80060ea:	6023      	str	r3, [r4, #0]
    chFactoryReleaseObject(rop);
 80060ec:	f7ff ff38 	bl	8005f60 <chFactoryReleaseObject>
  test_set_step(6);
 80060f0:	2306      	movs	r3, #6
 80060f2:	6023      	str	r3, [r4, #0]
    rop = chFactoryFindObject("myobj");
 80060f4:	f7ff f824 	bl	8005140 <chFactoryFindObject.constprop.0>
    test_assert(rop == NULL, "found");
 80060f8:	fab0 f080 	clz	r0, r0
}
 80060fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    test_assert(rop == NULL, "found");
 8006100:	4902      	ldr	r1, [pc, #8]	; (800610c <oslib_test_009_001_execute+0x14c>)
 8006102:	0940      	lsrs	r0, r0, #5
 8006104:	f7fa bc6c 	b.w	80009e0 <_test_assert>
 8006108:	2000149c 	.word	0x2000149c
 800610c:	0800a160 	.word	0x0800a160
 8006110:	20000884 	.word	0x20000884
 8006114:	0800a198 	.word	0x0800a198
 8006118:	20000888 	.word	0x20000888
 800611c:	0800a1a8 	.word	0x0800a1a8
 8006120:	0800a15c 	.word	0x0800a15c
 8006124:	0800a1b8 	.word	0x0800a1b8
 8006128:	0800a168 	.word	0x0800a168
 800612c:	0800a184 	.word	0x0800a184

08006130 <oslib_test_009_001_teardown>:
static void oslib_test_009_001_teardown(void) {
 8006130:	b510      	push	{r4, lr}
  rop = chFactoryFindObject("myobj");
 8006132:	f7ff f805 	bl	8005140 <chFactoryFindObject.constprop.0>
  if (rop != NULL) {
 8006136:	b140      	cbz	r0, 800614a <oslib_test_009_001_teardown+0x1a>
    while (rop->element.refs > 0U) {
 8006138:	6843      	ldr	r3, [r0, #4]
 800613a:	4604      	mov	r4, r0
 800613c:	b12b      	cbz	r3, 800614a <oslib_test_009_001_teardown+0x1a>
      chFactoryReleaseObject(rop);
 800613e:	4620      	mov	r0, r4
 8006140:	f7ff ff0e 	bl	8005f60 <chFactoryReleaseObject>
    while (rop->element.refs > 0U) {
 8006144:	6863      	ldr	r3, [r4, #4]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d1f9      	bne.n	800613e <oslib_test_009_001_teardown+0xe>
}
 800614a:	bd10      	pop	{r4, pc}
 800614c:	0000      	movs	r0, r0
	...

08006150 <chHeapStatus>:
 *                      free free block found space or @p NULL
 * @return              The number of fragments in the heap.
 *
 * @api
 */
size_t chHeapStatus(memory_heap_t *heapp, size_t *totalp, size_t *largestp) {
 8006150:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  heap_header_t *qp;
  size_t n, tpages, lpages;

  if (heapp == NULL) {
    heapp = &default_heap;
 8006154:	4c17      	ldr	r4, [pc, #92]	; (80061b4 <chHeapStatus+0x64>)
 8006156:	2800      	cmp	r0, #0
 8006158:	bf18      	it	ne
 800615a:	4604      	movne	r4, r0
  }

  H_LOCK(heapp);
 800615c:	f104 090c 	add.w	r9, r4, #12
 8006160:	4648      	mov	r0, r9
size_t chHeapStatus(memory_heap_t *heapp, size_t *totalp, size_t *largestp) {
 8006162:	468a      	mov	sl, r1
 8006164:	4690      	mov	r8, r2
  H_LOCK(heapp);
 8006166:	f7fd f80b 	bl	8003180 <chMtxLock>
  tpages = 0U;
  lpages = 0U;
  n = 0U;
  qp = &heapp->header;
  while (H_NEXT(qp) != NULL) {
 800616a:	6863      	ldr	r3, [r4, #4]
 800616c:	b1f3      	cbz	r3, 80061ac <chHeapStatus+0x5c>
  lpages = 0U;
 800616e:	2500      	movs	r5, #0
  tpages = 0U;
 8006170:	462e      	mov	r6, r5
  n = 0U;
 8006172:	462f      	mov	r7, r5
  while (H_NEXT(qp) != NULL) {
 8006174:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006178:	42a5      	cmp	r5, r4
    size_t pages = H_PAGES(H_NEXT(qp));

    /* Updating counters.*/
    n++;
 800617a:	f107 0701 	add.w	r7, r7, #1
    tpages += pages;
 800617e:	4426      	add	r6, r4
    if (pages > lpages) {
 8006180:	bf38      	it	cc
 8006182:	4625      	movcc	r5, r4
  while (H_NEXT(qp) != NULL) {
 8006184:	2b00      	cmp	r3, #0
 8006186:	d1f5      	bne.n	8006174 <chHeapStatus+0x24>

    qp = H_NEXT(qp);
  }

  /* Writing out fragmented free memory.*/
  if (totalp != NULL) {
 8006188:	f1ba 0f00 	cmp.w	sl, #0
 800618c:	d002      	beq.n	8006194 <chHeapStatus+0x44>
    *totalp = tpages * CH_HEAP_ALIGNMENT;
 800618e:	00f6      	lsls	r6, r6, #3
 8006190:	f8ca 6000 	str.w	r6, [sl]
  }

  /* Writing out unfragmented free memory.*/
  if (largestp != NULL) {
 8006194:	f1b8 0f00 	cmp.w	r8, #0
 8006198:	d002      	beq.n	80061a0 <chHeapStatus+0x50>
    *largestp = lpages * CH_HEAP_ALIGNMENT;
 800619a:	00ed      	lsls	r5, r5, #3
 800619c:	f8c8 5000 	str.w	r5, [r8]
  }
  H_UNLOCK(heapp);
 80061a0:	4648      	mov	r0, r9
 80061a2:	f7fe fd7d 	bl	8004ca0 <chMtxUnlock>

  return n;
}
 80061a6:	4638      	mov	r0, r7
 80061a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  lpages = 0U;
 80061ac:	461d      	mov	r5, r3
  tpages = 0U;
 80061ae:	461e      	mov	r6, r3
  n = 0U;
 80061b0:	461f      	mov	r7, r3
 80061b2:	e7e9      	b.n	8006188 <chHeapStatus+0x38>
 80061b4:	20000b50 	.word	0x20000b50
	...

080061c0 <chHeapFree>:
void chHeapFree(void *p) {
 80061c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  heapp = H_HEAP(hp);
 80061c2:	e950 5302 	ldrd	r5, r3, [r0, #-8]
  H_PAGES(hp) = MEM_ALIGN_NEXT(H_SIZE(hp),
 80061c6:	3307      	adds	r3, #7
                               CH_HEAP_ALIGNMENT) / CH_HEAP_ALIGNMENT;
 80061c8:	08db      	lsrs	r3, r3, #3
  H_LOCK(heapp);
 80061ca:	f105 070c 	add.w	r7, r5, #12
  H_PAGES(hp) = MEM_ALIGN_NEXT(H_SIZE(hp),
 80061ce:	f840 3c04 	str.w	r3, [r0, #-4]
void chHeapFree(void *p) {
 80061d2:	4606      	mov	r6, r0
  hp = (heap_header_t *)p - 1U;
 80061d4:	f1a0 0408 	sub.w	r4, r0, #8
  qp = &heapp->header;
 80061d8:	3504      	adds	r5, #4
  H_LOCK(heapp);
 80061da:	4638      	mov	r0, r7
 80061dc:	f7fc ffd0 	bl	8003180 <chMtxLock>
  qp = &heapp->header;
 80061e0:	462b      	mov	r3, r5
    if (((qp == &heapp->header) || (hp > qp)) &&
 80061e2:	42ab      	cmp	r3, r5
        ((H_NEXT(qp) == NULL) || (hp < H_NEXT(qp)))) {
 80061e4:	681a      	ldr	r2, [r3, #0]
    if (((qp == &heapp->header) || (hp > qp)) &&
 80061e6:	d001      	beq.n	80061ec <chHeapFree+0x2c>
 80061e8:	429c      	cmp	r4, r3
 80061ea:	d902      	bls.n	80061f2 <chHeapFree+0x32>
 80061ec:	b11a      	cbz	r2, 80061f6 <chHeapFree+0x36>
        ((H_NEXT(qp) == NULL) || (hp < H_NEXT(qp)))) {
 80061ee:	4294      	cmp	r4, r2
 80061f0:	d301      	bcc.n	80061f6 <chHeapFree+0x36>
    qp = H_NEXT(qp);
 80061f2:	4613      	mov	r3, r2
 80061f4:	e7f5      	b.n	80061e2 <chHeapFree+0x22>
      if (H_LIMIT(hp) == H_NEXT(hp)) {
 80061f6:	f856 1c04 	ldr.w	r1, [r6, #-4]
      H_NEXT(hp) = H_NEXT(qp);
 80061fa:	f846 2c08 	str.w	r2, [r6, #-8]
      H_NEXT(qp) = hp;
 80061fe:	601c      	str	r4, [r3, #0]
      if (H_LIMIT(hp) == H_NEXT(hp)) {
 8006200:	1c4a      	adds	r2, r1, #1
 8006202:	f856 1c08 	ldr.w	r1, [r6, #-8]
 8006206:	eb04 00c2 	add.w	r0, r4, r2, lsl #3
 800620a:	4281      	cmp	r1, r0
 800620c:	d00a      	beq.n	8006224 <chHeapFree+0x64>
      if ((H_LIMIT(qp) == hp)) {
 800620e:	6859      	ldr	r1, [r3, #4]
 8006210:	1c4a      	adds	r2, r1, #1
 8006212:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8006216:	4294      	cmp	r4, r2
 8006218:	d011      	beq.n	800623e <chHeapFree+0x7e>
  H_UNLOCK(heapp);
 800621a:	4638      	mov	r0, r7
}
 800621c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  H_UNLOCK(heapp);
 8006220:	f7fe bd3e 	b.w	8004ca0 <chMtxUnlock>
        H_NEXT(hp) = H_NEXT(H_NEXT(hp));
 8006224:	e9d1 1000 	ldrd	r1, r0, [r1]
        H_PAGES(hp) += H_PAGES(H_NEXT(hp)) + 1U;
 8006228:	4402      	add	r2, r0
 800622a:	f846 2c04 	str.w	r2, [r6, #-4]
        H_NEXT(hp) = H_NEXT(H_NEXT(hp));
 800622e:	f846 1c08 	str.w	r1, [r6, #-8]
      if ((H_LIMIT(qp) == hp)) {
 8006232:	6859      	ldr	r1, [r3, #4]
 8006234:	1c4a      	adds	r2, r1, #1
 8006236:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 800623a:	4294      	cmp	r4, r2
 800623c:	d1ed      	bne.n	800621a <chHeapFree+0x5a>
        H_NEXT(qp) = H_NEXT(hp);
 800623e:	e956 0202 	ldrd	r0, r2, [r6, #-8]
        H_PAGES(qp) += H_PAGES(hp) + 1U;
 8006242:	3201      	adds	r2, #1
 8006244:	4411      	add	r1, r2
        H_NEXT(qp) = H_NEXT(hp);
 8006246:	6018      	str	r0, [r3, #0]
        H_PAGES(qp) += H_PAGES(hp) + 1U;
 8006248:	6059      	str	r1, [r3, #4]
  H_UNLOCK(heapp);
 800624a:	4638      	mov	r0, r7
}
 800624c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  H_UNLOCK(heapp);
 8006250:	f7fe bd26 	b.w	8004ca0 <chMtxUnlock>
	...

08006260 <oslib_test_008_002_execute>:
 *   is freed using chHeapFree(), must not fail.
 * - [8.2.2] Testing allocation failure.
 * .
 */

static void oslib_test_008_002_execute(void) {
 8006260:	b570      	push	{r4, r5, r6, lr}
  void *p1;
  size_t total_size, largest_size;

  /* [8.2.1] Single block allocation using chHeapAlloc() then the block
     is freed using chHeapFree(), must not fail.*/
  test_set_step(1);
 8006262:	4e15      	ldr	r6, [pc, #84]	; (80062b8 <oslib_test_008_002_execute+0x58>)
static void oslib_test_008_002_execute(void) {
 8006264:	b082      	sub	sp, #8
  test_set_step(1);
 8006266:	2301      	movs	r3, #1
  {
    (void)chHeapStatus(NULL, &total_size, &largest_size);
 8006268:	466a      	mov	r2, sp
 800626a:	a901      	add	r1, sp, #4
 800626c:	2000      	movs	r0, #0
  test_set_step(1);
 800626e:	6033      	str	r3, [r6, #0]
    (void)chHeapStatus(NULL, &total_size, &largest_size);
 8006270:	f7ff ff6e 	bl	8006150 <chHeapStatus>
 8006274:	2110      	movs	r1, #16
 8006276:	4811      	ldr	r0, [pc, #68]	; (80062bc <oslib_test_008_002_execute+0x5c>)
 8006278:	f7fe fd42 	bl	8004d00 <chHeapAllocAligned.constprop.0>
 800627c:	4605      	mov	r5, r0
    p1 = chHeapAlloc(&test_heap, ALLOC_SIZE);
    test_assert(p1 != NULL, "allocation failed");
 800627e:	3800      	subs	r0, #0
 8006280:	bf18      	it	ne
 8006282:	2001      	movne	r0, #1
 8006284:	490e      	ldr	r1, [pc, #56]	; (80062c0 <oslib_test_008_002_execute+0x60>)
 8006286:	f7fa fbab 	bl	80009e0 <_test_assert>
 800628a:	b108      	cbz	r0, 8006290 <oslib_test_008_002_execute+0x30>
  {
    p1 = chHeapAlloc(NULL, (size_t)-256);
    test_assert(p1 == NULL, "allocation not failed");
  }
  test_end_step(2);
}
 800628c:	b002      	add	sp, #8
 800628e:	bd70      	pop	{r4, r5, r6, pc}
    chHeapFree(p1);
 8006290:	4604      	mov	r4, r0
 8006292:	4628      	mov	r0, r5
 8006294:	f7ff ff94 	bl	80061c0 <chHeapFree>
  test_set_step(2);
 8006298:	2302      	movs	r3, #2
 800629a:	4620      	mov	r0, r4
 800629c:	f06f 01ff 	mvn.w	r1, #255	; 0xff
 80062a0:	6033      	str	r3, [r6, #0]
 80062a2:	f7fe fd2d 	bl	8004d00 <chHeapAllocAligned.constprop.0>
    test_assert(p1 == NULL, "allocation not failed");
 80062a6:	fab0 f080 	clz	r0, r0
 80062aa:	4906      	ldr	r1, [pc, #24]	; (80062c4 <oslib_test_008_002_execute+0x64>)
 80062ac:	0940      	lsrs	r0, r0, #5
 80062ae:	f7fa fb97 	bl	80009e0 <_test_assert>
}
 80062b2:	b002      	add	sp, #8
 80062b4:	bd70      	pop	{r4, r5, r6, pc}
 80062b6:	bf00      	nop
 80062b8:	2000149c 	.word	0x2000149c
 80062bc:	200013fc 	.word	0x200013fc
 80062c0:	0800a1c8 	.word	0x0800a1c8
 80062c4:	0800a1dc 	.word	0x0800a1dc
	...

080062d0 <oslib_test_008_001_execute>:
static void oslib_test_008_001_execute(void) {
 80062d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  test_set_step(1);
 80062d4:	4cbe      	ldr	r4, [pc, #760]	; (80065d0 <oslib_test_008_001_execute+0x300>)
    test_assert(chHeapStatus(&test_heap, &sz, NULL) == 1, "heap fragmented");
 80062d6:	48bf      	ldr	r0, [pc, #764]	; (80065d4 <oslib_test_008_001_execute+0x304>)
static void oslib_test_008_001_execute(void) {
 80062d8:	b084      	sub	sp, #16
  test_set_step(1);
 80062da:	2301      	movs	r3, #1
    test_assert(chHeapStatus(&test_heap, &sz, NULL) == 1, "heap fragmented");
 80062dc:	4669      	mov	r1, sp
 80062de:	2200      	movs	r2, #0
  test_set_step(1);
 80062e0:	6023      	str	r3, [r4, #0]
    test_assert(chHeapStatus(&test_heap, &sz, NULL) == 1, "heap fragmented");
 80062e2:	f7ff ff35 	bl	8006150 <chHeapStatus>
 80062e6:	f1a0 0001 	sub.w	r0, r0, #1
 80062ea:	fab0 f080 	clz	r0, r0
 80062ee:	49ba      	ldr	r1, [pc, #744]	; (80065d8 <oslib_test_008_001_execute+0x308>)
 80062f0:	0940      	lsrs	r0, r0, #5
 80062f2:	f7fa fb75 	bl	80009e0 <_test_assert>
 80062f6:	b110      	cbz	r0, 80062fe <oslib_test_008_001_execute+0x2e>
}
 80062f8:	b004      	add	sp, #16
 80062fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  test_set_step(2);
 80062fe:	2302      	movs	r3, #2
 8006300:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006304:	48b3      	ldr	r0, [pc, #716]	; (80065d4 <oslib_test_008_001_execute+0x304>)
 8006306:	6023      	str	r3, [r4, #0]
 8006308:	f7fe fcfa 	bl	8004d00 <chHeapAllocAligned.constprop.0>
    test_assert(p1 == NULL, "allocation not failed");
 800630c:	fab0 f080 	clz	r0, r0
 8006310:	49b2      	ldr	r1, [pc, #712]	; (80065dc <oslib_test_008_001_execute+0x30c>)
 8006312:	0940      	lsrs	r0, r0, #5
 8006314:	f7fa fb64 	bl	80009e0 <_test_assert>
 8006318:	2800      	cmp	r0, #0
 800631a:	d1ed      	bne.n	80062f8 <oslib_test_008_001_execute+0x28>
  test_set_step(3);
 800631c:	2303      	movs	r3, #3
 800631e:	2110      	movs	r1, #16
 8006320:	48ac      	ldr	r0, [pc, #688]	; (80065d4 <oslib_test_008_001_execute+0x304>)
 8006322:	6023      	str	r3, [r4, #0]
 8006324:	f7fe fcec 	bl	8004d00 <chHeapAllocAligned.constprop.0>
 8006328:	4605      	mov	r5, r0
    test_assert(p1 != NULL, "allocation failed");
 800632a:	3800      	subs	r0, #0
 800632c:	bf18      	it	ne
 800632e:	2001      	movne	r0, #1
 8006330:	49ab      	ldr	r1, [pc, #684]	; (80065e0 <oslib_test_008_001_execute+0x310>)
 8006332:	f7fa fb55 	bl	80009e0 <_test_assert>
 8006336:	2800      	cmp	r0, #0
 8006338:	d1de      	bne.n	80062f8 <oslib_test_008_001_execute+0x28>
    chHeapFree(p1);
 800633a:	4628      	mov	r0, r5
 800633c:	f7ff ff40 	bl	80061c0 <chHeapFree>
  test_set_step(4);
 8006340:	2304      	movs	r3, #4
    n = chHeapStatus(&test_heap, &total_size, &largest_size);
 8006342:	a903      	add	r1, sp, #12
 8006344:	48a3      	ldr	r0, [pc, #652]	; (80065d4 <oslib_test_008_001_execute+0x304>)
  test_set_step(4);
 8006346:	6023      	str	r3, [r4, #0]
    n = chHeapStatus(&test_heap, &total_size, &largest_size);
 8006348:	aa02      	add	r2, sp, #8
 800634a:	f7ff ff01 	bl	8006150 <chHeapStatus>
 800634e:	4603      	mov	r3, r0
    test_assert(n == 1, "missing free block");
 8006350:	f1a0 0001 	sub.w	r0, r0, #1
 8006354:	fab0 f080 	clz	r0, r0
 8006358:	49a2      	ldr	r1, [pc, #648]	; (80065e4 <oslib_test_008_001_execute+0x314>)
    n = chHeapStatus(&test_heap, &total_size, &largest_size);
 800635a:	9301      	str	r3, [sp, #4]
    test_assert(n == 1, "missing free block");
 800635c:	0940      	lsrs	r0, r0, #5
 800635e:	f7fa fb3f 	bl	80009e0 <_test_assert>
 8006362:	2800      	cmp	r0, #0
 8006364:	d1c8      	bne.n	80062f8 <oslib_test_008_001_execute+0x28>
    test_assert(total_size >= ALLOC_SIZE, "unexpected heap state");
 8006366:	9803      	ldr	r0, [sp, #12]
 8006368:	499f      	ldr	r1, [pc, #636]	; (80065e8 <oslib_test_008_001_execute+0x318>)
 800636a:	280f      	cmp	r0, #15
 800636c:	bf94      	ite	ls
 800636e:	2000      	movls	r0, #0
 8006370:	2001      	movhi	r0, #1
 8006372:	f7fa fb35 	bl	80009e0 <_test_assert>
 8006376:	2800      	cmp	r0, #0
 8006378:	d1be      	bne.n	80062f8 <oslib_test_008_001_execute+0x28>
    test_assert(total_size == largest_size, "unexpected heap state");
 800637a:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
 800637e:	1ac0      	subs	r0, r0, r3
 8006380:	fab0 f080 	clz	r0, r0
 8006384:	4998      	ldr	r1, [pc, #608]	; (80065e8 <oslib_test_008_001_execute+0x318>)
 8006386:	0940      	lsrs	r0, r0, #5
 8006388:	f7fa fb2a 	bl	80009e0 <_test_assert>
 800638c:	4605      	mov	r5, r0
 800638e:	2800      	cmp	r0, #0
 8006390:	d1b2      	bne.n	80062f8 <oslib_test_008_001_execute+0x28>
  test_set_step(5);
 8006392:	2305      	movs	r3, #5
 8006394:	2110      	movs	r1, #16
 8006396:	488f      	ldr	r0, [pc, #572]	; (80065d4 <oslib_test_008_001_execute+0x304>)
 8006398:	6023      	str	r3, [r4, #0]
 800639a:	f7fe fcb1 	bl	8004d00 <chHeapAllocAligned.constprop.0>
 800639e:	2110      	movs	r1, #16
 80063a0:	4680      	mov	r8, r0
 80063a2:	488c      	ldr	r0, [pc, #560]	; (80065d4 <oslib_test_008_001_execute+0x304>)
 80063a4:	f7fe fcac 	bl	8004d00 <chHeapAllocAligned.constprop.0>
 80063a8:	2110      	movs	r1, #16
 80063aa:	4607      	mov	r7, r0
 80063ac:	4889      	ldr	r0, [pc, #548]	; (80065d4 <oslib_test_008_001_execute+0x304>)
 80063ae:	f7fe fca7 	bl	8004d00 <chHeapAllocAligned.constprop.0>
 80063b2:	4606      	mov	r6, r0
    chHeapFree(p1);                                 /* Does not merge.*/
 80063b4:	4640      	mov	r0, r8
 80063b6:	f7ff ff03 	bl	80061c0 <chHeapFree>
    chHeapFree(p2);                                 /* Merges backward.*/
 80063ba:	4638      	mov	r0, r7
 80063bc:	f7ff ff00 	bl	80061c0 <chHeapFree>
    chHeapFree(p3);                                 /* Merges both sides.*/
 80063c0:	4630      	mov	r0, r6
 80063c2:	f7ff fefd 	bl	80061c0 <chHeapFree>
    test_assert(chHeapStatus(&test_heap, &n, NULL) == 1, "heap fragmented");
 80063c6:	462a      	mov	r2, r5
 80063c8:	a901      	add	r1, sp, #4
 80063ca:	4882      	ldr	r0, [pc, #520]	; (80065d4 <oslib_test_008_001_execute+0x304>)
 80063cc:	f7ff fec0 	bl	8006150 <chHeapStatus>
 80063d0:	f1a0 0001 	sub.w	r0, r0, #1
 80063d4:	fab0 f080 	clz	r0, r0
 80063d8:	497f      	ldr	r1, [pc, #508]	; (80065d8 <oslib_test_008_001_execute+0x308>)
 80063da:	0940      	lsrs	r0, r0, #5
 80063dc:	f7fa fb00 	bl	80009e0 <_test_assert>
 80063e0:	4605      	mov	r5, r0
 80063e2:	2800      	cmp	r0, #0
 80063e4:	d188      	bne.n	80062f8 <oslib_test_008_001_execute+0x28>
  test_set_step(6);
 80063e6:	2306      	movs	r3, #6
 80063e8:	2110      	movs	r1, #16
 80063ea:	487a      	ldr	r0, [pc, #488]	; (80065d4 <oslib_test_008_001_execute+0x304>)
 80063ec:	6023      	str	r3, [r4, #0]
 80063ee:	f7fe fc87 	bl	8004d00 <chHeapAllocAligned.constprop.0>
 80063f2:	2110      	movs	r1, #16
 80063f4:	4606      	mov	r6, r0
 80063f6:	4877      	ldr	r0, [pc, #476]	; (80065d4 <oslib_test_008_001_execute+0x304>)
 80063f8:	f7fe fc82 	bl	8004d00 <chHeapAllocAligned.constprop.0>
 80063fc:	2110      	movs	r1, #16
 80063fe:	4607      	mov	r7, r0
 8006400:	4874      	ldr	r0, [pc, #464]	; (80065d4 <oslib_test_008_001_execute+0x304>)
 8006402:	f7fe fc7d 	bl	8004d00 <chHeapAllocAligned.constprop.0>
    chHeapFree(p3);                                 /* Merges forward.*/
 8006406:	f7ff fedb 	bl	80061c0 <chHeapFree>
    chHeapFree(p2);                                 /* Merges forward.*/
 800640a:	4638      	mov	r0, r7
 800640c:	f7ff fed8 	bl	80061c0 <chHeapFree>
    chHeapFree(p1);                                 /* Merges forward.*/
 8006410:	4630      	mov	r0, r6
 8006412:	f7ff fed5 	bl	80061c0 <chHeapFree>
    test_assert(chHeapStatus(&test_heap, &n, NULL) == 1, "heap fragmented");
 8006416:	462a      	mov	r2, r5
 8006418:	a901      	add	r1, sp, #4
 800641a:	486e      	ldr	r0, [pc, #440]	; (80065d4 <oslib_test_008_001_execute+0x304>)
 800641c:	f7ff fe98 	bl	8006150 <chHeapStatus>
 8006420:	f1a0 0001 	sub.w	r0, r0, #1
 8006424:	fab0 f080 	clz	r0, r0
 8006428:	496b      	ldr	r1, [pc, #428]	; (80065d8 <oslib_test_008_001_execute+0x308>)
 800642a:	0940      	lsrs	r0, r0, #5
 800642c:	f7fa fad8 	bl	80009e0 <_test_assert>
 8006430:	4605      	mov	r5, r0
 8006432:	2800      	cmp	r0, #0
 8006434:	f47f af60 	bne.w	80062f8 <oslib_test_008_001_execute+0x28>
  test_set_step(7);
 8006438:	2307      	movs	r3, #7
 800643a:	2111      	movs	r1, #17
 800643c:	4865      	ldr	r0, [pc, #404]	; (80065d4 <oslib_test_008_001_execute+0x304>)
 800643e:	6023      	str	r3, [r4, #0]
 8006440:	f7fe fc5e 	bl	8004d00 <chHeapAllocAligned.constprop.0>
 8006444:	2110      	movs	r1, #16
 8006446:	4606      	mov	r6, r0
 8006448:	4862      	ldr	r0, [pc, #392]	; (80065d4 <oslib_test_008_001_execute+0x304>)
 800644a:	f7fe fc59 	bl	8004d00 <chHeapAllocAligned.constprop.0>
 800644e:	4603      	mov	r3, r0
    chHeapFree(p1);
 8006450:	4630      	mov	r0, r6
 8006452:	461e      	mov	r6, r3
 8006454:	f7ff feb4 	bl	80061c0 <chHeapFree>
    test_assert(chHeapStatus(&test_heap, &n, NULL) == 2, "invalid state");
 8006458:	462a      	mov	r2, r5
 800645a:	a901      	add	r1, sp, #4
 800645c:	485d      	ldr	r0, [pc, #372]	; (80065d4 <oslib_test_008_001_execute+0x304>)
 800645e:	f7ff fe77 	bl	8006150 <chHeapStatus>
 8006462:	f1a0 0002 	sub.w	r0, r0, #2
 8006466:	fab0 f080 	clz	r0, r0
 800646a:	4960      	ldr	r1, [pc, #384]	; (80065ec <oslib_test_008_001_execute+0x31c>)
 800646c:	0940      	lsrs	r0, r0, #5
 800646e:	f7fa fab7 	bl	80009e0 <_test_assert>
 8006472:	4605      	mov	r5, r0
 8006474:	2800      	cmp	r0, #0
 8006476:	f47f af3f 	bne.w	80062f8 <oslib_test_008_001_execute+0x28>
 800647a:	2110      	movs	r1, #16
 800647c:	4855      	ldr	r0, [pc, #340]	; (80065d4 <oslib_test_008_001_execute+0x304>)
 800647e:	f7fe fc3f 	bl	8004d00 <chHeapAllocAligned.constprop.0>
    test_assert((chHeapStatus(&test_heap, &n, NULL) == 1) ||
 8006482:	462a      	mov	r2, r5
 8006484:	4607      	mov	r7, r0
 8006486:	a901      	add	r1, sp, #4
 8006488:	4852      	ldr	r0, [pc, #328]	; (80065d4 <oslib_test_008_001_execute+0x304>)
 800648a:	f7ff fe61 	bl	8006150 <chHeapStatus>
 800648e:	2801      	cmp	r0, #1
 8006490:	f000 809c 	beq.w	80065cc <oslib_test_008_001_execute+0x2fc>
 8006494:	484f      	ldr	r0, [pc, #316]	; (80065d4 <oslib_test_008_001_execute+0x304>)
 8006496:	2200      	movs	r2, #0
 8006498:	a901      	add	r1, sp, #4
 800649a:	f7ff fe59 	bl	8006150 <chHeapStatus>
 800649e:	f1a0 0c02 	sub.w	ip, r0, #2
 80064a2:	f1dc 0000 	rsbs	r0, ip, #0
 80064a6:	eb40 000c 	adc.w	r0, r0, ip
 80064aa:	494b      	ldr	r1, [pc, #300]	; (80065d8 <oslib_test_008_001_execute+0x308>)
 80064ac:	f7fa fa98 	bl	80009e0 <_test_assert>
 80064b0:	4605      	mov	r5, r0
 80064b2:	2800      	cmp	r0, #0
 80064b4:	f47f af20 	bne.w	80062f8 <oslib_test_008_001_execute+0x28>
    chHeapFree(p2);
 80064b8:	4630      	mov	r0, r6
 80064ba:	f7ff fe81 	bl	80061c0 <chHeapFree>
    chHeapFree(p1);
 80064be:	4638      	mov	r0, r7
 80064c0:	f7ff fe7e 	bl	80061c0 <chHeapFree>
    test_assert(chHeapStatus(&test_heap, &n, NULL) == 1, "heap fragmented");
 80064c4:	462a      	mov	r2, r5
 80064c6:	a901      	add	r1, sp, #4
 80064c8:	4842      	ldr	r0, [pc, #264]	; (80065d4 <oslib_test_008_001_execute+0x304>)
 80064ca:	f7ff fe41 	bl	8006150 <chHeapStatus>
 80064ce:	1e46      	subs	r6, r0, #1
 80064d0:	4270      	negs	r0, r6
 80064d2:	4941      	ldr	r1, [pc, #260]	; (80065d8 <oslib_test_008_001_execute+0x308>)
 80064d4:	4170      	adcs	r0, r6
 80064d6:	f7fa fa83 	bl	80009e0 <_test_assert>
 80064da:	4605      	mov	r5, r0
 80064dc:	2800      	cmp	r0, #0
 80064de:	f47f af0b 	bne.w	80062f8 <oslib_test_008_001_execute+0x28>
  test_set_step(8);
 80064e2:	2308      	movs	r3, #8
 80064e4:	2110      	movs	r1, #16
 80064e6:	483b      	ldr	r0, [pc, #236]	; (80065d4 <oslib_test_008_001_execute+0x304>)
 80064e8:	6023      	str	r3, [r4, #0]
 80064ea:	f7fe fc09 	bl	8004d00 <chHeapAllocAligned.constprop.0>
 80064ee:	2110      	movs	r1, #16
 80064f0:	4607      	mov	r7, r0
 80064f2:	4838      	ldr	r0, [pc, #224]	; (80065d4 <oslib_test_008_001_execute+0x304>)
 80064f4:	f7fe fc04 	bl	8004d00 <chHeapAllocAligned.constprop.0>
 80064f8:	4606      	mov	r6, r0
    chHeapFree(p1);
 80064fa:	4638      	mov	r0, r7
 80064fc:	f7ff fe60 	bl	80061c0 <chHeapFree>
    test_assert( chHeapStatus(&test_heap, &n, NULL) == 2, "invalid state");
 8006500:	462a      	mov	r2, r5
 8006502:	a901      	add	r1, sp, #4
 8006504:	4833      	ldr	r0, [pc, #204]	; (80065d4 <oslib_test_008_001_execute+0x304>)
 8006506:	f7ff fe23 	bl	8006150 <chHeapStatus>
 800650a:	1e85      	subs	r5, r0, #2
 800650c:	4268      	negs	r0, r5
 800650e:	4168      	adcs	r0, r5
 8006510:	4936      	ldr	r1, [pc, #216]	; (80065ec <oslib_test_008_001_execute+0x31c>)
 8006512:	f7fa fa65 	bl	80009e0 <_test_assert>
 8006516:	4605      	mov	r5, r0
 8006518:	2800      	cmp	r0, #0
 800651a:	f47f aeed 	bne.w	80062f8 <oslib_test_008_001_execute+0x28>
 800651e:	2120      	movs	r1, #32
 8006520:	482c      	ldr	r0, [pc, #176]	; (80065d4 <oslib_test_008_001_execute+0x304>)
 8006522:	f7fe fbed 	bl	8004d00 <chHeapAllocAligned.constprop.0>
    chHeapFree(p1);
 8006526:	f7ff fe4b 	bl	80061c0 <chHeapFree>
    chHeapFree(p2);
 800652a:	4630      	mov	r0, r6
 800652c:	f7ff fe48 	bl	80061c0 <chHeapFree>
    test_assert(chHeapStatus(&test_heap, &n, NULL) == 1, "heap fragmented");
 8006530:	462a      	mov	r2, r5
 8006532:	a901      	add	r1, sp, #4
 8006534:	4827      	ldr	r0, [pc, #156]	; (80065d4 <oslib_test_008_001_execute+0x304>)
 8006536:	f7ff fe0b 	bl	8006150 <chHeapStatus>
 800653a:	1e41      	subs	r1, r0, #1
 800653c:	4248      	negs	r0, r1
 800653e:	4148      	adcs	r0, r1
 8006540:	4925      	ldr	r1, [pc, #148]	; (80065d8 <oslib_test_008_001_execute+0x308>)
 8006542:	f7fa fa4d 	bl	80009e0 <_test_assert>
 8006546:	4602      	mov	r2, r0
 8006548:	2800      	cmp	r0, #0
 800654a:	f47f aed5 	bne.w	80062f8 <oslib_test_008_001_execute+0x28>
  test_set_step(9);
 800654e:	2309      	movs	r3, #9
    (void)chHeapStatus(&test_heap, &n, NULL);
 8006550:	a901      	add	r1, sp, #4
 8006552:	4820      	ldr	r0, [pc, #128]	; (80065d4 <oslib_test_008_001_execute+0x304>)
  test_set_step(9);
 8006554:	6023      	str	r3, [r4, #0]
    (void)chHeapStatus(&test_heap, &n, NULL);
 8006556:	f7ff fdfb 	bl	8006150 <chHeapStatus>
 800655a:	9901      	ldr	r1, [sp, #4]
 800655c:	481d      	ldr	r0, [pc, #116]	; (80065d4 <oslib_test_008_001_execute+0x304>)
 800655e:	f7fe fbcf 	bl	8004d00 <chHeapAllocAligned.constprop.0>
 8006562:	4606      	mov	r6, r0
    test_assert(p1 != NULL, "allocation failed");
 8006564:	3800      	subs	r0, #0
 8006566:	491e      	ldr	r1, [pc, #120]	; (80065e0 <oslib_test_008_001_execute+0x310>)
 8006568:	bf18      	it	ne
 800656a:	2001      	movne	r0, #1
 800656c:	f7fa fa38 	bl	80009e0 <_test_assert>
 8006570:	4602      	mov	r2, r0
 8006572:	2800      	cmp	r0, #0
 8006574:	f47f aec0 	bne.w	80062f8 <oslib_test_008_001_execute+0x28>
    test_assert(chHeapStatus(&test_heap, NULL, NULL) == 0, "not empty");
 8006578:	4601      	mov	r1, r0
 800657a:	4816      	ldr	r0, [pc, #88]	; (80065d4 <oslib_test_008_001_execute+0x304>)
 800657c:	f7ff fde8 	bl	8006150 <chHeapStatus>
 8006580:	fab0 f080 	clz	r0, r0
 8006584:	491a      	ldr	r1, [pc, #104]	; (80065f0 <oslib_test_008_001_execute+0x320>)
 8006586:	0940      	lsrs	r0, r0, #5
 8006588:	f7fa fa2a 	bl	80009e0 <_test_assert>
 800658c:	4605      	mov	r5, r0
 800658e:	2800      	cmp	r0, #0
 8006590:	f47f aeb2 	bne.w	80062f8 <oslib_test_008_001_execute+0x28>
    chHeapFree(p1);
 8006594:	4630      	mov	r0, r6
 8006596:	f7ff fe13 	bl	80061c0 <chHeapFree>
    test_assert(chHeapStatus(&test_heap, &n, NULL) == 1, "heap fragmented");
 800659a:	462a      	mov	r2, r5
 800659c:	a901      	add	r1, sp, #4
  test_set_step(10);
 800659e:	230a      	movs	r3, #10
    test_assert(chHeapStatus(&test_heap, &n, NULL) == 1, "heap fragmented");
 80065a0:	480c      	ldr	r0, [pc, #48]	; (80065d4 <oslib_test_008_001_execute+0x304>)
  test_set_step(10);
 80065a2:	6023      	str	r3, [r4, #0]
    test_assert(chHeapStatus(&test_heap, &n, NULL) == 1, "heap fragmented");
 80065a4:	f7ff fdd4 	bl	8006150 <chHeapStatus>
 80065a8:	1e42      	subs	r2, r0, #1
 80065aa:	4250      	negs	r0, r2
 80065ac:	4150      	adcs	r0, r2
 80065ae:	490a      	ldr	r1, [pc, #40]	; (80065d8 <oslib_test_008_001_execute+0x308>)
 80065b0:	f7fa fa16 	bl	80009e0 <_test_assert>
 80065b4:	2800      	cmp	r0, #0
 80065b6:	f47f ae9f 	bne.w	80062f8 <oslib_test_008_001_execute+0x28>
    test_assert(n == sz, "size changed");
 80065ba:	e9dd 3000 	ldrd	r3, r0, [sp]
 80065be:	1ac3      	subs	r3, r0, r3
 80065c0:	4258      	negs	r0, r3
 80065c2:	490c      	ldr	r1, [pc, #48]	; (80065f4 <oslib_test_008_001_execute+0x324>)
 80065c4:	4158      	adcs	r0, r3
 80065c6:	f7fa fa0b 	bl	80009e0 <_test_assert>
 80065ca:	e695      	b.n	80062f8 <oslib_test_008_001_execute+0x28>
    test_assert((chHeapStatus(&test_heap, &n, NULL) == 1) ||
 80065cc:	2001      	movs	r0, #1
 80065ce:	e76c      	b.n	80064aa <oslib_test_008_001_execute+0x1da>
 80065d0:	2000149c 	.word	0x2000149c
 80065d4:	200013fc 	.word	0x200013fc
 80065d8:	0800a1f4 	.word	0x0800a1f4
 80065dc:	0800a1dc 	.word	0x0800a1dc
 80065e0:	0800a1c8 	.word	0x0800a1c8
 80065e4:	0800a204 	.word	0x0800a204
 80065e8:	0800a218 	.word	0x0800a218
 80065ec:	0800a230 	.word	0x0800a230
 80065f0:	08009fc4 	.word	0x08009fc4
 80065f4:	0800a240 	.word	0x0800a240
	...

08006600 <dyn_release_object_heap.part.0>:
static void dyn_release_object_heap(dyn_element_t *dep,
 8006600:	4603      	mov	r3, r0
  dyn_element_t *prev = (dyn_element_t *)dlp;
 8006602:	4608      	mov	r0, r1
 8006604:	e001      	b.n	800660a <dyn_release_object_heap.part.0+0xa>
    if (prev->next == element) {
 8006606:	4283      	cmp	r3, r0
 8006608:	d006      	beq.n	8006618 <dyn_release_object_heap.part.0+0x18>
  while (prev->next != (dyn_element_t *)dlp) {
 800660a:	4602      	mov	r2, r0
 800660c:	6800      	ldr	r0, [r0, #0]
 800660e:	4288      	cmp	r0, r1
 8006610:	d1f9      	bne.n	8006606 <dyn_release_object_heap.part.0+0x6>
  return NULL;
 8006612:	2000      	movs	r0, #0
    chHeapFree((void *)dep);
 8006614:	f7ff bdd4 	b.w	80061c0 <chHeapFree>
      prev->next = element->next;
 8006618:	6803      	ldr	r3, [r0, #0]
 800661a:	6013      	str	r3, [r2, #0]
    chHeapFree((void *)dep);
 800661c:	f7ff bdd0 	b.w	80061c0 <chHeapFree>

08006620 <chFactoryReleasePipe>:
 *
 * @param[in] dpp       dynamic pipe object reference
 *
 * @api
 */
void chFactoryReleasePipe(dyn_pipe_t *dpp) {
 8006620:	b510      	push	{r4, lr}
 8006622:	4604      	mov	r4, r0

  F_LOCK();
 8006624:	4807      	ldr	r0, [pc, #28]	; (8006644 <chFactoryReleasePipe+0x24>)
 8006626:	f7fc fdab 	bl	8003180 <chMtxLock>
  dep->refs--;
 800662a:	6863      	ldr	r3, [r4, #4]
 800662c:	3b01      	subs	r3, #1
 800662e:	6063      	str	r3, [r4, #4]
  if (dep->refs == (ucnt_t)0) {
 8006630:	b91b      	cbnz	r3, 800663a <chFactoryReleasePipe+0x1a>
 8006632:	4905      	ldr	r1, [pc, #20]	; (8006648 <chFactoryReleasePipe+0x28>)
 8006634:	4620      	mov	r0, r4
 8006636:	f7ff ffe3 	bl	8006600 <dyn_release_object_heap.part.0>

  dyn_release_object_heap(&dpp->element, &ch_factory.pipe_list);

  F_UNLOCK();
}
 800663a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  F_UNLOCK();
 800663e:	4801      	ldr	r0, [pc, #4]	; (8006644 <chFactoryReleasePipe+0x24>)
 8006640:	f7fe bb2e 	b.w	8004ca0 <chMtxUnlock>
 8006644:	20000a28 	.word	0x20000a28
 8006648:	20000a6c 	.word	0x20000a6c
 800664c:	00000000 	.word	0x00000000

08006650 <oslib_test_009_006_execute>:
      chFactoryReleasePipe(dpp);
    }
  }
}

static void oslib_test_009_006_execute(void) {
 8006650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  dyn_pipe_t *dpp;

  /* [9.6.1] Retrieving a dynamic pipe by name, must not exist.*/
  test_set_step(1);
 8006652:	4c43      	ldr	r4, [pc, #268]	; (8006760 <oslib_test_009_006_execute+0x110>)
 8006654:	2501      	movs	r5, #1
 8006656:	6025      	str	r5, [r4, #0]
  {
    dpp = chFactoryFindPipe("mypipe");
 8006658:	f7fe feca 	bl	80053f0 <chFactoryFindPipe.constprop.0>
    test_assert(dpp == NULL, "found");
 800665c:	fab0 f080 	clz	r0, r0
 8006660:	4940      	ldr	r1, [pc, #256]	; (8006764 <oslib_test_009_006_execute+0x114>)
 8006662:	0940      	lsrs	r0, r0, #5
 8006664:	f7fa f9bc 	bl	80009e0 <_test_assert>
 8006668:	b100      	cbz	r0, 800666c <oslib_test_009_006_execute+0x1c>
  {
    dpp = chFactoryFindPipe("mypipe");
    test_assert(dpp == NULL, "found");
  }
  test_end_step(6);
}
 800666a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  test_set_step(2);
 800666c:	2302      	movs	r3, #2
 800666e:	6023      	str	r3, [r4, #0]
    dpp = chFactoryCreatePipe("mypipe", 16U);
 8006670:	f7fe fe86 	bl	8005380 <chFactoryCreatePipe.constprop.0>
 8006674:	4606      	mov	r6, r0
    test_assert(dpp != NULL, "cannot create");
 8006676:	3800      	subs	r0, #0
 8006678:	bf18      	it	ne
 800667a:	2001      	movne	r0, #1
 800667c:	493a      	ldr	r1, [pc, #232]	; (8006768 <oslib_test_009_006_execute+0x118>)
 800667e:	f7fa f9af 	bl	80009e0 <_test_assert>
 8006682:	2800      	cmp	r0, #0
 8006684:	d1f1      	bne.n	800666a <oslib_test_009_006_execute+0x1a>
  test_set_step(3);
 8006686:	2303      	movs	r3, #3
 8006688:	6023      	str	r3, [r4, #0]
    dpp1 = chFactoryCreatePipe("mypipe", 16U);
 800668a:	f7fe fe79 	bl	8005380 <chFactoryCreatePipe.constprop.0>
    test_assert(dpp1 == NULL, "can create");
 800668e:	fab0 f080 	clz	r0, r0
 8006692:	4936      	ldr	r1, [pc, #216]	; (800676c <oslib_test_009_006_execute+0x11c>)
 8006694:	0940      	lsrs	r0, r0, #5
 8006696:	f7fa f9a3 	bl	80009e0 <_test_assert>
 800669a:	2800      	cmp	r0, #0
 800669c:	d1e5      	bne.n	800666a <oslib_test_009_006_execute+0x1a>
  test_set_step(4);
 800669e:	2304      	movs	r3, #4
 80066a0:	6023      	str	r3, [r4, #0]
    dpp1 = chFactoryFindPipe("mypipe");
 80066a2:	f7fe fea5 	bl	80053f0 <chFactoryFindPipe.constprop.0>
 80066a6:	4607      	mov	r7, r0
    test_assert(dpp1 != NULL, "not found");
 80066a8:	3800      	subs	r0, #0
 80066aa:	bf18      	it	ne
 80066ac:	2001      	movne	r0, #1
 80066ae:	4930      	ldr	r1, [pc, #192]	; (8006770 <oslib_test_009_006_execute+0x120>)
 80066b0:	f7fa f996 	bl	80009e0 <_test_assert>
 80066b4:	2800      	cmp	r0, #0
 80066b6:	d1d8      	bne.n	800666a <oslib_test_009_006_execute+0x1a>
    test_assert(dpp == dpp1, "object reference mismatch");
 80066b8:	1bf0      	subs	r0, r6, r7
 80066ba:	fab0 f080 	clz	r0, r0
 80066be:	492d      	ldr	r1, [pc, #180]	; (8006774 <oslib_test_009_006_execute+0x124>)
 80066c0:	0940      	lsrs	r0, r0, #5
 80066c2:	f7fa f98d 	bl	80009e0 <_test_assert>
 80066c6:	2800      	cmp	r0, #0
 80066c8:	d1cf      	bne.n	800666a <oslib_test_009_006_execute+0x1a>
    test_assert(dpp1->element.refs == 2, "object reference mismatch");
 80066ca:	6878      	ldr	r0, [r7, #4]
 80066cc:	4929      	ldr	r1, [pc, #164]	; (8006774 <oslib_test_009_006_execute+0x124>)
 80066ce:	f1a0 0002 	sub.w	r0, r0, #2
 80066d2:	fab0 f080 	clz	r0, r0
 80066d6:	0940      	lsrs	r0, r0, #5
 80066d8:	f7fa f982 	bl	80009e0 <_test_assert>
 80066dc:	2800      	cmp	r0, #0
 80066de:	d1c4      	bne.n	800666a <oslib_test_009_006_execute+0x1a>
 80066e0:	687b      	ldr	r3, [r7, #4]
    test_assert(dpp1 == dpp2, "object reference mismatch");
 80066e2:	4924      	ldr	r1, [pc, #144]	; (8006774 <oslib_test_009_006_execute+0x124>)
 80066e4:	442b      	add	r3, r5
 80066e6:	4628      	mov	r0, r5
 80066e8:	607b      	str	r3, [r7, #4]
 80066ea:	f7fa f979 	bl	80009e0 <_test_assert>
 80066ee:	2800      	cmp	r0, #0
 80066f0:	d1bb      	bne.n	800666a <oslib_test_009_006_execute+0x1a>
    test_assert(dpp2->element.refs == 3, "object reference mismatch");
 80066f2:	6878      	ldr	r0, [r7, #4]
 80066f4:	491f      	ldr	r1, [pc, #124]	; (8006774 <oslib_test_009_006_execute+0x124>)
 80066f6:	f1a0 0003 	sub.w	r0, r0, #3
 80066fa:	fab0 f080 	clz	r0, r0
 80066fe:	0940      	lsrs	r0, r0, #5
 8006700:	f7fa f96e 	bl	80009e0 <_test_assert>
 8006704:	2800      	cmp	r0, #0
 8006706:	d1b0      	bne.n	800666a <oslib_test_009_006_execute+0x1a>
    chFactoryReleasePipe(dpp2);
 8006708:	4638      	mov	r0, r7
 800670a:	f7ff ff89 	bl	8006620 <chFactoryReleasePipe>
    test_assert(dpp1->element.refs == 2, "references mismatch");
 800670e:	6878      	ldr	r0, [r7, #4]
 8006710:	4919      	ldr	r1, [pc, #100]	; (8006778 <oslib_test_009_006_execute+0x128>)
 8006712:	f1a0 0002 	sub.w	r0, r0, #2
 8006716:	fab0 f080 	clz	r0, r0
 800671a:	0940      	lsrs	r0, r0, #5
 800671c:	f7fa f960 	bl	80009e0 <_test_assert>
 8006720:	2800      	cmp	r0, #0
 8006722:	d1a2      	bne.n	800666a <oslib_test_009_006_execute+0x1a>
    chFactoryReleasePipe(dpp1);
 8006724:	4638      	mov	r0, r7
 8006726:	f7ff ff7b 	bl	8006620 <chFactoryReleasePipe>
    test_assert(dpp->element.refs == 1, "references mismatch");
 800672a:	6870      	ldr	r0, [r6, #4]
 800672c:	4912      	ldr	r1, [pc, #72]	; (8006778 <oslib_test_009_006_execute+0x128>)
 800672e:	1b40      	subs	r0, r0, r5
 8006730:	fab0 f080 	clz	r0, r0
 8006734:	0940      	lsrs	r0, r0, #5
 8006736:	f7fa f953 	bl	80009e0 <_test_assert>
 800673a:	2800      	cmp	r0, #0
 800673c:	d195      	bne.n	800666a <oslib_test_009_006_execute+0x1a>
    chFactoryReleasePipe(dpp);
 800673e:	4630      	mov	r0, r6
  test_set_step(5);
 8006740:	2305      	movs	r3, #5
 8006742:	6023      	str	r3, [r4, #0]
    chFactoryReleasePipe(dpp);
 8006744:	f7ff ff6c 	bl	8006620 <chFactoryReleasePipe>
  test_set_step(6);
 8006748:	2306      	movs	r3, #6
 800674a:	6023      	str	r3, [r4, #0]
    dpp = chFactoryFindPipe("mypipe");
 800674c:	f7fe fe50 	bl	80053f0 <chFactoryFindPipe.constprop.0>
    test_assert(dpp == NULL, "found");
 8006750:	fab0 f080 	clz	r0, r0
}
 8006754:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    test_assert(dpp == NULL, "found");
 8006758:	4902      	ldr	r1, [pc, #8]	; (8006764 <oslib_test_009_006_execute+0x114>)
 800675a:	0940      	lsrs	r0, r0, #5
 800675c:	f7fa b940 	b.w	80009e0 <_test_assert>
 8006760:	2000149c 	.word	0x2000149c
 8006764:	0800a160 	.word	0x0800a160
 8006768:	0800a140 	.word	0x0800a140
 800676c:	0800a150 	.word	0x0800a150
 8006770:	0800a15c 	.word	0x0800a15c
 8006774:	0800a168 	.word	0x0800a168
 8006778:	0800a184 	.word	0x0800a184
 800677c:	00000000 	.word	0x00000000

08006780 <oslib_test_009_006_teardown>:
static void oslib_test_009_006_teardown(void) {
 8006780:	b510      	push	{r4, lr}
  dpp = chFactoryFindPipe("mypipe");
 8006782:	f7fe fe35 	bl	80053f0 <chFactoryFindPipe.constprop.0>
  if (dpp != NULL) {
 8006786:	b140      	cbz	r0, 800679a <oslib_test_009_006_teardown+0x1a>
    while (dpp->element.refs > 0U) {
 8006788:	6843      	ldr	r3, [r0, #4]
 800678a:	4604      	mov	r4, r0
 800678c:	b12b      	cbz	r3, 800679a <oslib_test_009_006_teardown+0x1a>
      chFactoryReleasePipe(dpp);
 800678e:	4620      	mov	r0, r4
 8006790:	f7ff ff46 	bl	8006620 <chFactoryReleasePipe>
    while (dpp->element.refs > 0U) {
 8006794:	6863      	ldr	r3, [r4, #4]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d1f9      	bne.n	800678e <oslib_test_009_006_teardown+0xe>
}
 800679a:	bd10      	pop	{r4, pc}
 800679c:	0000      	movs	r0, r0
	...

080067a0 <chFactoryReleaseObjectsFIFO>:
void chFactoryReleaseObjectsFIFO(dyn_objects_fifo_t *dofp) {
 80067a0:	b510      	push	{r4, lr}
 80067a2:	4604      	mov	r4, r0
  F_LOCK();
 80067a4:	4807      	ldr	r0, [pc, #28]	; (80067c4 <chFactoryReleaseObjectsFIFO+0x24>)
 80067a6:	f7fc fceb 	bl	8003180 <chMtxLock>
  dep->refs--;
 80067aa:	6863      	ldr	r3, [r4, #4]
 80067ac:	3b01      	subs	r3, #1
 80067ae:	6063      	str	r3, [r4, #4]
  if (dep->refs == (ucnt_t)0) {
 80067b0:	b91b      	cbnz	r3, 80067ba <chFactoryReleaseObjectsFIFO+0x1a>
 80067b2:	4905      	ldr	r1, [pc, #20]	; (80067c8 <chFactoryReleaseObjectsFIFO+0x28>)
 80067b4:	4620      	mov	r0, r4
 80067b6:	f7ff ff23 	bl	8006600 <dyn_release_object_heap.part.0>
}
 80067ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  F_UNLOCK();
 80067be:	4801      	ldr	r0, [pc, #4]	; (80067c4 <chFactoryReleaseObjectsFIFO+0x24>)
 80067c0:	f7fe ba6e 	b.w	8004ca0 <chMtxUnlock>
 80067c4:	20000a28 	.word	0x20000a28
 80067c8:	20000a68 	.word	0x20000a68
 80067cc:	00000000 	.word	0x00000000

080067d0 <oslib_test_009_005_execute>:
static void oslib_test_009_005_execute(void) {
 80067d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  test_set_step(1);
 80067d2:	4c43      	ldr	r4, [pc, #268]	; (80068e0 <oslib_test_009_005_execute+0x110>)
 80067d4:	2501      	movs	r5, #1
 80067d6:	6025      	str	r5, [r4, #0]
    dofp = chFactoryFindObjectsFIFO("myfifo");
 80067d8:	f7fe fdba 	bl	8005350 <chFactoryFindObjectsFIFO.constprop.0>
    test_assert(dofp == NULL, "found");
 80067dc:	fab0 f080 	clz	r0, r0
 80067e0:	4940      	ldr	r1, [pc, #256]	; (80068e4 <oslib_test_009_005_execute+0x114>)
 80067e2:	0940      	lsrs	r0, r0, #5
 80067e4:	f7fa f8fc 	bl	80009e0 <_test_assert>
 80067e8:	b100      	cbz	r0, 80067ec <oslib_test_009_005_execute+0x1c>
}
 80067ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  test_set_step(2);
 80067ec:	2302      	movs	r3, #2
 80067ee:	6023      	str	r3, [r4, #0]
    dofp = chFactoryCreateObjectsFIFO("myfifo", 16U, 16U, PORT_NATURAL_ALIGN);
 80067f0:	f7fe fd76 	bl	80052e0 <chFactoryCreateObjectsFIFO.constprop.0>
 80067f4:	4606      	mov	r6, r0
    test_assert(dofp != NULL, "cannot create");
 80067f6:	3800      	subs	r0, #0
 80067f8:	bf18      	it	ne
 80067fa:	2001      	movne	r0, #1
 80067fc:	493a      	ldr	r1, [pc, #232]	; (80068e8 <oslib_test_009_005_execute+0x118>)
 80067fe:	f7fa f8ef 	bl	80009e0 <_test_assert>
 8006802:	2800      	cmp	r0, #0
 8006804:	d1f1      	bne.n	80067ea <oslib_test_009_005_execute+0x1a>
  test_set_step(3);
 8006806:	2303      	movs	r3, #3
 8006808:	6023      	str	r3, [r4, #0]
    dofp1 = chFactoryCreateObjectsFIFO("myfifo", 16U, 16U, PORT_NATURAL_ALIGN);
 800680a:	f7fe fd69 	bl	80052e0 <chFactoryCreateObjectsFIFO.constprop.0>
    test_assert(dofp1 == NULL, "can create");
 800680e:	fab0 f080 	clz	r0, r0
 8006812:	4936      	ldr	r1, [pc, #216]	; (80068ec <oslib_test_009_005_execute+0x11c>)
 8006814:	0940      	lsrs	r0, r0, #5
 8006816:	f7fa f8e3 	bl	80009e0 <_test_assert>
 800681a:	2800      	cmp	r0, #0
 800681c:	d1e5      	bne.n	80067ea <oslib_test_009_005_execute+0x1a>
  test_set_step(4);
 800681e:	2304      	movs	r3, #4
 8006820:	6023      	str	r3, [r4, #0]
    dofp1 = chFactoryFindObjectsFIFO("myfifo");
 8006822:	f7fe fd95 	bl	8005350 <chFactoryFindObjectsFIFO.constprop.0>
 8006826:	4607      	mov	r7, r0
    test_assert(dofp1 != NULL, "not found");
 8006828:	3800      	subs	r0, #0
 800682a:	bf18      	it	ne
 800682c:	2001      	movne	r0, #1
 800682e:	4930      	ldr	r1, [pc, #192]	; (80068f0 <oslib_test_009_005_execute+0x120>)
 8006830:	f7fa f8d6 	bl	80009e0 <_test_assert>
 8006834:	2800      	cmp	r0, #0
 8006836:	d1d8      	bne.n	80067ea <oslib_test_009_005_execute+0x1a>
    test_assert(dofp == dofp1, "object reference mismatch");
 8006838:	1bf0      	subs	r0, r6, r7
 800683a:	fab0 f080 	clz	r0, r0
 800683e:	492d      	ldr	r1, [pc, #180]	; (80068f4 <oslib_test_009_005_execute+0x124>)
 8006840:	0940      	lsrs	r0, r0, #5
 8006842:	f7fa f8cd 	bl	80009e0 <_test_assert>
 8006846:	2800      	cmp	r0, #0
 8006848:	d1cf      	bne.n	80067ea <oslib_test_009_005_execute+0x1a>
    test_assert(dofp1->element.refs == 2, "object reference mismatch");
 800684a:	6878      	ldr	r0, [r7, #4]
 800684c:	4929      	ldr	r1, [pc, #164]	; (80068f4 <oslib_test_009_005_execute+0x124>)
 800684e:	f1a0 0002 	sub.w	r0, r0, #2
 8006852:	fab0 f080 	clz	r0, r0
 8006856:	0940      	lsrs	r0, r0, #5
 8006858:	f7fa f8c2 	bl	80009e0 <_test_assert>
 800685c:	2800      	cmp	r0, #0
 800685e:	d1c4      	bne.n	80067ea <oslib_test_009_005_execute+0x1a>
 8006860:	687b      	ldr	r3, [r7, #4]
    test_assert(dofp1 == dofp2, "object reference mismatch");
 8006862:	4924      	ldr	r1, [pc, #144]	; (80068f4 <oslib_test_009_005_execute+0x124>)
 8006864:	442b      	add	r3, r5
 8006866:	4628      	mov	r0, r5
 8006868:	607b      	str	r3, [r7, #4]
 800686a:	f7fa f8b9 	bl	80009e0 <_test_assert>
 800686e:	2800      	cmp	r0, #0
 8006870:	d1bb      	bne.n	80067ea <oslib_test_009_005_execute+0x1a>
    test_assert(dofp2->element.refs == 3, "object reference mismatch");
 8006872:	6878      	ldr	r0, [r7, #4]
 8006874:	491f      	ldr	r1, [pc, #124]	; (80068f4 <oslib_test_009_005_execute+0x124>)
 8006876:	f1a0 0003 	sub.w	r0, r0, #3
 800687a:	fab0 f080 	clz	r0, r0
 800687e:	0940      	lsrs	r0, r0, #5
 8006880:	f7fa f8ae 	bl	80009e0 <_test_assert>
 8006884:	2800      	cmp	r0, #0
 8006886:	d1b0      	bne.n	80067ea <oslib_test_009_005_execute+0x1a>
    chFactoryReleaseObjectsFIFO(dofp2);
 8006888:	4638      	mov	r0, r7
 800688a:	f7ff ff89 	bl	80067a0 <chFactoryReleaseObjectsFIFO>
    test_assert(dofp1->element.refs == 2, "references mismatch");
 800688e:	6878      	ldr	r0, [r7, #4]
 8006890:	4919      	ldr	r1, [pc, #100]	; (80068f8 <oslib_test_009_005_execute+0x128>)
 8006892:	f1a0 0002 	sub.w	r0, r0, #2
 8006896:	fab0 f080 	clz	r0, r0
 800689a:	0940      	lsrs	r0, r0, #5
 800689c:	f7fa f8a0 	bl	80009e0 <_test_assert>
 80068a0:	2800      	cmp	r0, #0
 80068a2:	d1a2      	bne.n	80067ea <oslib_test_009_005_execute+0x1a>
    chFactoryReleaseObjectsFIFO(dofp1);
 80068a4:	4638      	mov	r0, r7
 80068a6:	f7ff ff7b 	bl	80067a0 <chFactoryReleaseObjectsFIFO>
    test_assert(dofp->element.refs == 1, "references mismatch");
 80068aa:	6870      	ldr	r0, [r6, #4]
 80068ac:	4912      	ldr	r1, [pc, #72]	; (80068f8 <oslib_test_009_005_execute+0x128>)
 80068ae:	1b40      	subs	r0, r0, r5
 80068b0:	fab0 f080 	clz	r0, r0
 80068b4:	0940      	lsrs	r0, r0, #5
 80068b6:	f7fa f893 	bl	80009e0 <_test_assert>
 80068ba:	2800      	cmp	r0, #0
 80068bc:	d195      	bne.n	80067ea <oslib_test_009_005_execute+0x1a>
    chFactoryReleaseObjectsFIFO(dofp);
 80068be:	4630      	mov	r0, r6
  test_set_step(5);
 80068c0:	2305      	movs	r3, #5
 80068c2:	6023      	str	r3, [r4, #0]
    chFactoryReleaseObjectsFIFO(dofp);
 80068c4:	f7ff ff6c 	bl	80067a0 <chFactoryReleaseObjectsFIFO>
  test_set_step(6);
 80068c8:	2306      	movs	r3, #6
 80068ca:	6023      	str	r3, [r4, #0]
    dofp = chFactoryFindObjectsFIFO("myfifo");
 80068cc:	f7fe fd40 	bl	8005350 <chFactoryFindObjectsFIFO.constprop.0>
    test_assert(dofp == NULL, "found");
 80068d0:	fab0 f080 	clz	r0, r0
}
 80068d4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    test_assert(dofp == NULL, "found");
 80068d8:	4902      	ldr	r1, [pc, #8]	; (80068e4 <oslib_test_009_005_execute+0x114>)
 80068da:	0940      	lsrs	r0, r0, #5
 80068dc:	f7fa b880 	b.w	80009e0 <_test_assert>
 80068e0:	2000149c 	.word	0x2000149c
 80068e4:	0800a160 	.word	0x0800a160
 80068e8:	0800a140 	.word	0x0800a140
 80068ec:	0800a150 	.word	0x0800a150
 80068f0:	0800a15c 	.word	0x0800a15c
 80068f4:	0800a168 	.word	0x0800a168
 80068f8:	0800a184 	.word	0x0800a184
 80068fc:	00000000 	.word	0x00000000

08006900 <oslib_test_009_005_teardown>:
static void oslib_test_009_005_teardown(void) {
 8006900:	b510      	push	{r4, lr}
  dofp = chFactoryFindObjectsFIFO("myfifo");
 8006902:	f7fe fd25 	bl	8005350 <chFactoryFindObjectsFIFO.constprop.0>
  if (dofp != NULL) {
 8006906:	b140      	cbz	r0, 800691a <oslib_test_009_005_teardown+0x1a>
    while (dofp->element.refs > 0U) {
 8006908:	6843      	ldr	r3, [r0, #4]
 800690a:	4604      	mov	r4, r0
 800690c:	b12b      	cbz	r3, 800691a <oslib_test_009_005_teardown+0x1a>
      chFactoryReleaseObjectsFIFO(dofp);
 800690e:	4620      	mov	r0, r4
 8006910:	f7ff ff46 	bl	80067a0 <chFactoryReleaseObjectsFIFO>
    while (dofp->element.refs > 0U) {
 8006914:	6863      	ldr	r3, [r4, #4]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d1f9      	bne.n	800690e <oslib_test_009_005_teardown+0xe>
}
 800691a:	bd10      	pop	{r4, pc}
 800691c:	0000      	movs	r0, r0
	...

08006920 <chFactoryReleaseMailbox>:
void chFactoryReleaseMailbox(dyn_mailbox_t *dmp) {
 8006920:	b510      	push	{r4, lr}
 8006922:	4604      	mov	r4, r0
  F_LOCK();
 8006924:	4807      	ldr	r0, [pc, #28]	; (8006944 <chFactoryReleaseMailbox+0x24>)
 8006926:	f7fc fc2b 	bl	8003180 <chMtxLock>
  dep->refs--;
 800692a:	6863      	ldr	r3, [r4, #4]
 800692c:	3b01      	subs	r3, #1
 800692e:	6063      	str	r3, [r4, #4]
  if (dep->refs == (ucnt_t)0) {
 8006930:	b91b      	cbnz	r3, 800693a <chFactoryReleaseMailbox+0x1a>
 8006932:	4905      	ldr	r1, [pc, #20]	; (8006948 <chFactoryReleaseMailbox+0x28>)
 8006934:	4620      	mov	r0, r4
 8006936:	f7ff fe63 	bl	8006600 <dyn_release_object_heap.part.0>
}
 800693a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  F_UNLOCK();
 800693e:	4801      	ldr	r0, [pc, #4]	; (8006944 <chFactoryReleaseMailbox+0x24>)
 8006940:	f7fe b9ae 	b.w	8004ca0 <chMtxUnlock>
 8006944:	20000a28 	.word	0x20000a28
 8006948:	20000a64 	.word	0x20000a64
 800694c:	00000000 	.word	0x00000000

08006950 <oslib_test_009_004_execute>:
static void oslib_test_009_004_execute(void) {
 8006950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  test_set_step(1);
 8006952:	4c43      	ldr	r4, [pc, #268]	; (8006a60 <oslib_test_009_004_execute+0x110>)
 8006954:	2501      	movs	r5, #1
 8006956:	6025      	str	r5, [r4, #0]
    dmp = chFactoryFindMailbox("mymbx");
 8006958:	f7fe fcaa 	bl	80052b0 <chFactoryFindMailbox.constprop.0>
    test_assert(dmp == NULL, "found");
 800695c:	fab0 f080 	clz	r0, r0
 8006960:	4940      	ldr	r1, [pc, #256]	; (8006a64 <oslib_test_009_004_execute+0x114>)
 8006962:	0940      	lsrs	r0, r0, #5
 8006964:	f7fa f83c 	bl	80009e0 <_test_assert>
 8006968:	b100      	cbz	r0, 800696c <oslib_test_009_004_execute+0x1c>
}
 800696a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  test_set_step(2);
 800696c:	2302      	movs	r3, #2
 800696e:	6023      	str	r3, [r4, #0]
    dmp = chFactoryCreateMailbox("mymbx", 16U);
 8006970:	f7fe fc6e 	bl	8005250 <chFactoryCreateMailbox.constprop.0>
 8006974:	4606      	mov	r6, r0
    test_assert(dmp != NULL, "cannot create");
 8006976:	3800      	subs	r0, #0
 8006978:	bf18      	it	ne
 800697a:	2001      	movne	r0, #1
 800697c:	493a      	ldr	r1, [pc, #232]	; (8006a68 <oslib_test_009_004_execute+0x118>)
 800697e:	f7fa f82f 	bl	80009e0 <_test_assert>
 8006982:	2800      	cmp	r0, #0
 8006984:	d1f1      	bne.n	800696a <oslib_test_009_004_execute+0x1a>
  test_set_step(3);
 8006986:	2303      	movs	r3, #3
 8006988:	6023      	str	r3, [r4, #0]
    dmp1 = chFactoryCreateMailbox("mymbx", 16U);
 800698a:	f7fe fc61 	bl	8005250 <chFactoryCreateMailbox.constprop.0>
    test_assert(dmp1 == NULL, "can create");
 800698e:	fab0 f080 	clz	r0, r0
 8006992:	4936      	ldr	r1, [pc, #216]	; (8006a6c <oslib_test_009_004_execute+0x11c>)
 8006994:	0940      	lsrs	r0, r0, #5
 8006996:	f7fa f823 	bl	80009e0 <_test_assert>
 800699a:	2800      	cmp	r0, #0
 800699c:	d1e5      	bne.n	800696a <oslib_test_009_004_execute+0x1a>
  test_set_step(4);
 800699e:	2304      	movs	r3, #4
 80069a0:	6023      	str	r3, [r4, #0]
    dmp1 = chFactoryFindMailbox("mymbx");
 80069a2:	f7fe fc85 	bl	80052b0 <chFactoryFindMailbox.constprop.0>
 80069a6:	4607      	mov	r7, r0
    test_assert(dmp1 != NULL, "not found");
 80069a8:	3800      	subs	r0, #0
 80069aa:	bf18      	it	ne
 80069ac:	2001      	movne	r0, #1
 80069ae:	4930      	ldr	r1, [pc, #192]	; (8006a70 <oslib_test_009_004_execute+0x120>)
 80069b0:	f7fa f816 	bl	80009e0 <_test_assert>
 80069b4:	2800      	cmp	r0, #0
 80069b6:	d1d8      	bne.n	800696a <oslib_test_009_004_execute+0x1a>
    test_assert(dmp == dmp1, "object reference mismatch");
 80069b8:	1bf0      	subs	r0, r6, r7
 80069ba:	fab0 f080 	clz	r0, r0
 80069be:	492d      	ldr	r1, [pc, #180]	; (8006a74 <oslib_test_009_004_execute+0x124>)
 80069c0:	0940      	lsrs	r0, r0, #5
 80069c2:	f7fa f80d 	bl	80009e0 <_test_assert>
 80069c6:	2800      	cmp	r0, #0
 80069c8:	d1cf      	bne.n	800696a <oslib_test_009_004_execute+0x1a>
    test_assert(dmp1->element.refs == 2, "object reference mismatch");
 80069ca:	6878      	ldr	r0, [r7, #4]
 80069cc:	4929      	ldr	r1, [pc, #164]	; (8006a74 <oslib_test_009_004_execute+0x124>)
 80069ce:	f1a0 0002 	sub.w	r0, r0, #2
 80069d2:	fab0 f080 	clz	r0, r0
 80069d6:	0940      	lsrs	r0, r0, #5
 80069d8:	f7fa f802 	bl	80009e0 <_test_assert>
 80069dc:	2800      	cmp	r0, #0
 80069de:	d1c4      	bne.n	800696a <oslib_test_009_004_execute+0x1a>
 80069e0:	687b      	ldr	r3, [r7, #4]
    test_assert(dmp1 == dmp2, "object reference mismatch");
 80069e2:	4924      	ldr	r1, [pc, #144]	; (8006a74 <oslib_test_009_004_execute+0x124>)
 80069e4:	442b      	add	r3, r5
 80069e6:	4628      	mov	r0, r5
 80069e8:	607b      	str	r3, [r7, #4]
 80069ea:	f7f9 fff9 	bl	80009e0 <_test_assert>
 80069ee:	2800      	cmp	r0, #0
 80069f0:	d1bb      	bne.n	800696a <oslib_test_009_004_execute+0x1a>
    test_assert(dmp2->element.refs == 3, "object reference mismatch");
 80069f2:	6878      	ldr	r0, [r7, #4]
 80069f4:	491f      	ldr	r1, [pc, #124]	; (8006a74 <oslib_test_009_004_execute+0x124>)
 80069f6:	f1a0 0003 	sub.w	r0, r0, #3
 80069fa:	fab0 f080 	clz	r0, r0
 80069fe:	0940      	lsrs	r0, r0, #5
 8006a00:	f7f9 ffee 	bl	80009e0 <_test_assert>
 8006a04:	2800      	cmp	r0, #0
 8006a06:	d1b0      	bne.n	800696a <oslib_test_009_004_execute+0x1a>
    chFactoryReleaseMailbox(dmp2);
 8006a08:	4638      	mov	r0, r7
 8006a0a:	f7ff ff89 	bl	8006920 <chFactoryReleaseMailbox>
    test_assert(dmp1->element.refs == 2, "references mismatch");
 8006a0e:	6878      	ldr	r0, [r7, #4]
 8006a10:	4919      	ldr	r1, [pc, #100]	; (8006a78 <oslib_test_009_004_execute+0x128>)
 8006a12:	f1a0 0002 	sub.w	r0, r0, #2
 8006a16:	fab0 f080 	clz	r0, r0
 8006a1a:	0940      	lsrs	r0, r0, #5
 8006a1c:	f7f9 ffe0 	bl	80009e0 <_test_assert>
 8006a20:	2800      	cmp	r0, #0
 8006a22:	d1a2      	bne.n	800696a <oslib_test_009_004_execute+0x1a>
    chFactoryReleaseMailbox(dmp1);
 8006a24:	4638      	mov	r0, r7
 8006a26:	f7ff ff7b 	bl	8006920 <chFactoryReleaseMailbox>
    test_assert(dmp->element.refs == 1, "references mismatch");
 8006a2a:	6870      	ldr	r0, [r6, #4]
 8006a2c:	4912      	ldr	r1, [pc, #72]	; (8006a78 <oslib_test_009_004_execute+0x128>)
 8006a2e:	1b40      	subs	r0, r0, r5
 8006a30:	fab0 f080 	clz	r0, r0
 8006a34:	0940      	lsrs	r0, r0, #5
 8006a36:	f7f9 ffd3 	bl	80009e0 <_test_assert>
 8006a3a:	2800      	cmp	r0, #0
 8006a3c:	d195      	bne.n	800696a <oslib_test_009_004_execute+0x1a>
    chFactoryReleaseMailbox(dmp);
 8006a3e:	4630      	mov	r0, r6
  test_set_step(5);
 8006a40:	2305      	movs	r3, #5
 8006a42:	6023      	str	r3, [r4, #0]
    chFactoryReleaseMailbox(dmp);
 8006a44:	f7ff ff6c 	bl	8006920 <chFactoryReleaseMailbox>
  test_set_step(6);
 8006a48:	2306      	movs	r3, #6
 8006a4a:	6023      	str	r3, [r4, #0]
    dmp = chFactoryFindMailbox("mymbx");
 8006a4c:	f7fe fc30 	bl	80052b0 <chFactoryFindMailbox.constprop.0>
    test_assert(dmp == NULL, "found");
 8006a50:	fab0 f080 	clz	r0, r0
}
 8006a54:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    test_assert(dmp == NULL, "found");
 8006a58:	4902      	ldr	r1, [pc, #8]	; (8006a64 <oslib_test_009_004_execute+0x114>)
 8006a5a:	0940      	lsrs	r0, r0, #5
 8006a5c:	f7f9 bfc0 	b.w	80009e0 <_test_assert>
 8006a60:	2000149c 	.word	0x2000149c
 8006a64:	0800a160 	.word	0x0800a160
 8006a68:	0800a140 	.word	0x0800a140
 8006a6c:	0800a150 	.word	0x0800a150
 8006a70:	0800a15c 	.word	0x0800a15c
 8006a74:	0800a168 	.word	0x0800a168
 8006a78:	0800a184 	.word	0x0800a184
 8006a7c:	00000000 	.word	0x00000000

08006a80 <oslib_test_009_004_teardown>:
static void oslib_test_009_004_teardown(void) {
 8006a80:	b510      	push	{r4, lr}
  dmp = chFactoryFindMailbox("mymbx");
 8006a82:	f7fe fc15 	bl	80052b0 <chFactoryFindMailbox.constprop.0>
  if (dmp != NULL) {
 8006a86:	b140      	cbz	r0, 8006a9a <oslib_test_009_004_teardown+0x1a>
    while (dmp->element.refs > 0U) {
 8006a88:	6843      	ldr	r3, [r0, #4]
 8006a8a:	4604      	mov	r4, r0
 8006a8c:	b12b      	cbz	r3, 8006a9a <oslib_test_009_004_teardown+0x1a>
      chFactoryReleaseMailbox(dmp);
 8006a8e:	4620      	mov	r0, r4
 8006a90:	f7ff ff46 	bl	8006920 <chFactoryReleaseMailbox>
    while (dmp->element.refs > 0U) {
 8006a94:	6863      	ldr	r3, [r4, #4]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d1f9      	bne.n	8006a8e <oslib_test_009_004_teardown+0xe>
}
 8006a9a:	bd10      	pop	{r4, pc}
 8006a9c:	0000      	movs	r0, r0
	...

08006aa0 <chFactoryReleaseBuffer>:
void chFactoryReleaseBuffer(dyn_buffer_t *dbp) {
 8006aa0:	b510      	push	{r4, lr}
 8006aa2:	4604      	mov	r4, r0
  F_LOCK();
 8006aa4:	4807      	ldr	r0, [pc, #28]	; (8006ac4 <chFactoryReleaseBuffer+0x24>)
 8006aa6:	f7fc fb6b 	bl	8003180 <chMtxLock>
  dep->refs--;
 8006aaa:	6863      	ldr	r3, [r4, #4]
 8006aac:	3b01      	subs	r3, #1
 8006aae:	6063      	str	r3, [r4, #4]
  if (dep->refs == (ucnt_t)0) {
 8006ab0:	b91b      	cbnz	r3, 8006aba <chFactoryReleaseBuffer+0x1a>
 8006ab2:	4905      	ldr	r1, [pc, #20]	; (8006ac8 <chFactoryReleaseBuffer+0x28>)
 8006ab4:	4620      	mov	r0, r4
 8006ab6:	f7ff fda3 	bl	8006600 <dyn_release_object_heap.part.0>
}
 8006aba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  F_UNLOCK();
 8006abe:	4801      	ldr	r0, [pc, #4]	; (8006ac4 <chFactoryReleaseBuffer+0x24>)
 8006ac0:	f7fe b8ee 	b.w	8004ca0 <chMtxUnlock>
 8006ac4:	20000a28 	.word	0x20000a28
 8006ac8:	20000a4c 	.word	0x20000a4c
 8006acc:	00000000 	.word	0x00000000

08006ad0 <oslib_test_009_002_execute>:
static void oslib_test_009_002_execute(void) {
 8006ad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  test_set_step(1);
 8006ad2:	4c43      	ldr	r4, [pc, #268]	; (8006be0 <oslib_test_009_002_execute+0x110>)
 8006ad4:	2501      	movs	r5, #1
 8006ad6:	6025      	str	r5, [r4, #0]
    dbp = chFactoryFindBuffer("mybuf");
 8006ad8:	f7fe fb6a 	bl	80051b0 <chFactoryFindBuffer.constprop.0>
    test_assert(dbp == NULL, "found");
 8006adc:	fab0 f080 	clz	r0, r0
 8006ae0:	4940      	ldr	r1, [pc, #256]	; (8006be4 <oslib_test_009_002_execute+0x114>)
 8006ae2:	0940      	lsrs	r0, r0, #5
 8006ae4:	f7f9 ff7c 	bl	80009e0 <_test_assert>
 8006ae8:	b100      	cbz	r0, 8006aec <oslib_test_009_002_execute+0x1c>
}
 8006aea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  test_set_step(2);
 8006aec:	2302      	movs	r3, #2
 8006aee:	6023      	str	r3, [r4, #0]
    dbp = chFactoryCreateBuffer("mybuf", 128U);
 8006af0:	f7fe fb3e 	bl	8005170 <chFactoryCreateBuffer.constprop.0>
 8006af4:	4606      	mov	r6, r0
    test_assert(dbp != NULL, "cannot create");
 8006af6:	3800      	subs	r0, #0
 8006af8:	bf18      	it	ne
 8006afa:	2001      	movne	r0, #1
 8006afc:	493a      	ldr	r1, [pc, #232]	; (8006be8 <oslib_test_009_002_execute+0x118>)
 8006afe:	f7f9 ff6f 	bl	80009e0 <_test_assert>
 8006b02:	2800      	cmp	r0, #0
 8006b04:	d1f1      	bne.n	8006aea <oslib_test_009_002_execute+0x1a>
  test_set_step(3);
 8006b06:	2303      	movs	r3, #3
 8006b08:	6023      	str	r3, [r4, #0]
    dbp1 = chFactoryCreateBuffer("mybuf", 128U);
 8006b0a:	f7fe fb31 	bl	8005170 <chFactoryCreateBuffer.constprop.0>
    test_assert(dbp1 == NULL, "can create");
 8006b0e:	fab0 f080 	clz	r0, r0
 8006b12:	4936      	ldr	r1, [pc, #216]	; (8006bec <oslib_test_009_002_execute+0x11c>)
 8006b14:	0940      	lsrs	r0, r0, #5
 8006b16:	f7f9 ff63 	bl	80009e0 <_test_assert>
 8006b1a:	2800      	cmp	r0, #0
 8006b1c:	d1e5      	bne.n	8006aea <oslib_test_009_002_execute+0x1a>
  test_set_step(4);
 8006b1e:	2304      	movs	r3, #4
 8006b20:	6023      	str	r3, [r4, #0]
    dbp1 = chFactoryFindBuffer("mybuf");
 8006b22:	f7fe fb45 	bl	80051b0 <chFactoryFindBuffer.constprop.0>
 8006b26:	4607      	mov	r7, r0
    test_assert(dbp1 != NULL, "not found");
 8006b28:	3800      	subs	r0, #0
 8006b2a:	bf18      	it	ne
 8006b2c:	2001      	movne	r0, #1
 8006b2e:	4930      	ldr	r1, [pc, #192]	; (8006bf0 <oslib_test_009_002_execute+0x120>)
 8006b30:	f7f9 ff56 	bl	80009e0 <_test_assert>
 8006b34:	2800      	cmp	r0, #0
 8006b36:	d1d8      	bne.n	8006aea <oslib_test_009_002_execute+0x1a>
    test_assert(dbp == dbp1, "object reference mismatch");
 8006b38:	1bf0      	subs	r0, r6, r7
 8006b3a:	fab0 f080 	clz	r0, r0
 8006b3e:	492d      	ldr	r1, [pc, #180]	; (8006bf4 <oslib_test_009_002_execute+0x124>)
 8006b40:	0940      	lsrs	r0, r0, #5
 8006b42:	f7f9 ff4d 	bl	80009e0 <_test_assert>
 8006b46:	2800      	cmp	r0, #0
 8006b48:	d1cf      	bne.n	8006aea <oslib_test_009_002_execute+0x1a>
    test_assert(dbp1->element.refs == 2, "object reference mismatch");
 8006b4a:	6878      	ldr	r0, [r7, #4]
 8006b4c:	4929      	ldr	r1, [pc, #164]	; (8006bf4 <oslib_test_009_002_execute+0x124>)
 8006b4e:	f1a0 0002 	sub.w	r0, r0, #2
 8006b52:	fab0 f080 	clz	r0, r0
 8006b56:	0940      	lsrs	r0, r0, #5
 8006b58:	f7f9 ff42 	bl	80009e0 <_test_assert>
 8006b5c:	2800      	cmp	r0, #0
 8006b5e:	d1c4      	bne.n	8006aea <oslib_test_009_002_execute+0x1a>
 8006b60:	687b      	ldr	r3, [r7, #4]
    test_assert(dbp1 == dbp2, "object reference mismatch");
 8006b62:	4924      	ldr	r1, [pc, #144]	; (8006bf4 <oslib_test_009_002_execute+0x124>)
 8006b64:	442b      	add	r3, r5
 8006b66:	4628      	mov	r0, r5
 8006b68:	607b      	str	r3, [r7, #4]
 8006b6a:	f7f9 ff39 	bl	80009e0 <_test_assert>
 8006b6e:	2800      	cmp	r0, #0
 8006b70:	d1bb      	bne.n	8006aea <oslib_test_009_002_execute+0x1a>
    test_assert(dbp2->element.refs == 3, "object reference mismatch");
 8006b72:	6878      	ldr	r0, [r7, #4]
 8006b74:	491f      	ldr	r1, [pc, #124]	; (8006bf4 <oslib_test_009_002_execute+0x124>)
 8006b76:	f1a0 0003 	sub.w	r0, r0, #3
 8006b7a:	fab0 f080 	clz	r0, r0
 8006b7e:	0940      	lsrs	r0, r0, #5
 8006b80:	f7f9 ff2e 	bl	80009e0 <_test_assert>
 8006b84:	2800      	cmp	r0, #0
 8006b86:	d1b0      	bne.n	8006aea <oslib_test_009_002_execute+0x1a>
    chFactoryReleaseBuffer(dbp2);
 8006b88:	4638      	mov	r0, r7
 8006b8a:	f7ff ff89 	bl	8006aa0 <chFactoryReleaseBuffer>
    test_assert(dbp1->element.refs == 2, "references mismatch");
 8006b8e:	6878      	ldr	r0, [r7, #4]
 8006b90:	4919      	ldr	r1, [pc, #100]	; (8006bf8 <oslib_test_009_002_execute+0x128>)
 8006b92:	f1a0 0002 	sub.w	r0, r0, #2
 8006b96:	fab0 f080 	clz	r0, r0
 8006b9a:	0940      	lsrs	r0, r0, #5
 8006b9c:	f7f9 ff20 	bl	80009e0 <_test_assert>
 8006ba0:	2800      	cmp	r0, #0
 8006ba2:	d1a2      	bne.n	8006aea <oslib_test_009_002_execute+0x1a>
    chFactoryReleaseBuffer(dbp1);
 8006ba4:	4638      	mov	r0, r7
 8006ba6:	f7ff ff7b 	bl	8006aa0 <chFactoryReleaseBuffer>
    test_assert(dbp->element.refs == 1, "references mismatch");
 8006baa:	6870      	ldr	r0, [r6, #4]
 8006bac:	4912      	ldr	r1, [pc, #72]	; (8006bf8 <oslib_test_009_002_execute+0x128>)
 8006bae:	1b40      	subs	r0, r0, r5
 8006bb0:	fab0 f080 	clz	r0, r0
 8006bb4:	0940      	lsrs	r0, r0, #5
 8006bb6:	f7f9 ff13 	bl	80009e0 <_test_assert>
 8006bba:	2800      	cmp	r0, #0
 8006bbc:	d195      	bne.n	8006aea <oslib_test_009_002_execute+0x1a>
    chFactoryReleaseBuffer(dbp);
 8006bbe:	4630      	mov	r0, r6
  test_set_step(5);
 8006bc0:	2305      	movs	r3, #5
 8006bc2:	6023      	str	r3, [r4, #0]
    chFactoryReleaseBuffer(dbp);
 8006bc4:	f7ff ff6c 	bl	8006aa0 <chFactoryReleaseBuffer>
  test_set_step(6);
 8006bc8:	2306      	movs	r3, #6
 8006bca:	6023      	str	r3, [r4, #0]
    dbp = chFactoryFindBuffer("mybuf");
 8006bcc:	f7fe faf0 	bl	80051b0 <chFactoryFindBuffer.constprop.0>
    test_assert(dbp == NULL, "found");
 8006bd0:	fab0 f080 	clz	r0, r0
}
 8006bd4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    test_assert(dbp == NULL, "found");
 8006bd8:	4902      	ldr	r1, [pc, #8]	; (8006be4 <oslib_test_009_002_execute+0x114>)
 8006bda:	0940      	lsrs	r0, r0, #5
 8006bdc:	f7f9 bf00 	b.w	80009e0 <_test_assert>
 8006be0:	2000149c 	.word	0x2000149c
 8006be4:	0800a160 	.word	0x0800a160
 8006be8:	0800a140 	.word	0x0800a140
 8006bec:	0800a150 	.word	0x0800a150
 8006bf0:	0800a15c 	.word	0x0800a15c
 8006bf4:	0800a168 	.word	0x0800a168
 8006bf8:	0800a184 	.word	0x0800a184
 8006bfc:	00000000 	.word	0x00000000

08006c00 <oslib_test_009_002_teardown>:
static void oslib_test_009_002_teardown(void) {
 8006c00:	b510      	push	{r4, lr}
  dbp = chFactoryFindBuffer("mybuf");
 8006c02:	f7fe fad5 	bl	80051b0 <chFactoryFindBuffer.constprop.0>
  if (dbp != NULL) {
 8006c06:	b140      	cbz	r0, 8006c1a <oslib_test_009_002_teardown+0x1a>
    while (dbp->element.refs > 0U) {
 8006c08:	6843      	ldr	r3, [r0, #4]
 8006c0a:	4604      	mov	r4, r0
 8006c0c:	b12b      	cbz	r3, 8006c1a <oslib_test_009_002_teardown+0x1a>
      chFactoryReleaseBuffer(dbp);
 8006c0e:	4620      	mov	r0, r4
 8006c10:	f7ff ff46 	bl	8006aa0 <chFactoryReleaseBuffer>
    while (dbp->element.refs > 0U) {
 8006c14:	6863      	ldr	r3, [r4, #4]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d1f9      	bne.n	8006c0e <oslib_test_009_002_teardown+0xe>
}
 8006c1a:	bd10      	pop	{r4, pc}
 8006c1c:	0000      	movs	r0, r0
	...

08006c20 <chThdRelease>:
 8006c20:	2220      	movs	r2, #32
 8006c22:	f382 8811 	msr	BASEPRI, r2
  tp->refs--;
 8006c26:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
 8006c2a:	3b01      	subs	r3, #1
 8006c2c:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
  if ((tp->refs == (trefs_t)0) && (tp->state == CH_STATE_FINAL)) {
 8006c30:	6a03      	ldr	r3, [r0, #32]
 8006c32:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8006c36:	2b0f      	cmp	r3, #15
 8006c38:	d003      	beq.n	8006c42 <chThdRelease+0x22>
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	f383 8811 	msr	BASEPRI, r3
 8006c40:	4770      	bx	lr
    REG_REMOVE(tp);
 8006c42:	e9d0 1304 	ldrd	r1, r3, [r0, #16]
void chThdRelease(thread_t *tp) {
 8006c46:	b410      	push	{r4}
    REG_REMOVE(tp);
 8006c48:	6119      	str	r1, [r3, #16]
 8006c4a:	6904      	ldr	r4, [r0, #16]
 8006c4c:	2100      	movs	r1, #0
 8006c4e:	6163      	str	r3, [r4, #20]
 8006c50:	f381 8811 	msr	BASEPRI, r1
    switch (tp->flags & CH_FLAG_MODE_MASK) {
 8006c54:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8006c58:	f003 0303 	and.w	r3, r3, #3
 8006c5c:	2b01      	cmp	r3, #1
 8006c5e:	d00d      	beq.n	8006c7c <chThdRelease+0x5c>
 8006c60:	2b02      	cmp	r3, #2
 8006c62:	d001      	beq.n	8006c68 <chThdRelease+0x48>
}
 8006c64:	bc10      	pop	{r4}
 8006c66:	4770      	bx	lr
      chPoolFree(tp->mpool, chThdGetWorkingAreaX(tp));
 8006c68:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8006c6a:	69c0      	ldr	r0, [r0, #28]
 8006c6c:	f382 8811 	msr	BASEPRI, r2
 8006c70:	681a      	ldr	r2, [r3, #0]
 8006c72:	6002      	str	r2, [r0, #0]
  mp->next = php;
 8006c74:	6018      	str	r0, [r3, #0]
 8006c76:	f381 8811 	msr	BASEPRI, r1
 8006c7a:	e7f3      	b.n	8006c64 <chThdRelease+0x44>
      chHeapFree(chThdGetWorkingAreaX(tp));
 8006c7c:	69c0      	ldr	r0, [r0, #28]
}
 8006c7e:	bc10      	pop	{r4}
      chHeapFree(chThdGetWorkingAreaX(tp));
 8006c80:	f7ff ba9e 	b.w	80061c0 <chHeapFree>
	...

08006c90 <rt_test_011_006_execute>:
static void rt_test_011_006_execute(void) {
 8006c90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  return ch.rlist.current;
 8006c94:	4b17      	ldr	r3, [pc, #92]	; (8006cf4 <rt_test_011_006_execute+0x64>)
  test_set_step(1);
 8006c96:	f8df 906c 	ldr.w	r9, [pc, #108]	; 8006d04 <rt_test_011_006_execute+0x74>
  return chThdGetSelfX()->prio;
 8006c9a:	699b      	ldr	r3, [r3, #24]
      chThdRelease(chThdCreateStatic(wa[0], WA_SIZE, prio, bmk_thread3, NULL));
 8006c9c:	f8df 8068 	ldr.w	r8, [pc, #104]	; 8006d08 <rt_test_011_006_execute+0x78>
  tprio_t prio = chThdGetPriorityX() + 1;
 8006ca0:	689e      	ldr	r6, [r3, #8]
      chThdRelease(chThdCreateStatic(wa[0], WA_SIZE, prio, bmk_thread3, NULL));
 8006ca2:	4f15      	ldr	r7, [pc, #84]	; (8006cf8 <rt_test_011_006_execute+0x68>)
  test_set_step(1);
 8006ca4:	2301      	movs	r3, #1
  tprio_t prio = chThdGetPriorityX() + 1;
 8006ca6:	441e      	add	r6, r3
  test_set_step(1);
 8006ca8:	f8c9 3000 	str.w	r3, [r9]
    start = test_wait_tick();
 8006cac:	f7fc f900 	bl	8002eb0 <test_wait_tick>
    n = 0;
 8006cb0:	2400      	movs	r4, #0
    start = test_wait_tick();
 8006cb2:	4605      	mov	r5, r0
      chThdRelease(chThdCreateStatic(wa[0], WA_SIZE, prio, bmk_thread3, NULL));
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	4642      	mov	r2, r8
 8006cb8:	4631      	mov	r1, r6
 8006cba:	4638      	mov	r0, r7
 8006cbc:	f7fb f9d0 	bl	8002060 <chThdCreateStatic.constprop.0>
 8006cc0:	f7ff ffae 	bl	8006c20 <chThdRelease>
 8006cc4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    } while (chVTIsSystemTimeWithinX(start, end));
 8006cc8:	f242 720f 	movw	r2, #9999	; 0x270f
 8006ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cce:	1b5b      	subs	r3, r3, r5
 8006cd0:	4293      	cmp	r3, r2
      n++;
 8006cd2:	f104 0401 	add.w	r4, r4, #1
    } while (chVTIsSystemTimeWithinX(start, end));
 8006cd6:	d9ed      	bls.n	8006cb4 <rt_test_011_006_execute+0x24>
  test_set_step(2);
 8006cd8:	2302      	movs	r3, #2
    test_print("--- Score : ");
 8006cda:	4808      	ldr	r0, [pc, #32]	; (8006cfc <rt_test_011_006_execute+0x6c>)
  test_set_step(2);
 8006cdc:	f8c9 3000 	str.w	r3, [r9]
    test_print("--- Score : ");
 8006ce0:	f7f9 ffe6 	bl	8000cb0 <test_print>
    test_printn(n);
 8006ce4:	4620      	mov	r0, r4
 8006ce6:	f7f9 ff13 	bl	8000b10 <test_printn>
}
 8006cea:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    test_println(" threads/S");
 8006cee:	4804      	ldr	r0, [pc, #16]	; (8006d00 <rt_test_011_006_execute+0x70>)
 8006cf0:	f7f9 bfbe 	b.w	8000c70 <test_println>
 8006cf4:	200009b0 	.word	0x200009b0
 8006cf8:	20000d88 	.word	0x20000d88
 8006cfc:	08009e84 	.word	0x08009e84
 8006d00:	0800a250 	.word	0x0800a250
 8006d04:	2000149c 	.word	0x2000149c
 8006d08:	080038b1 	.word	0x080038b1
 8006d0c:	00000000 	.word	0x00000000

08006d10 <chThdWait>:
msg_t chThdWait(thread_t *tp) {
 8006d10:	b538      	push	{r3, r4, r5, lr}
 8006d12:	4604      	mov	r4, r0
 8006d14:	2320      	movs	r3, #32
 8006d16:	f383 8811 	msr	BASEPRI, r3
  if (tp->state != CH_STATE_FINAL) {
 8006d1a:	f890 3020 	ldrb.w	r3, [r0, #32]
 8006d1e:	2b0f      	cmp	r3, #15
 8006d20:	d007      	beq.n	8006d32 <chThdWait+0x22>
    list_insert(currp, &tp->waiting);
 8006d22:	4b08      	ldr	r3, [pc, #32]	; (8006d44 <chThdWait+0x34>)
  tp->queue.next = tlp->next;
 8006d24:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8006d26:	699b      	ldr	r3, [r3, #24]
    chSchGoSleepS(CH_STATE_WTEXIT);
 8006d28:	2009      	movs	r0, #9
 8006d2a:	601a      	str	r2, [r3, #0]
  tlp->next = tp;
 8006d2c:	62a3      	str	r3, [r4, #40]	; 0x28
 8006d2e:	f7fb fa7f 	bl	8002230 <chSchGoSleepS>
  msg = tp->u.exitcode;
 8006d32:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8006d34:	2300      	movs	r3, #0
 8006d36:	f383 8811 	msr	BASEPRI, r3
  chThdRelease(tp);
 8006d3a:	4620      	mov	r0, r4
 8006d3c:	f7ff ff70 	bl	8006c20 <chThdRelease>
}
 8006d40:	4628      	mov	r0, r5
 8006d42:	bd38      	pop	{r3, r4, r5, pc}
 8006d44:	200009b0 	.word	0x200009b0
	...

08006d50 <oslib_test_005_001_execute>:
 *   emitted tokens.
 * - [5.1.3] Waiting for the thread to terminate-.
 * .
 */

static void oslib_test_005_001_execute(void) {
 8006d50:	b570      	push	{r4, r5, r6, lr}
  return ch.rlist.current;
 8006d52:	4a4d      	ldr	r2, [pc, #308]	; (8006e88 <oslib_test_005_001_execute+0x138>)
  thread_t *tp;

  /* [5.1.1] Starting the dispatcher thread.*/
  test_set_step(1);
  {
    thread_descriptor_t td = {
 8006d54:	4b4d      	ldr	r3, [pc, #308]	; (8006e8c <oslib_test_005_001_execute+0x13c>)
  return chThdGetSelfX()->prio;
 8006d56:	6992      	ldr	r2, [r2, #24]
 8006d58:	494d      	ldr	r1, [pc, #308]	; (8006e90 <oslib_test_005_001_execute+0x140>)
      .name  = "dispatcher",
      .wbase = waThread1,
      .wend  = THD_WORKING_AREA_END(waThread1),
      .prio  = chThdGetPriorityX() + 1,
 8006d5a:	6892      	ldr	r2, [r2, #8]
  test_set_step(1);
 8006d5c:	4c4d      	ldr	r4, [pc, #308]	; (8006e94 <oslib_test_005_001_execute+0x144>)
    thread_descriptor_t td = {
 8006d5e:	4d4e      	ldr	r5, [pc, #312]	; (8006e98 <oslib_test_005_001_execute+0x148>)
static void oslib_test_005_001_execute(void) {
 8006d60:	b08a      	sub	sp, #40	; 0x28
      .prio  = chThdGetPriorityX() + 1,
 8006d62:	3201      	adds	r2, #1
    thread_descriptor_t td = {
 8006d64:	9305      	str	r3, [sp, #20]
 8006d66:	9207      	str	r2, [sp, #28]
 8006d68:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8006d6c:	2200      	movs	r2, #0
  test_set_step(1);
 8006d6e:	2601      	movs	r6, #1
      .funcp = Thread1,
      .arg   = NULL
    };
    tp = chThdCreate(&td);
 8006d70:	a804      	add	r0, sp, #16
    thread_descriptor_t td = {
 8006d72:	e9cd 1208 	strd	r1, r2, [sp, #32]
 8006d76:	9306      	str	r3, [sp, #24]
 8006d78:	9504      	str	r5, [sp, #16]
  test_set_step(1);
 8006d7a:	6026      	str	r6, [r4, #0]
    tp = chThdCreate(&td);
 8006d7c:	f7fb fa48 	bl	8002210 <chThdCreate>
  }
  test_end_step(1);

  /* [5.1.2] Calling the default veneers, checking the result and the
     emitted tokens.*/
  test_set_step(2);
 8006d80:	2302      	movs	r3, #2
 * @param[in] func      pointer to the function to be called
 * @return              The function return value as a @p msg_t.
 */
static inline msg_t chDelegateCallDirect0(thread_t *tp, delegate_fn0_t func) {

  return chDelegateCallVeneer(tp, __ch_delegate_fn0, func);
 8006d82:	4946      	ldr	r1, [pc, #280]	; (8006e9c <oslib_test_005_001_execute+0x14c>)
 8006d84:	4a46      	ldr	r2, [pc, #280]	; (8006ea0 <oslib_test_005_001_execute+0x150>)
 8006d86:	6023      	str	r3, [r4, #0]
    tp = chThdCreate(&td);
 8006d88:	4605      	mov	r5, r0
 8006d8a:	f7fc f981 	bl	8003090 <chDelegateCallVeneer>
  {
    int retval;

    retval = chDelegateCallDirect0(tp, (delegate_fn0_t)dis_func0);
    test_assert(retval == 0x55AA, "invalid return value");
 8006d8e:	f245 53aa 	movw	r3, #21930	; 0x55aa
 8006d92:	1ac0      	subs	r0, r0, r3
 8006d94:	fab0 f080 	clz	r0, r0
 8006d98:	4942      	ldr	r1, [pc, #264]	; (8006ea4 <oslib_test_005_001_execute+0x154>)
 8006d9a:	0940      	lsrs	r0, r0, #5
 8006d9c:	f7f9 fe20 	bl	80009e0 <_test_assert>
 8006da0:	b108      	cbz	r0, 8006da6 <oslib_test_005_001_execute+0x56>
  {
    msg_t msg = chThdWait(tp);
    test_assert(msg == 0x0FA5, "invalid exit code");
  }
  test_end_step(3);
}
 8006da2:	b00a      	add	sp, #40	; 0x28
 8006da4:	bd70      	pop	{r4, r5, r6, pc}
 * @return              The function return value as a @p msg_t.
 */
static inline msg_t chDelegateCallDirect1(thread_t *tp, delegate_fn1_t func,
                                          msg_t p1) {

  return chDelegateCallVeneer(tp, __ch_delegate_fn1, func, p1);
 8006da6:	4940      	ldr	r1, [pc, #256]	; (8006ea8 <oslib_test_005_001_execute+0x158>)
 8006da8:	4a40      	ldr	r2, [pc, #256]	; (8006eac <oslib_test_005_001_execute+0x15c>)
 8006daa:	2341      	movs	r3, #65	; 0x41
 8006dac:	4628      	mov	r0, r5
 8006dae:	f7fc f96f 	bl	8003090 <chDelegateCallVeneer>
    test_assert(retval == (int)'A', "invalid return value");
 8006db2:	f1a0 0041 	sub.w	r0, r0, #65	; 0x41
 8006db6:	fab0 f080 	clz	r0, r0
 8006dba:	493a      	ldr	r1, [pc, #232]	; (8006ea4 <oslib_test_005_001_execute+0x154>)
 8006dbc:	0940      	lsrs	r0, r0, #5
 8006dbe:	f7f9 fe0f 	bl	80009e0 <_test_assert>
 8006dc2:	2800      	cmp	r0, #0
 8006dc4:	d1ed      	bne.n	8006da2 <oslib_test_005_001_execute+0x52>
 * @return              The function return value as a @p msg_t.
 */
static inline msg_t chDelegateCallDirect2(thread_t *tp, delegate_fn2_t func,
                                          msg_t p1, msg_t p2) {

  return chDelegateCallVeneer(tp, __ch_delegate_fn2, func, p1, p2);
 8006dc6:	2343      	movs	r3, #67	; 0x43
 8006dc8:	4939      	ldr	r1, [pc, #228]	; (8006eb0 <oslib_test_005_001_execute+0x160>)
 8006dca:	9300      	str	r3, [sp, #0]
 8006dcc:	4a39      	ldr	r2, [pc, #228]	; (8006eb4 <oslib_test_005_001_execute+0x164>)
 8006dce:	2342      	movs	r3, #66	; 0x42
 8006dd0:	4628      	mov	r0, r5
 8006dd2:	f7fc f95d 	bl	8003090 <chDelegateCallVeneer>
    test_assert(retval == (int)'B', "invalid return value");
 8006dd6:	f1a0 0042 	sub.w	r0, r0, #66	; 0x42
 8006dda:	fab0 f080 	clz	r0, r0
 8006dde:	4931      	ldr	r1, [pc, #196]	; (8006ea4 <oslib_test_005_001_execute+0x154>)
 8006de0:	0940      	lsrs	r0, r0, #5
 8006de2:	f7f9 fdfd 	bl	80009e0 <_test_assert>
 8006de6:	2800      	cmp	r0, #0
 8006de8:	d1db      	bne.n	8006da2 <oslib_test_005_001_execute+0x52>
 * @return              The function return value as a @p msg_t.
 */
static inline msg_t chDelegateCallDirect3(thread_t *tp, delegate_fn3_t func,
                                          msg_t p1, msg_t p2, msg_t p3) {

  return chDelegateCallVeneer(tp, __ch_delegate_fn3, func, p1, p2, p3);
 8006dea:	2345      	movs	r3, #69	; 0x45
 8006dec:	2246      	movs	r2, #70	; 0x46
 8006dee:	e9cd 3200 	strd	r3, r2, [sp]
 8006df2:	4931      	ldr	r1, [pc, #196]	; (8006eb8 <oslib_test_005_001_execute+0x168>)
 8006df4:	4a31      	ldr	r2, [pc, #196]	; (8006ebc <oslib_test_005_001_execute+0x16c>)
 8006df6:	2344      	movs	r3, #68	; 0x44
 8006df8:	4628      	mov	r0, r5
 8006dfa:	f7fc f949 	bl	8003090 <chDelegateCallVeneer>
    test_assert(retval == (int)'D', "invalid return value");
 8006dfe:	f1a0 0044 	sub.w	r0, r0, #68	; 0x44
 8006e02:	fab0 f080 	clz	r0, r0
 8006e06:	4927      	ldr	r1, [pc, #156]	; (8006ea4 <oslib_test_005_001_execute+0x154>)
 8006e08:	0940      	lsrs	r0, r0, #5
 8006e0a:	f7f9 fde9 	bl	80009e0 <_test_assert>
 8006e0e:	2800      	cmp	r0, #0
 8006e10:	d1c7      	bne.n	8006da2 <oslib_test_005_001_execute+0x52>
 */
static inline msg_t chDelegateCallDirect4(thread_t *tp, delegate_fn4_t func,
                                          msg_t p1, msg_t p2, msg_t p3,
                                          msg_t p4) {

  return chDelegateCallVeneer(tp, __ch_delegate_fn4, func, p1, p2, p3, p4);
 8006e12:	2148      	movs	r1, #72	; 0x48
 8006e14:	2249      	movs	r2, #73	; 0x49
 8006e16:	234a      	movs	r3, #74	; 0x4a
 8006e18:	e88d 000e 	stmia.w	sp, {r1, r2, r3}
 8006e1c:	4628      	mov	r0, r5
 8006e1e:	4928      	ldr	r1, [pc, #160]	; (8006ec0 <oslib_test_005_001_execute+0x170>)
 8006e20:	4a28      	ldr	r2, [pc, #160]	; (8006ec4 <oslib_test_005_001_execute+0x174>)
 8006e22:	2347      	movs	r3, #71	; 0x47
 8006e24:	f7fc f934 	bl	8003090 <chDelegateCallVeneer>
    test_assert(retval == (int)'G', "invalid return value");
 8006e28:	f1a0 0047 	sub.w	r0, r0, #71	; 0x47
 8006e2c:	fab0 f080 	clz	r0, r0
 8006e30:	491c      	ldr	r1, [pc, #112]	; (8006ea4 <oslib_test_005_001_execute+0x154>)
 8006e32:	0940      	lsrs	r0, r0, #5
 8006e34:	f7f9 fdd4 	bl	80009e0 <_test_assert>
 8006e38:	2800      	cmp	r0, #0
 8006e3a:	d1b2      	bne.n	8006da2 <oslib_test_005_001_execute+0x52>
  return chDelegateCallVeneer(tp, __ch_delegate_fn0, func);
 8006e3c:	4917      	ldr	r1, [pc, #92]	; (8006e9c <oslib_test_005_001_execute+0x14c>)
 8006e3e:	4a22      	ldr	r2, [pc, #136]	; (8006ec8 <oslib_test_005_001_execute+0x178>)
 8006e40:	4628      	mov	r0, r5
 8006e42:	f7fc f925 	bl	8003090 <chDelegateCallVeneer>
    test_assert(retval == 0xAA55, "invalid return value");
 8006e46:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8006e4a:	1ac0      	subs	r0, r0, r3
 8006e4c:	fab0 f080 	clz	r0, r0
 8006e50:	4914      	ldr	r1, [pc, #80]	; (8006ea4 <oslib_test_005_001_execute+0x154>)
 8006e52:	0940      	lsrs	r0, r0, #5
 8006e54:	f7f9 fdc4 	bl	80009e0 <_test_assert>
 8006e58:	2800      	cmp	r0, #0
 8006e5a:	d1a2      	bne.n	8006da2 <oslib_test_005_001_execute+0x52>
    test_assert_sequence("0ABCDEFGHIJZ", "unexpected tokens");
 8006e5c:	491b      	ldr	r1, [pc, #108]	; (8006ecc <oslib_test_005_001_execute+0x17c>)
 8006e5e:	481c      	ldr	r0, [pc, #112]	; (8006ed0 <oslib_test_005_001_execute+0x180>)
 8006e60:	f7f9 ff3e 	bl	8000ce0 <_test_assert_sequence>
 8006e64:	2800      	cmp	r0, #0
 8006e66:	d19c      	bne.n	8006da2 <oslib_test_005_001_execute+0x52>
  test_set_step(3);
 8006e68:	2303      	movs	r3, #3
    msg_t msg = chThdWait(tp);
 8006e6a:	4628      	mov	r0, r5
  test_set_step(3);
 8006e6c:	6023      	str	r3, [r4, #0]
    msg_t msg = chThdWait(tp);
 8006e6e:	f7ff ff4f 	bl	8006d10 <chThdWait>
    test_assert(msg == 0x0FA5, "invalid exit code");
 8006e72:	f640 73a5 	movw	r3, #4005	; 0xfa5
 8006e76:	1ac0      	subs	r0, r0, r3
 8006e78:	fab0 f080 	clz	r0, r0
 8006e7c:	4915      	ldr	r1, [pc, #84]	; (8006ed4 <oslib_test_005_001_execute+0x184>)
 8006e7e:	0940      	lsrs	r0, r0, #5
 8006e80:	f7f9 fdae 	bl	80009e0 <_test_assert>
  test_end_step(3);
 8006e84:	e78d      	b.n	8006da2 <oslib_test_005_001_execute+0x52>
 8006e86:	bf00      	nop
 8006e88:	200009b0 	.word	0x200009b0
 8006e8c:	20001888 	.word	0x20001888
 8006e90:	08003861 	.word	0x08003861
 8006e94:	2000149c 	.word	0x2000149c
 8006e98:	0800a25c 	.word	0x0800a25c
 8006e9c:	08000641 	.word	0x08000641
 8006ea0:	08000b71 	.word	0x08000b71
 8006ea4:	0800a268 	.word	0x0800a268
 8006ea8:	08000651 	.word	0x08000651
 8006eac:	08000b81 	.word	0x08000b81
 8006eb0:	08000671 	.word	0x08000671
 8006eb4:	08000b91 	.word	0x08000b91
 8006eb8:	08000691 	.word	0x08000691
 8006ebc:	08000bb1 	.word	0x08000bb1
 8006ec0:	080006b1 	.word	0x080006b1
 8006ec4:	08000bd1 	.word	0x08000bd1
 8006ec8:	08000c01 	.word	0x08000c01
 8006ecc:	08009f24 	.word	0x08009f24
 8006ed0:	0800a280 	.word	0x0800a280
 8006ed4:	0800a290 	.word	0x0800a290
	...

08006ee0 <oslib_test_004_001_execute>:
 * - [4.1.3] Sending jobs with various timings.
 * - [4.1.4] Sending two null jobs to make threads exit.
 * .
 */

static void oslib_test_004_001_execute(void) {
 8006ee0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  mp->next = NULL;
 8006ee4:	4c47      	ldr	r4, [pc, #284]	; (8007004 <oslib_test_004_001_execute+0x124>)
  thread_t *tp1, *tp2;

  /* [4.1.1] Initializing the Jobs Queue object.*/
  test_set_step(1);
 8006ee6:	4f48      	ldr	r7, [pc, #288]	; (8007008 <oslib_test_004_001_execute+0x128>)
  return ch.rlist.current;
 8006ee8:	f8df 8148 	ldr.w	r8, [pc, #328]	; 8007034 <oslib_test_004_001_execute+0x154>
  chGuardedPoolLoadArray(&jqp->free, (void *)jobsbuf, jobsn);
 8006eec:	4947      	ldr	r1, [pc, #284]	; (800700c <oslib_test_004_001_execute+0x12c>)
  tqp->next = (thread_t *)tqp;
 8006eee:	6024      	str	r4, [r4, #0]
 8006ef0:	2500      	movs	r5, #0
  mp->align = align;
 8006ef2:	2204      	movs	r2, #4
  mp->object_size = size;
 8006ef4:	2308      	movs	r3, #8
static void oslib_test_004_001_execute(void) {
 8006ef6:	b08c      	sub	sp, #48	; 0x30
 8006ef8:	4620      	mov	r0, r4
 8006efa:	6123      	str	r3, [r4, #16]
  mp->next = NULL;
 8006efc:	60e5      	str	r5, [r4, #12]
  test_set_step(1);
 8006efe:	2301      	movs	r3, #1
  mp->provider = provider;
 8006f00:	61a5      	str	r5, [r4, #24]
 8006f02:	60a5      	str	r5, [r4, #8]
  mp->align = align;
 8006f04:	6162      	str	r2, [r4, #20]
  tqp->prev = (thread_t *)tqp;
 8006f06:	6064      	str	r4, [r4, #4]
 8006f08:	603b      	str	r3, [r7, #0]
 8006f0a:	f7fd f9f1 	bl	80042f0 <chGuardedPoolLoadArray>
  return chThdGetSelfX()->prio;
 8006f0e:	f8d8 2018 	ldr.w	r2, [r8, #24]
 8006f12:	4b3f      	ldr	r3, [pc, #252]	; (8007010 <oslib_test_004_001_execute+0x130>)
  {
    thread_descriptor_t td1 = {
      .name  = "dispatcher1",
      .wbase = wa1Thread1,
      .wend  = THD_WORKING_AREA_END(wa1Thread1),
      .prio  = chThdGetPriorityX() - 1,
 8006f14:	6892      	ldr	r2, [r2, #8]
    thread_descriptor_t td1 = {
 8006f16:	493f      	ldr	r1, [pc, #252]	; (8007014 <oslib_test_004_001_execute+0x134>)
 8006f18:	61e3      	str	r3, [r4, #28]
  mbp->wrptr  = buf;
 8006f1a:	e9c4 3309 	strd	r3, r3, [r4, #36]	; 0x24
  mbp->top    = &buf[n];
 8006f1e:	3310      	adds	r3, #16
      .prio  = chThdGetPriorityX() - 1,
 8006f20:	3a01      	subs	r2, #1
 8006f22:	6223      	str	r3, [r4, #32]
  test_set_step(2);
 8006f24:	2302      	movs	r3, #2
    thread_descriptor_t td1 = {
 8006f26:	f501 70e4 	add.w	r0, r1, #456	; 0x1c8
  test_set_step(2);
 8006f2a:	603b      	str	r3, [r7, #0]
    thread_descriptor_t td1 = {
 8006f2c:	9209      	str	r2, [sp, #36]	; 0x24
  tqp->next = (thread_t *)tqp;
 8006f2e:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 8006f32:	f104 0234 	add.w	r2, r4, #52	; 0x34
 8006f36:	f8df c100 	ldr.w	ip, [pc, #256]	; 8007038 <oslib_test_004_001_execute+0x158>
 8006f3a:	4e37      	ldr	r6, [pc, #220]	; (8007018 <oslib_test_004_001_execute+0x138>)
  mbp->cnt    = (size_t)0;
 8006f3c:	62e5      	str	r5, [r4, #44]	; 0x2c
  tqp->prev = (thread_t *)tqp;
 8006f3e:	e9c4 220d 	strd	r2, r2, [r4, #52]	; 0x34
 8006f42:	e9c4 330f 	strd	r3, r3, [r4, #60]	; 0x3c
  mbp->reset  = false;
 8006f46:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
 8006f4a:	9008      	str	r0, [sp, #32]
      .funcp = Thread1,
      .arg   = NULL
    };
    tp1 = chThdCreate(&td1);
 8006f4c:	a806      	add	r0, sp, #24
    thread_descriptor_t td1 = {
 8006f4e:	950b      	str	r5, [sp, #44]	; 0x2c
 8006f50:	9107      	str	r1, [sp, #28]
 8006f52:	f8cd c018 	str.w	ip, [sp, #24]
 8006f56:	960a      	str	r6, [sp, #40]	; 0x28
    tp1 = chThdCreate(&td1);
 8006f58:	f7fb f95a 	bl	8002210 <chThdCreate>
 8006f5c:	f8d8 3018 	ldr.w	r3, [r8, #24]

    thread_descriptor_t td2 = {
 8006f60:	4a2e      	ldr	r2, [pc, #184]	; (800701c <oslib_test_004_001_execute+0x13c>)
      .name  = "dispatcher2",
      .wbase = wa2Thread1,
      .wend  = THD_WORKING_AREA_END(wa2Thread1),
      .prio  = chThdGetPriorityX() - 2,
 8006f62:	689b      	ldr	r3, [r3, #8]
    thread_descriptor_t td2 = {
 8006f64:	492e      	ldr	r1, [pc, #184]	; (8007020 <oslib_test_004_001_execute+0x140>)
 8006f66:	9505      	str	r5, [sp, #20]
      .prio  = chThdGetPriorityX() - 2,
 8006f68:	3b02      	subs	r3, #2
    thread_descriptor_t td2 = {
 8006f6a:	f502 75e4 	add.w	r5, r2, #456	; 0x1c8
    tp1 = chThdCreate(&td1);
 8006f6e:	4681      	mov	r9, r0
      .funcp = Thread1,
      .arg   = NULL
    };
    tp2 = chThdCreate(&td2);
 8006f70:	4668      	mov	r0, sp
    thread_descriptor_t td2 = {
 8006f72:	e9cd 2501 	strd	r2, r5, [sp, #4]
 8006f76:	9303      	str	r3, [sp, #12]
 8006f78:	9604      	str	r6, [sp, #16]
 8006f7a:	9100      	str	r1, [sp, #0]
    tp2 = chThdCreate(&td2);
 8006f7c:	f7fb f948 	bl	8002210 <chThdCreate>
 8006f80:	4e28      	ldr	r6, [pc, #160]	; (8007024 <oslib_test_004_001_execute+0x144>)
  }
  test_end_step(2);

  /* [4.1.3] Sending jobs with various timings.*/
  test_set_step(3);
 8006f82:	2303      	movs	r3, #3
    tp2 = chThdCreate(&td2);
 8006f84:	4680      	mov	r8, r0
  test_set_step(3);
 8006f86:	603b      	str	r3, [r7, #0]
  msg = chMBPostTimeout(&jqp->mbx, (msg_t)jp, TIME_IMMEDIATE);
 8006f88:	f104 051c 	add.w	r5, r4, #28
 8006f8c:	f04f 0a61 	mov.w	sl, #97	; 0x61
  return (job_descriptor_t *)chGuardedPoolAllocTimeout(&jqp->free, TIME_INFINITE);
 8006f90:	f04f 31ff 	mov.w	r1, #4294967295
 8006f94:	4620      	mov	r0, r4
 8006f96:	f7fb fae3 	bl	8002560 <chGuardedPoolAllocTimeout>
  msg = chMBPostTimeout(&jqp->mbx, (msg_t)jp, TIME_IMMEDIATE);
 8006f9a:	2200      	movs	r2, #0
    job_descriptor_t *jdp;

    for (i = 0; i < 8; i++) {
      jdp = chJobGet(&jq);
      jdp->jobfunc = job_slow;
      jdp->jobarg  = (void *)('a' + i);
 8006f9c:	e9c0 6a00 	strd	r6, sl, [r0]
  return (job_descriptor_t *)chGuardedPoolAllocTimeout(&jqp->free, TIME_INFINITE);
 8006fa0:	4601      	mov	r1, r0
  msg = chMBPostTimeout(&jqp->mbx, (msg_t)jp, TIME_IMMEDIATE);
 8006fa2:	f10a 0a01 	add.w	sl, sl, #1
 8006fa6:	4628      	mov	r0, r5
 8006fa8:	f7fd fa9a 	bl	80044e0 <chMBPostTimeout>
    for (i = 0; i < 8; i++) {
 8006fac:	f1ba 0f69 	cmp.w	sl, #105	; 0x69
 8006fb0:	d1ee      	bne.n	8006f90 <oslib_test_004_001_execute+0xb0>
    }
  }
  test_end_step(3);

  /* [4.1.4] Sending two null jobs to make threads exit.*/
  test_set_step(4);
 8006fb2:	2304      	movs	r3, #4
  return (job_descriptor_t *)chGuardedPoolAllocTimeout(&jqp->free, TIME_INFINITE);
 8006fb4:	f04f 31ff 	mov.w	r1, #4294967295
 8006fb8:	4812      	ldr	r0, [pc, #72]	; (8007004 <oslib_test_004_001_execute+0x124>)
 8006fba:	603b      	str	r3, [r7, #0]
 8006fbc:	f7fb fad0 	bl	8002560 <chGuardedPoolAllocTimeout>
  {
    job_descriptor_t *jdp;

    jdp = chJobGet(&jq);
    jdp->jobfunc = NULL;
 8006fc0:	2400      	movs	r4, #0
  msg = chMBPostTimeout(&jqp->mbx, (msg_t)jp, TIME_IMMEDIATE);
 8006fc2:	4622      	mov	r2, r4
    jdp->jobarg  = NULL;
 8006fc4:	e9c0 4400 	strd	r4, r4, [r0]
  return (job_descriptor_t *)chGuardedPoolAllocTimeout(&jqp->free, TIME_INFINITE);
 8006fc8:	4601      	mov	r1, r0
  msg = chMBPostTimeout(&jqp->mbx, (msg_t)jp, TIME_IMMEDIATE);
 8006fca:	4817      	ldr	r0, [pc, #92]	; (8007028 <oslib_test_004_001_execute+0x148>)
 8006fcc:	f7fd fa88 	bl	80044e0 <chMBPostTimeout>
  return (job_descriptor_t *)chGuardedPoolAllocTimeout(&jqp->free, TIME_INFINITE);
 8006fd0:	f04f 31ff 	mov.w	r1, #4294967295
 8006fd4:	480b      	ldr	r0, [pc, #44]	; (8007004 <oslib_test_004_001_execute+0x124>)
 8006fd6:	f7fb fac3 	bl	8002560 <chGuardedPoolAllocTimeout>
  msg = chMBPostTimeout(&jqp->mbx, (msg_t)jp, TIME_IMMEDIATE);
 8006fda:	4622      	mov	r2, r4
  return (job_descriptor_t *)chGuardedPoolAllocTimeout(&jqp->free, TIME_INFINITE);
 8006fdc:	4601      	mov	r1, r0
    chJobPost(&jq, jdp);
    jdp = chJobGet(&jq);
    jdp->jobfunc = NULL;
    jdp->jobarg  = NULL;
 8006fde:	e9c0 4400 	strd	r4, r4, [r0]
  msg = chMBPostTimeout(&jqp->mbx, (msg_t)jp, TIME_IMMEDIATE);
 8006fe2:	4811      	ldr	r0, [pc, #68]	; (8007028 <oslib_test_004_001_execute+0x148>)
 8006fe4:	f7fd fa7c 	bl	80044e0 <chMBPostTimeout>
    chJobPost(&jq, jdp);
    (void) chThdWait(tp1);
 8006fe8:	4648      	mov	r0, r9
 8006fea:	f7ff fe91 	bl	8006d10 <chThdWait>
    (void) chThdWait(tp2);
 8006fee:	4640      	mov	r0, r8
 8006ff0:	f7ff fe8e 	bl	8006d10 <chThdWait>
    test_assert_sequence("abcdefgh", "unexpected tokens");
 8006ff4:	490d      	ldr	r1, [pc, #52]	; (800702c <oslib_test_004_001_execute+0x14c>)
 8006ff6:	480e      	ldr	r0, [pc, #56]	; (8007030 <oslib_test_004_001_execute+0x150>)
 8006ff8:	f7f9 fe72 	bl	8000ce0 <_test_assert_sequence>
  }
  test_end_step(4);
}
 8006ffc:	b00c      	add	sp, #48	; 0x30
 8006ffe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007002:	bf00      	nop
 8007004:	20000bec 	.word	0x20000bec
 8007008:	2000149c 	.word	0x2000149c
 800700c:	20000bcc 	.word	0x20000bcc
 8007010:	20000c50 	.word	0x20000c50
 8007014:	200014f8 	.word	0x200014f8
 8007018:	08004491 	.word	0x08004491
 800701c:	200016c0 	.word	0x200016c0
 8007020:	0800a2b0 	.word	0x0800a2b0
 8007024:	08002dd1 	.word	0x08002dd1
 8007028:	20000c08 	.word	0x20000c08
 800702c:	08009f24 	.word	0x08009f24
 8007030:	08009f54 	.word	0x08009f54
 8007034:	200009b0 	.word	0x200009b0
 8007038:	0800a2a4 	.word	0x0800a2a4
 800703c:	00000000 	.word	0x00000000

08007040 <rt_test_011_005_execute>:
static void rt_test_011_005_execute(void) {
 8007040:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  return ch.rlist.current;
 8007044:	4b17      	ldr	r3, [pc, #92]	; (80070a4 <rt_test_011_005_execute+0x64>)
  test_set_step(1);
 8007046:	f8df 906c 	ldr.w	r9, [pc, #108]	; 80070b4 <rt_test_011_005_execute+0x74>
  return chThdGetSelfX()->prio;
 800704a:	699b      	ldr	r3, [r3, #24]
      chThdWait(chThdCreateStatic(wa[0], WA_SIZE, prio, bmk_thread3, NULL));
 800704c:	f8df 8068 	ldr.w	r8, [pc, #104]	; 80070b8 <rt_test_011_005_execute+0x78>
  tprio_t prio = chThdGetPriorityX() - 1;
 8007050:	689e      	ldr	r6, [r3, #8]
      chThdWait(chThdCreateStatic(wa[0], WA_SIZE, prio, bmk_thread3, NULL));
 8007052:	4f15      	ldr	r7, [pc, #84]	; (80070a8 <rt_test_011_005_execute+0x68>)
  test_set_step(1);
 8007054:	2301      	movs	r3, #1
 8007056:	f8c9 3000 	str.w	r3, [r9]
    start = test_wait_tick();
 800705a:	f7fb ff29 	bl	8002eb0 <test_wait_tick>
  tprio_t prio = chThdGetPriorityX() - 1;
 800705e:	3e01      	subs	r6, #1
    start = test_wait_tick();
 8007060:	4605      	mov	r5, r0
    n = 0;
 8007062:	2400      	movs	r4, #0
      chThdWait(chThdCreateStatic(wa[0], WA_SIZE, prio, bmk_thread3, NULL));
 8007064:	2300      	movs	r3, #0
 8007066:	4642      	mov	r2, r8
 8007068:	4631      	mov	r1, r6
 800706a:	4638      	mov	r0, r7
 800706c:	f7fa fff8 	bl	8002060 <chThdCreateStatic.constprop.0>
 8007070:	f7ff fe4e 	bl	8006d10 <chThdWait>
 8007074:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    } while (chVTIsSystemTimeWithinX(start, end));
 8007078:	f242 720f 	movw	r2, #9999	; 0x270f
 800707c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800707e:	1b5b      	subs	r3, r3, r5
 8007080:	4293      	cmp	r3, r2
      n++;
 8007082:	f104 0401 	add.w	r4, r4, #1
    } while (chVTIsSystemTimeWithinX(start, end));
 8007086:	d9ed      	bls.n	8007064 <rt_test_011_005_execute+0x24>
  test_set_step(2);
 8007088:	2302      	movs	r3, #2
    test_print("--- Score : ");
 800708a:	4808      	ldr	r0, [pc, #32]	; (80070ac <rt_test_011_005_execute+0x6c>)
  test_set_step(2);
 800708c:	f8c9 3000 	str.w	r3, [r9]
    test_print("--- Score : ");
 8007090:	f7f9 fe0e 	bl	8000cb0 <test_print>
    test_printn(n);
 8007094:	4620      	mov	r0, r4
 8007096:	f7f9 fd3b 	bl	8000b10 <test_printn>
}
 800709a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    test_println(" threads/S");
 800709e:	4804      	ldr	r0, [pc, #16]	; (80070b0 <rt_test_011_005_execute+0x70>)
 80070a0:	f7f9 bde6 	b.w	8000c70 <test_println>
 80070a4:	200009b0 	.word	0x200009b0
 80070a8:	20000d88 	.word	0x20000d88
 80070ac:	08009e84 	.word	0x08009e84
 80070b0:	0800a250 	.word	0x0800a250
 80070b4:	2000149c 	.word	0x2000149c
 80070b8:	080038b1 	.word	0x080038b1
 80070bc:	00000000 	.word	0x00000000

080070c0 <test_wait_threads>:
void test_wait_threads(void) {
 80070c0:	b570      	push	{r4, r5, r6, lr}
 80070c2:	4c07      	ldr	r4, [pc, #28]	; (80070e0 <test_wait_threads+0x20>)
      threads[i] = NULL;
 80070c4:	2600      	movs	r6, #0
 80070c6:	f104 0514 	add.w	r5, r4, #20
    if (threads[i] != NULL) {
 80070ca:	f854 0b04 	ldr.w	r0, [r4], #4
 80070ce:	b118      	cbz	r0, 80070d8 <test_wait_threads+0x18>
      chThdWait(threads[i]);
 80070d0:	f7ff fe1e 	bl	8006d10 <chThdWait>
      threads[i] = NULL;
 80070d4:	f844 6c04 	str.w	r6, [r4, #-4]
  for (i = 0; i < MAX_THREADS; i++)
 80070d8:	42ac      	cmp	r4, r5
 80070da:	d1f6      	bne.n	80070ca <test_wait_threads+0xa>
}
 80070dc:	bd70      	pop	{r4, r5, r6, pc}
 80070de:	bf00      	nop
 80070e0:	200014b4 	.word	0x200014b4
	...

080070f0 <rt_test_011_008_execute>:
static void rt_test_011_008_execute(void) {
 80070f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  return ch.rlist.current;
 80070f4:	4f2c      	ldr	r7, [pc, #176]	; (80071a8 <rt_test_011_008_execute+0xb8>)
  test_set_step(1);
 80070f6:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 80071c0 <rt_test_011_008_execute+0xd0>
    test_wait_tick();threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
 80070fa:	4e2c      	ldr	r6, [pc, #176]	; (80071ac <rt_test_011_008_execute+0xbc>)
 80070fc:	4d2c      	ldr	r5, [pc, #176]	; (80071b0 <rt_test_011_008_execute+0xc0>)
 80070fe:	4c2d      	ldr	r4, [pc, #180]	; (80071b4 <rt_test_011_008_execute+0xc4>)
static void rt_test_011_008_execute(void) {
 8007100:	b082      	sub	sp, #8
  test_set_step(1);
 8007102:	2201      	movs	r2, #1
    n = 0;
 8007104:	2300      	movs	r3, #0
  test_set_step(1);
 8007106:	f8c8 2000 	str.w	r2, [r8]
    n = 0;
 800710a:	9301      	str	r3, [sp, #4]
    test_wait_tick();threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
 800710c:	f7fb fed0 	bl	8002eb0 <test_wait_tick>
  return chThdGetSelfX()->prio;
 8007110:	69bb      	ldr	r3, [r7, #24]
 8007112:	6899      	ldr	r1, [r3, #8]
 8007114:	4632      	mov	r2, r6
 8007116:	ab01      	add	r3, sp, #4
 8007118:	3901      	subs	r1, #1
 800711a:	4628      	mov	r0, r5
 800711c:	f7fa ffa0 	bl	8002060 <chThdCreateStatic.constprop.0>
 8007120:	69bb      	ldr	r3, [r7, #24]
 8007122:	6020      	str	r0, [r4, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
 8007124:	6899      	ldr	r1, [r3, #8]
 8007126:	4632      	mov	r2, r6
 8007128:	ab01      	add	r3, sp, #4
 800712a:	3901      	subs	r1, #1
 800712c:	f505 70a4 	add.w	r0, r5, #328	; 0x148
 8007130:	f7fa ff96 	bl	8002060 <chThdCreateStatic.constprop.0>
 8007134:	69bb      	ldr	r3, [r7, #24]
 8007136:	6060      	str	r0, [r4, #4]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
 8007138:	6899      	ldr	r1, [r3, #8]
 800713a:	4632      	mov	r2, r6
 800713c:	ab01      	add	r3, sp, #4
 800713e:	3901      	subs	r1, #1
 8007140:	f505 7024 	add.w	r0, r5, #656	; 0x290
 8007144:	f7fa ff8c 	bl	8002060 <chThdCreateStatic.constprop.0>
 8007148:	69bb      	ldr	r3, [r7, #24]
 800714a:	60a0      	str	r0, [r4, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
 800714c:	6899      	ldr	r1, [r3, #8]
 800714e:	4632      	mov	r2, r6
 8007150:	ab01      	add	r3, sp, #4
 8007152:	3901      	subs	r1, #1
 8007154:	f505 7076 	add.w	r0, r5, #984	; 0x3d8
 8007158:	f7fa ff82 	bl	8002060 <chThdCreateStatic.constprop.0>
 800715c:	69bb      	ldr	r3, [r7, #24]
 800715e:	60e0      	str	r0, [r4, #12]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
 8007160:	6899      	ldr	r1, [r3, #8]
 8007162:	4632      	mov	r2, r6
 8007164:	3901      	subs	r1, #1
 8007166:	ab01      	add	r3, sp, #4
 8007168:	f505 60a4 	add.w	r0, r5, #1312	; 0x520
 800716c:	f7fa ff78 	bl	8002060 <chThdCreateStatic.constprop.0>
  test_set_step(2);
 8007170:	2302      	movs	r3, #2
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
 8007172:	4602      	mov	r2, r0
    chThdSleepSeconds(1);
 8007174:	f242 7010 	movw	r0, #10000	; 0x2710
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
 8007178:	6122      	str	r2, [r4, #16]
  test_set_step(2);
 800717a:	f8c8 3000 	str.w	r3, [r8]
    chThdSleepSeconds(1);
 800717e:	f7fb fbcf 	bl	8002920 <chThdSleep>
    test_terminate_threads();
 8007182:	f7f9 fc75 	bl	8000a70 <test_terminate_threads>
    test_wait_threads();
 8007186:	f7ff ff9b 	bl	80070c0 <test_wait_threads>
  test_set_step(3);
 800718a:	2303      	movs	r3, #3
    test_print("--- Score : ");
 800718c:	480a      	ldr	r0, [pc, #40]	; (80071b8 <rt_test_011_008_execute+0xc8>)
  test_set_step(3);
 800718e:	f8c8 3000 	str.w	r3, [r8]
    test_print("--- Score : ");
 8007192:	f7f9 fd8d 	bl	8000cb0 <test_print>
    test_printn(n);
 8007196:	9801      	ldr	r0, [sp, #4]
 8007198:	f7f9 fcba 	bl	8000b10 <test_printn>
    test_println(" ctxswc/S");
 800719c:	4807      	ldr	r0, [pc, #28]	; (80071bc <rt_test_011_008_execute+0xcc>)
 800719e:	f7f9 fd67 	bl	8000c70 <test_println>
}
 80071a2:	b002      	add	sp, #8
 80071a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80071a8:	200009b0 	.word	0x200009b0
 80071ac:	08001fd1 	.word	0x08001fd1
 80071b0:	20000d88 	.word	0x20000d88
 80071b4:	200014b4 	.word	0x200014b4
 80071b8:	08009e84 	.word	0x08009e84
 80071bc:	0800a2bc 	.word	0x0800a2bc
 80071c0:	2000149c 	.word	0x2000149c
	...

080071d0 <rt_test_011_007_execute>:
static void rt_test_011_007_execute(void) {
 80071d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  return ch.rlist.current;
 80071d4:	4d35      	ldr	r5, [pc, #212]	; (80072ac <rt_test_011_007_execute+0xdc>)
  test_set_step(1);
 80071d6:	4f36      	ldr	r7, [pc, #216]	; (80072b0 <rt_test_011_007_execute+0xe0>)
  return chThdGetSelfX()->prio;
 80071d8:	69ab      	ldr	r3, [r5, #24]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, bmk_thread7, NULL);
 80071da:	4a36      	ldr	r2, [pc, #216]	; (80072b4 <rt_test_011_007_execute+0xe4>)
 80071dc:	6899      	ldr	r1, [r3, #8]
 80071de:	4836      	ldr	r0, [pc, #216]	; (80072b8 <rt_test_011_007_execute+0xe8>)
 80071e0:	4c36      	ldr	r4, [pc, #216]	; (80072bc <rt_test_011_007_execute+0xec>)
 80071e2:	4e37      	ldr	r6, [pc, #220]	; (80072c0 <rt_test_011_007_execute+0xf0>)
  test_set_step(1);
 80071e4:	2301      	movs	r3, #1
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, bmk_thread7, NULL);
 80071e6:	3105      	adds	r1, #5
  test_set_step(1);
 80071e8:	603b      	str	r3, [r7, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, bmk_thread7, NULL);
 80071ea:	2300      	movs	r3, #0
 80071ec:	f7fa ff38 	bl	8002060 <chThdCreateStatic.constprop.0>
 80071f0:	69a9      	ldr	r1, [r5, #24]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+4, bmk_thread7, NULL);
 80071f2:	4a30      	ldr	r2, [pc, #192]	; (80072b4 <rt_test_011_007_execute+0xe4>)
 80071f4:	6889      	ldr	r1, [r1, #8]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, bmk_thread7, NULL);
 80071f6:	4603      	mov	r3, r0
 80071f8:	6023      	str	r3, [r4, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+4, bmk_thread7, NULL);
 80071fa:	3104      	adds	r1, #4
 80071fc:	2300      	movs	r3, #0
 80071fe:	4831      	ldr	r0, [pc, #196]	; (80072c4 <rt_test_011_007_execute+0xf4>)
 8007200:	f7fa ff2e 	bl	8002060 <chThdCreateStatic.constprop.0>
 8007204:	69a9      	ldr	r1, [r5, #24]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()+3, bmk_thread7, NULL);
 8007206:	4a2b      	ldr	r2, [pc, #172]	; (80072b4 <rt_test_011_007_execute+0xe4>)
 8007208:	6889      	ldr	r1, [r1, #8]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+4, bmk_thread7, NULL);
 800720a:	4603      	mov	r3, r0
 800720c:	6063      	str	r3, [r4, #4]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()+3, bmk_thread7, NULL);
 800720e:	3103      	adds	r1, #3
 8007210:	2300      	movs	r3, #0
 8007212:	482d      	ldr	r0, [pc, #180]	; (80072c8 <rt_test_011_007_execute+0xf8>)
 8007214:	f7fa ff24 	bl	8002060 <chThdCreateStatic.constprop.0>
 8007218:	69a9      	ldr	r1, [r5, #24]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()+2, bmk_thread7, NULL);
 800721a:	4a26      	ldr	r2, [pc, #152]	; (80072b4 <rt_test_011_007_execute+0xe4>)
 800721c:	6889      	ldr	r1, [r1, #8]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()+3, bmk_thread7, NULL);
 800721e:	4603      	mov	r3, r0
 8007220:	60a3      	str	r3, [r4, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()+2, bmk_thread7, NULL);
 8007222:	3102      	adds	r1, #2
 8007224:	2300      	movs	r3, #0
 8007226:	4829      	ldr	r0, [pc, #164]	; (80072cc <rt_test_011_007_execute+0xfc>)
 8007228:	f7fa ff1a 	bl	8002060 <chThdCreateStatic.constprop.0>
 800722c:	69a9      	ldr	r1, [r5, #24]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()+1, bmk_thread7, NULL);
 800722e:	4a21      	ldr	r2, [pc, #132]	; (80072b4 <rt_test_011_007_execute+0xe4>)
 8007230:	6889      	ldr	r1, [r1, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()+2, bmk_thread7, NULL);
 8007232:	4603      	mov	r3, r0
 8007234:	60e3      	str	r3, [r4, #12]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()+1, bmk_thread7, NULL);
 8007236:	3101      	adds	r1, #1
 8007238:	2300      	movs	r3, #0
 800723a:	4825      	ldr	r0, [pc, #148]	; (80072d0 <rt_test_011_007_execute+0x100>)
 800723c:	f7fa ff10 	bl	8002060 <chThdCreateStatic.constprop.0>
  test_set_step(2);
 8007240:	2302      	movs	r3, #2
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()+1, bmk_thread7, NULL);
 8007242:	6120      	str	r0, [r4, #16]
  test_set_step(2);
 8007244:	603b      	str	r3, [r7, #0]
    start = test_wait_tick();
 8007246:	f7fb fe33 	bl	8002eb0 <test_wait_tick>
    n = 0;
 800724a:	2400      	movs	r4, #0
    start = test_wait_tick();
 800724c:	4605      	mov	r5, r0
 800724e:	f04f 4880 	mov.w	r8, #1073741824	; 0x40000000
 8007252:	2100      	movs	r1, #0
 8007254:	4630      	mov	r0, r6
 8007256:	f7fc fb63 	bl	8003920 <chSemResetWithMessage.constprop.0>
 800725a:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
    } while (chVTIsSystemTimeWithinX(start, end));
 800725e:	f242 720f 	movw	r2, #9999	; 0x270f
 8007262:	1b5b      	subs	r3, r3, r5
 8007264:	4293      	cmp	r3, r2
      n++;
 8007266:	f104 0401 	add.w	r4, r4, #1
    } while (chVTIsSystemTimeWithinX(start, end));
 800726a:	d9f2      	bls.n	8007252 <rt_test_011_007_execute+0x82>
  test_set_step(3);
 800726c:	2303      	movs	r3, #3
 800726e:	603b      	str	r3, [r7, #0]
    test_terminate_threads();
 8007270:	f7f9 fbfe 	bl	8000a70 <test_terminate_threads>
 8007274:	2100      	movs	r1, #0
 8007276:	4812      	ldr	r0, [pc, #72]	; (80072c0 <rt_test_011_007_execute+0xf0>)
 8007278:	f7fc fb52 	bl	8003920 <chSemResetWithMessage.constprop.0>
    test_wait_threads();
 800727c:	f7ff ff20 	bl	80070c0 <test_wait_threads>
  test_set_step(4);
 8007280:	2304      	movs	r3, #4
    test_print("--- Score : ");
 8007282:	4814      	ldr	r0, [pc, #80]	; (80072d4 <rt_test_011_007_execute+0x104>)
  test_set_step(4);
 8007284:	603b      	str	r3, [r7, #0]
    test_print("--- Score : ");
 8007286:	f7f9 fd13 	bl	8000cb0 <test_print>
    test_printn(n);
 800728a:	4620      	mov	r0, r4
 800728c:	f7f9 fc40 	bl	8000b10 <test_printn>
    test_printn(n * 6);
 8007290:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    test_print(" reschedules/S, ");
 8007294:	4810      	ldr	r0, [pc, #64]	; (80072d8 <rt_test_011_007_execute+0x108>)
 8007296:	f7f9 fd0b 	bl	8000cb0 <test_print>
    test_printn(n * 6);
 800729a:	0060      	lsls	r0, r4, #1
 800729c:	f7f9 fc38 	bl	8000b10 <test_printn>
}
 80072a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    test_println(" ctxswc/S");
 80072a4:	480d      	ldr	r0, [pc, #52]	; (80072dc <rt_test_011_007_execute+0x10c>)
 80072a6:	f7f9 bce3 	b.w	8000c70 <test_println>
 80072aa:	bf00      	nop
 80072ac:	200009b0 	.word	0x200009b0
 80072b0:	2000149c 	.word	0x2000149c
 80072b4:	08003391 	.word	0x08003391
 80072b8:	20000d88 	.word	0x20000d88
 80072bc:	200014b4 	.word	0x200014b4
 80072c0:	20000d7c 	.word	0x20000d7c
 80072c4:	20000ed0 	.word	0x20000ed0
 80072c8:	20001018 	.word	0x20001018
 80072cc:	20001160 	.word	0x20001160
 80072d0:	200012a8 	.word	0x200012a8
 80072d4:	08009e84 	.word	0x08009e84
 80072d8:	0800a2c8 	.word	0x0800a2c8
 80072dc:	0800a2bc 	.word	0x0800a2bc

080072e0 <rt_test_011_004_execute>:
  return ch.rlist.current;
 80072e0:	4b2b      	ldr	r3, [pc, #172]	; (8007390 <rt_test_011_004_execute+0xb0>)
    tp = threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1,
 80072e2:	4a2c      	ldr	r2, [pc, #176]	; (8007394 <rt_test_011_004_execute+0xb4>)
  return chThdGetSelfX()->prio;
 80072e4:	699b      	ldr	r3, [r3, #24]
 80072e6:	482c      	ldr	r0, [pc, #176]	; (8007398 <rt_test_011_004_execute+0xb8>)
 80072e8:	6899      	ldr	r1, [r3, #8]
static void rt_test_011_004_execute(void) {
 80072ea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  test_set_step(1);
 80072ee:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 80073a8 <rt_test_011_004_execute+0xc8>
    tp = threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1,
 80072f2:	3101      	adds	r1, #1
  test_set_step(1);
 80072f4:	2401      	movs	r4, #1
    tp = threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1,
 80072f6:	2300      	movs	r3, #0
  test_set_step(1);
 80072f8:	f8ca 4000 	str.w	r4, [sl]
    tp = threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1,
 80072fc:	f7fa feb0 	bl	8002060 <chThdCreateStatic.constprop.0>
 8007300:	4a26      	ldr	r2, [pc, #152]	; (800739c <rt_test_011_004_execute+0xbc>)
  test_set_step(2);
 8007302:	2302      	movs	r3, #2
    tp = threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1,
 8007304:	4604      	mov	r4, r0
 8007306:	6010      	str	r0, [r2, #0]
  test_set_step(2);
 8007308:	f8ca 3000 	str.w	r3, [sl]
    start = test_wait_tick();
 800730c:	f7fb fdd0 	bl	8002eb0 <test_wait_tick>
    n = 0;
 8007310:	2500      	movs	r5, #0
    start = test_wait_tick();
 8007312:	4606      	mov	r6, r0
      chSchWakeupS(tp, MSG_OK);
 8007314:	462f      	mov	r7, r5
 8007316:	f04f 0820 	mov.w	r8, #32
 800731a:	f04f 4980 	mov.w	r9, #1073741824	; 0x40000000
 800731e:	f388 8811 	msr	BASEPRI, r8
 8007322:	2100      	movs	r1, #0
 8007324:	4620      	mov	r0, r4
 8007326:	f7fa fe6b 	bl	8002000 <chSchWakeupS>
      chSchWakeupS(tp, MSG_OK);
 800732a:	4620      	mov	r0, r4
 800732c:	2100      	movs	r1, #0
 800732e:	f7fa fe67 	bl	8002000 <chSchWakeupS>
      chSchWakeupS(tp, MSG_OK);
 8007332:	4620      	mov	r0, r4
 8007334:	2100      	movs	r1, #0
 8007336:	f7fa fe63 	bl	8002000 <chSchWakeupS>
      chSchWakeupS(tp, MSG_OK);
 800733a:	4620      	mov	r0, r4
 800733c:	2100      	movs	r1, #0
 800733e:	f7fa fe5f 	bl	8002000 <chSchWakeupS>
 8007342:	f387 8811 	msr	BASEPRI, r7
 8007346:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
    } while (chVTIsSystemTimeWithinX(start, end));
 800734a:	f242 720f 	movw	r2, #9999	; 0x270f
 800734e:	1b9b      	subs	r3, r3, r6
 8007350:	4293      	cmp	r3, r2
      n += 4;
 8007352:	f105 0504 	add.w	r5, r5, #4
    } while (chVTIsSystemTimeWithinX(start, end));
 8007356:	d9e2      	bls.n	800731e <rt_test_011_004_execute+0x3e>
  test_set_step(3);
 8007358:	2303      	movs	r3, #3
 800735a:	f8ca 3000 	str.w	r3, [sl]
 800735e:	f388 8811 	msr	BASEPRI, r8
    chSchWakeupS(tp, MSG_TIMEOUT);
 8007362:	f04f 31ff 	mov.w	r1, #4294967295
 8007366:	4620      	mov	r0, r4
 8007368:	f7fa fe4a 	bl	8002000 <chSchWakeupS>
 800736c:	f387 8811 	msr	BASEPRI, r7
    test_wait_threads();
 8007370:	f7ff fea6 	bl	80070c0 <test_wait_threads>
  test_set_step(4);
 8007374:	2304      	movs	r3, #4
    test_print("--- Score : ");
 8007376:	480a      	ldr	r0, [pc, #40]	; (80073a0 <rt_test_011_004_execute+0xc0>)
  test_set_step(4);
 8007378:	f8ca 3000 	str.w	r3, [sl]
    test_print("--- Score : ");
 800737c:	f7f9 fc98 	bl	8000cb0 <test_print>
    test_printn(n * 2);
 8007380:	0068      	lsls	r0, r5, #1
 8007382:	f7f9 fbc5 	bl	8000b10 <test_printn>
}
 8007386:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    test_println(" ctxswc/S");
 800738a:	4806      	ldr	r0, [pc, #24]	; (80073a4 <rt_test_011_004_execute+0xc4>)
 800738c:	f7f9 bc70 	b.w	8000c70 <test_println>
 8007390:	200009b0 	.word	0x200009b0
 8007394:	08002321 	.word	0x08002321
 8007398:	20000d88 	.word	0x20000d88
 800739c:	200014b4 	.word	0x200014b4
 80073a0:	08009e84 	.word	0x08009e84
 80073a4:	0800a2bc 	.word	0x0800a2bc
 80073a8:	2000149c 	.word	0x2000149c
 80073ac:	00000000 	.word	0x00000000

080073b0 <rt_test_011_003_execute>:
static void rt_test_011_003_execute(void) {
 80073b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  return ch.rlist.current;
 80073b4:	4e2d      	ldr	r6, [pc, #180]	; (800746c <rt_test_011_003_execute+0xbc>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, bmk_thread1, NULL);
 80073b6:	4d2e      	ldr	r5, [pc, #184]	; (8007470 <rt_test_011_003_execute+0xc0>)
  return chThdGetSelfX()->prio;
 80073b8:	69b3      	ldr	r3, [r6, #24]
  test_set_step(1);
 80073ba:	4f2e      	ldr	r7, [pc, #184]	; (8007474 <rt_test_011_003_execute+0xc4>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, bmk_thread1, NULL);
 80073bc:	6899      	ldr	r1, [r3, #8]
 80073be:	4a2e      	ldr	r2, [pc, #184]	; (8007478 <rt_test_011_003_execute+0xc8>)
 80073c0:	4c2e      	ldr	r4, [pc, #184]	; (800747c <rt_test_011_003_execute+0xcc>)
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-2, bmk_thread3, NULL);
 80073c2:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 800748c <rt_test_011_003_execute+0xdc>
  test_set_step(1);
 80073c6:	f04f 0c01 	mov.w	ip, #1
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, bmk_thread1, NULL);
 80073ca:	3101      	adds	r1, #1
 80073cc:	4628      	mov	r0, r5
 80073ce:	2300      	movs	r3, #0
  test_set_step(1);
 80073d0:	f8c7 c000 	str.w	ip, [r7]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, bmk_thread1, NULL);
 80073d4:	f7fa fe44 	bl	8002060 <chThdCreateStatic.constprop.0>
 80073d8:	69b3      	ldr	r3, [r6, #24]
 80073da:	6020      	str	r0, [r4, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-2, bmk_thread3, NULL);
 80073dc:	6899      	ldr	r1, [r3, #8]
  test_set_step(2);
 80073de:	f04f 0c02 	mov.w	ip, #2
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-2, bmk_thread3, NULL);
 80073e2:	4642      	mov	r2, r8
 80073e4:	3902      	subs	r1, #2
 80073e6:	f505 70a4 	add.w	r0, r5, #328	; 0x148
 80073ea:	2300      	movs	r3, #0
  test_set_step(2);
 80073ec:	f8c7 c000 	str.w	ip, [r7]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-2, bmk_thread3, NULL);
 80073f0:	f7fa fe36 	bl	8002060 <chThdCreateStatic.constprop.0>
 80073f4:	69b3      	ldr	r3, [r6, #24]
 80073f6:	6060      	str	r0, [r4, #4]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, bmk_thread3, NULL);
 80073f8:	6899      	ldr	r1, [r3, #8]
 80073fa:	4642      	mov	r2, r8
 80073fc:	3903      	subs	r1, #3
 80073fe:	f505 7024 	add.w	r0, r5, #656	; 0x290
 8007402:	2300      	movs	r3, #0
 8007404:	f7fa fe2c 	bl	8002060 <chThdCreateStatic.constprop.0>
 8007408:	69b3      	ldr	r3, [r6, #24]
 800740a:	60a0      	str	r0, [r4, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-4, bmk_thread3, NULL);
 800740c:	6899      	ldr	r1, [r3, #8]
 800740e:	4642      	mov	r2, r8
 8007410:	3904      	subs	r1, #4
 8007412:	f505 7076 	add.w	r0, r5, #984	; 0x3d8
 8007416:	2300      	movs	r3, #0
 8007418:	f7fa fe22 	bl	8002060 <chThdCreateStatic.constprop.0>
 800741c:	69b3      	ldr	r3, [r6, #24]
 800741e:	60e0      	str	r0, [r4, #12]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-5, bmk_thread3, NULL);
 8007420:	6899      	ldr	r1, [r3, #8]
 8007422:	4642      	mov	r2, r8
 8007424:	3905      	subs	r1, #5
 8007426:	f505 60a4 	add.w	r0, r5, #1312	; 0x520
 800742a:	2300      	movs	r3, #0
 800742c:	f7fa fe18 	bl	8002060 <chThdCreateStatic.constprop.0>
  test_set_step(3);
 8007430:	2303      	movs	r3, #3
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-5, bmk_thread3, NULL);
 8007432:	4602      	mov	r2, r0
    n = msg_loop_test(threads[0]);
 8007434:	6820      	ldr	r0, [r4, #0]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-5, bmk_thread3, NULL);
 8007436:	6122      	str	r2, [r4, #16]
  test_set_step(3);
 8007438:	603b      	str	r3, [r7, #0]
    n = msg_loop_test(threads[0]);
 800743a:	f7fb fdf1 	bl	8003020 <msg_loop_test>
 800743e:	4604      	mov	r4, r0
    test_wait_threads();
 8007440:	f7ff fe3e 	bl	80070c0 <test_wait_threads>
  test_set_step(4);
 8007444:	2304      	movs	r3, #4
    test_print("--- Score : ");
 8007446:	480e      	ldr	r0, [pc, #56]	; (8007480 <rt_test_011_003_execute+0xd0>)
  test_set_step(4);
 8007448:	603b      	str	r3, [r7, #0]
    test_print("--- Score : ");
 800744a:	f7f9 fc31 	bl	8000cb0 <test_print>
    test_printn(n);
 800744e:	4620      	mov	r0, r4
 8007450:	f7f9 fb5e 	bl	8000b10 <test_printn>
    test_print(" msgs/S, ");
 8007454:	480b      	ldr	r0, [pc, #44]	; (8007484 <rt_test_011_003_execute+0xd4>)
 8007456:	f7f9 fc2b 	bl	8000cb0 <test_print>
    test_printn(n << 1);
 800745a:	0060      	lsls	r0, r4, #1
 800745c:	f7f9 fb58 	bl	8000b10 <test_printn>
}
 8007460:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    test_println(" ctxswc/S");
 8007464:	4808      	ldr	r0, [pc, #32]	; (8007488 <rt_test_011_003_execute+0xd8>)
 8007466:	f7f9 bc03 	b.w	8000c70 <test_println>
 800746a:	bf00      	nop
 800746c:	200009b0 	.word	0x200009b0
 8007470:	20000d88 	.word	0x20000d88
 8007474:	2000149c 	.word	0x2000149c
 8007478:	08002fb1 	.word	0x08002fb1
 800747c:	200014b4 	.word	0x200014b4
 8007480:	08009e84 	.word	0x08009e84
 8007484:	0800a2dc 	.word	0x0800a2dc
 8007488:	0800a2bc 	.word	0x0800a2bc
 800748c:	080038b1 	.word	0x080038b1

08007490 <rt_test_011_002_execute>:
static void rt_test_011_002_execute(void) {
 8007490:	b538      	push	{r3, r4, r5, lr}
  return ch.rlist.current;
 8007492:	4b14      	ldr	r3, [pc, #80]	; (80074e4 <rt_test_011_002_execute+0x54>)
  test_set_step(1);
 8007494:	4d14      	ldr	r5, [pc, #80]	; (80074e8 <rt_test_011_002_execute+0x58>)
  return chThdGetSelfX()->prio;
 8007496:	699b      	ldr	r3, [r3, #24]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, bmk_thread1, NULL);
 8007498:	4a14      	ldr	r2, [pc, #80]	; (80074ec <rt_test_011_002_execute+0x5c>)
 800749a:	6899      	ldr	r1, [r3, #8]
 800749c:	4814      	ldr	r0, [pc, #80]	; (80074f0 <rt_test_011_002_execute+0x60>)
 800749e:	3101      	adds	r1, #1
  test_set_step(1);
 80074a0:	2401      	movs	r4, #1
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, bmk_thread1, NULL);
 80074a2:	2300      	movs	r3, #0
  test_set_step(1);
 80074a4:	602c      	str	r4, [r5, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, bmk_thread1, NULL);
 80074a6:	f7fa fddb 	bl	8002060 <chThdCreateStatic.constprop.0>
 80074aa:	4b12      	ldr	r3, [pc, #72]	; (80074f4 <rt_test_011_002_execute+0x64>)
  test_set_step(2);
 80074ac:	2202      	movs	r2, #2
 80074ae:	602a      	str	r2, [r5, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, bmk_thread1, NULL);
 80074b0:	6018      	str	r0, [r3, #0]
    n = msg_loop_test(threads[0]);
 80074b2:	f7fb fdb5 	bl	8003020 <msg_loop_test>
 80074b6:	4604      	mov	r4, r0
    test_wait_threads();
 80074b8:	f7ff fe02 	bl	80070c0 <test_wait_threads>
  test_set_step(3);
 80074bc:	2303      	movs	r3, #3
    test_print("--- Score : ");
 80074be:	480e      	ldr	r0, [pc, #56]	; (80074f8 <rt_test_011_002_execute+0x68>)
  test_set_step(3);
 80074c0:	602b      	str	r3, [r5, #0]
    test_print("--- Score : ");
 80074c2:	f7f9 fbf5 	bl	8000cb0 <test_print>
    test_printn(n);
 80074c6:	4620      	mov	r0, r4
 80074c8:	f7f9 fb22 	bl	8000b10 <test_printn>
    test_print(" msgs/S, ");
 80074cc:	480b      	ldr	r0, [pc, #44]	; (80074fc <rt_test_011_002_execute+0x6c>)
 80074ce:	f7f9 fbef 	bl	8000cb0 <test_print>
    test_printn(n << 1);
 80074d2:	0060      	lsls	r0, r4, #1
 80074d4:	f7f9 fb1c 	bl	8000b10 <test_printn>
}
 80074d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    test_println(" ctxswc/S");
 80074dc:	4808      	ldr	r0, [pc, #32]	; (8007500 <rt_test_011_002_execute+0x70>)
 80074de:	f7f9 bbc7 	b.w	8000c70 <test_println>
 80074e2:	bf00      	nop
 80074e4:	200009b0 	.word	0x200009b0
 80074e8:	2000149c 	.word	0x2000149c
 80074ec:	08002fb1 	.word	0x08002fb1
 80074f0:	20000d88 	.word	0x20000d88
 80074f4:	200014b4 	.word	0x200014b4
 80074f8:	08009e84 	.word	0x08009e84
 80074fc:	0800a2dc 	.word	0x0800a2dc
 8007500:	0800a2bc 	.word	0x0800a2bc
	...

08007510 <rt_test_011_001_execute>:
static void rt_test_011_001_execute(void) {
 8007510:	b538      	push	{r3, r4, r5, lr}
  return ch.rlist.current;
 8007512:	4b14      	ldr	r3, [pc, #80]	; (8007564 <rt_test_011_001_execute+0x54>)
  test_set_step(1);
 8007514:	4d14      	ldr	r5, [pc, #80]	; (8007568 <rt_test_011_001_execute+0x58>)
  return chThdGetSelfX()->prio;
 8007516:	699b      	ldr	r3, [r3, #24]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, bmk_thread1, NULL);
 8007518:	4a14      	ldr	r2, [pc, #80]	; (800756c <rt_test_011_001_execute+0x5c>)
 800751a:	6899      	ldr	r1, [r3, #8]
 800751c:	4814      	ldr	r0, [pc, #80]	; (8007570 <rt_test_011_001_execute+0x60>)
 800751e:	3901      	subs	r1, #1
  test_set_step(1);
 8007520:	2401      	movs	r4, #1
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, bmk_thread1, NULL);
 8007522:	2300      	movs	r3, #0
  test_set_step(1);
 8007524:	602c      	str	r4, [r5, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, bmk_thread1, NULL);
 8007526:	f7fa fd9b 	bl	8002060 <chThdCreateStatic.constprop.0>
 800752a:	4b12      	ldr	r3, [pc, #72]	; (8007574 <rt_test_011_001_execute+0x64>)
  test_set_step(2);
 800752c:	2202      	movs	r2, #2
 800752e:	602a      	str	r2, [r5, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, bmk_thread1, NULL);
 8007530:	6018      	str	r0, [r3, #0]
    n = msg_loop_test(threads[0]);
 8007532:	f7fb fd75 	bl	8003020 <msg_loop_test>
 8007536:	4604      	mov	r4, r0
    test_wait_threads();
 8007538:	f7ff fdc2 	bl	80070c0 <test_wait_threads>
  test_set_step(3);
 800753c:	2303      	movs	r3, #3
    test_print("--- Score : ");
 800753e:	480e      	ldr	r0, [pc, #56]	; (8007578 <rt_test_011_001_execute+0x68>)
  test_set_step(3);
 8007540:	602b      	str	r3, [r5, #0]
    test_print("--- Score : ");
 8007542:	f7f9 fbb5 	bl	8000cb0 <test_print>
    test_printn(n);
 8007546:	4620      	mov	r0, r4
 8007548:	f7f9 fae2 	bl	8000b10 <test_printn>
    test_print(" msgs/S, ");
 800754c:	480b      	ldr	r0, [pc, #44]	; (800757c <rt_test_011_001_execute+0x6c>)
 800754e:	f7f9 fbaf 	bl	8000cb0 <test_print>
    test_printn(n << 1);
 8007552:	0060      	lsls	r0, r4, #1
 8007554:	f7f9 fadc 	bl	8000b10 <test_printn>
}
 8007558:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    test_println(" ctxswc/S");
 800755c:	4808      	ldr	r0, [pc, #32]	; (8007580 <rt_test_011_001_execute+0x70>)
 800755e:	f7f9 bb87 	b.w	8000c70 <test_println>
 8007562:	bf00      	nop
 8007564:	200009b0 	.word	0x200009b0
 8007568:	2000149c 	.word	0x2000149c
 800756c:	08002fb1 	.word	0x08002fb1
 8007570:	20000d88 	.word	0x20000d88
 8007574:	200014b4 	.word	0x200014b4
 8007578:	08009e84 	.word	0x08009e84
 800757c:	0800a2dc 	.word	0x0800a2dc
 8007580:	0800a2bc 	.word	0x0800a2bc
	...

08007590 <rt_test_010_002_execute>:

static void rt_test_010_002_execute(void) {
 8007590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  unsigned i;
  tprio_t prio;

  /* [10.2.1] Adding four working areas to the pool.*/
  test_set_step(1);
 8007592:	4d43      	ldr	r5, [pc, #268]	; (80076a0 <rt_test_010_002_execute+0x110>)
 8007594:	4b43      	ldr	r3, [pc, #268]	; (80076a4 <rt_test_010_002_execute+0x114>)
 8007596:	4a44      	ldr	r2, [pc, #272]	; (80076a8 <rt_test_010_002_execute+0x118>)
 8007598:	4944      	ldr	r1, [pc, #272]	; (80076ac <rt_test_010_002_execute+0x11c>)
 800759a:	2001      	movs	r0, #1
 800759c:	6028      	str	r0, [r5, #0]
  {
    for (i = 0; i < 4; i++)
 800759e:	f103 070c 	add.w	r7, r3, #12
 80075a2:	2620      	movs	r6, #32
 80075a4:	2400      	movs	r4, #0
 80075a6:	f386 8811 	msr	BASEPRI, r6
  php->next = mp->next;
 80075aa:	6808      	ldr	r0, [r1, #0]
 80075ac:	6010      	str	r0, [r2, #0]
  mp->next = php;
 80075ae:	600a      	str	r2, [r1, #0]
 80075b0:	f384 8811 	msr	BASEPRI, r4
 80075b4:	429f      	cmp	r7, r3
 80075b6:	d002      	beq.n	80075be <rt_test_010_002_execute+0x2e>
 80075b8:	f853 2b04 	ldr.w	r2, [r3], #4
 80075bc:	e7f3      	b.n	80075a6 <rt_test_010_002_execute+0x16>
  return ch.rlist.current;
 80075be:	4b3c      	ldr	r3, [pc, #240]	; (80076b0 <rt_test_010_002_execute+0x120>)
  test_end_step(2);

  /* [10.2.3] Creating the five threads.*/
  test_set_step(3);
  {
    threads[0] = chThdCreateFromMemoryPool(&mp1, "dyn1", prio-1, dyn_thread1, "A");
 80075c0:	4a3c      	ldr	r2, [pc, #240]	; (80076b4 <rt_test_010_002_execute+0x124>)
  return chThdGetSelfX()->prio;
 80075c2:	699b      	ldr	r3, [r3, #24]
 80075c4:	483c      	ldr	r0, [pc, #240]	; (80076b8 <rt_test_010_002_execute+0x128>)
 80075c6:	689e      	ldr	r6, [r3, #8]
 80075c8:	4c3c      	ldr	r4, [pc, #240]	; (80076bc <rt_test_010_002_execute+0x12c>)
 80075ca:	1e71      	subs	r1, r6, #1
  test_set_step(3);
 80075cc:	2303      	movs	r3, #3
 80075ce:	602b      	str	r3, [r5, #0]
    threads[0] = chThdCreateFromMemoryPool(&mp1, "dyn1", prio-1, dyn_thread1, "A");
 80075d0:	f7fa fdce 	bl	8002170 <chThdCreateFromMemoryPool.constprop.0>
    threads[1] = chThdCreateFromMemoryPool(&mp1, "dyn2", prio-2, dyn_thread1, "B");
 80075d4:	1eb1      	subs	r1, r6, #2
    threads[0] = chThdCreateFromMemoryPool(&mp1, "dyn1", prio-1, dyn_thread1, "A");
 80075d6:	4603      	mov	r3, r0
    threads[1] = chThdCreateFromMemoryPool(&mp1, "dyn2", prio-2, dyn_thread1, "B");
 80075d8:	4a39      	ldr	r2, [pc, #228]	; (80076c0 <rt_test_010_002_execute+0x130>)
 80075da:	483a      	ldr	r0, [pc, #232]	; (80076c4 <rt_test_010_002_execute+0x134>)
    threads[0] = chThdCreateFromMemoryPool(&mp1, "dyn1", prio-1, dyn_thread1, "A");
 80075dc:	6023      	str	r3, [r4, #0]
    threads[1] = chThdCreateFromMemoryPool(&mp1, "dyn2", prio-2, dyn_thread1, "B");
 80075de:	f7fa fdc7 	bl	8002170 <chThdCreateFromMemoryPool.constprop.0>
    threads[2] = chThdCreateFromMemoryPool(&mp1, "dyn3", prio-3, dyn_thread1, "C");
 80075e2:	1ef1      	subs	r1, r6, #3
    threads[1] = chThdCreateFromMemoryPool(&mp1, "dyn2", prio-2, dyn_thread1, "B");
 80075e4:	4603      	mov	r3, r0
    threads[2] = chThdCreateFromMemoryPool(&mp1, "dyn3", prio-3, dyn_thread1, "C");
 80075e6:	4a38      	ldr	r2, [pc, #224]	; (80076c8 <rt_test_010_002_execute+0x138>)
 80075e8:	4838      	ldr	r0, [pc, #224]	; (80076cc <rt_test_010_002_execute+0x13c>)
    threads[1] = chThdCreateFromMemoryPool(&mp1, "dyn2", prio-2, dyn_thread1, "B");
 80075ea:	6063      	str	r3, [r4, #4]
    threads[2] = chThdCreateFromMemoryPool(&mp1, "dyn3", prio-3, dyn_thread1, "C");
 80075ec:	f7fa fdc0 	bl	8002170 <chThdCreateFromMemoryPool.constprop.0>
    threads[3] = chThdCreateFromMemoryPool(&mp1, "dyn4", prio-4, dyn_thread1, "D");
 80075f0:	1f31      	subs	r1, r6, #4
    threads[2] = chThdCreateFromMemoryPool(&mp1, "dyn3", prio-3, dyn_thread1, "C");
 80075f2:	4603      	mov	r3, r0
    threads[3] = chThdCreateFromMemoryPool(&mp1, "dyn4", prio-4, dyn_thread1, "D");
 80075f4:	4a36      	ldr	r2, [pc, #216]	; (80076d0 <rt_test_010_002_execute+0x140>)
 80075f6:	4837      	ldr	r0, [pc, #220]	; (80076d4 <rt_test_010_002_execute+0x144>)
    threads[2] = chThdCreateFromMemoryPool(&mp1, "dyn3", prio-3, dyn_thread1, "C");
 80075f8:	60a3      	str	r3, [r4, #8]
    threads[3] = chThdCreateFromMemoryPool(&mp1, "dyn4", prio-4, dyn_thread1, "D");
 80075fa:	f7fa fdb9 	bl	8002170 <chThdCreateFromMemoryPool.constprop.0>
    threads[4] = chThdCreateFromMemoryPool(&mp1, "dyn5", prio-5, dyn_thread1, "E");
 80075fe:	4a36      	ldr	r2, [pc, #216]	; (80076d8 <rt_test_010_002_execute+0x148>)
    threads[3] = chThdCreateFromMemoryPool(&mp1, "dyn4", prio-4, dyn_thread1, "D");
 8007600:	4603      	mov	r3, r0
    threads[4] = chThdCreateFromMemoryPool(&mp1, "dyn5", prio-5, dyn_thread1, "E");
 8007602:	1f71      	subs	r1, r6, #5
 8007604:	4835      	ldr	r0, [pc, #212]	; (80076dc <rt_test_010_002_execute+0x14c>)
    threads[3] = chThdCreateFromMemoryPool(&mp1, "dyn4", prio-4, dyn_thread1, "D");
 8007606:	60e3      	str	r3, [r4, #12]
    threads[4] = chThdCreateFromMemoryPool(&mp1, "dyn5", prio-5, dyn_thread1, "E");
 8007608:	f7fa fdb2 	bl	8002170 <chThdCreateFromMemoryPool.constprop.0>
  test_end_step(3);

  /* [10.2.4] Testing that only the fifth thread creation failed.*/
  test_set_step(4);
  {
    test_assert((threads[0] != NULL) &&
 800760c:	6823      	ldr	r3, [r4, #0]
    threads[4] = chThdCreateFromMemoryPool(&mp1, "dyn5", prio-5, dyn_thread1, "E");
 800760e:	6120      	str	r0, [r4, #16]
  test_set_step(4);
 8007610:	2204      	movs	r2, #4
    threads[4] = chThdCreateFromMemoryPool(&mp1, "dyn5", prio-5, dyn_thread1, "E");
 8007612:	4606      	mov	r6, r0
  test_set_step(4);
 8007614:	602a      	str	r2, [r5, #0]
    test_assert((threads[0] != NULL) &&
 8007616:	2b00      	cmp	r3, #0
 8007618:	d03b      	beq.n	8007692 <rt_test_010_002_execute+0x102>
 800761a:	6860      	ldr	r0, [r4, #4]
 800761c:	b128      	cbz	r0, 800762a <rt_test_010_002_execute+0x9a>
 800761e:	68a0      	ldr	r0, [r4, #8]
 8007620:	b118      	cbz	r0, 800762a <rt_test_010_002_execute+0x9a>
 8007622:	68e0      	ldr	r0, [r4, #12]
 8007624:	3800      	subs	r0, #0
 8007626:	bf18      	it	ne
 8007628:	2001      	movne	r0, #1
 800762a:	492d      	ldr	r1, [pc, #180]	; (80076e0 <rt_test_010_002_execute+0x150>)
 800762c:	f7f9 f9d8 	bl	80009e0 <_test_assert>
 8007630:	b100      	cbz	r0, 8007634 <rt_test_010_002_execute+0xa4>
    for (i = 0; i < 4; i++)
      test_assert(chPoolAlloc(&mp1) != NULL, "pool list empty");
    test_assert(chPoolAlloc(&mp1) == NULL, "pool list not empty");
  }
  test_end_step(6);
}
 8007632:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    test_assert(threads[4] == NULL,
 8007634:	fab6 f086 	clz	r0, r6
 8007638:	492a      	ldr	r1, [pc, #168]	; (80076e4 <rt_test_010_002_execute+0x154>)
 800763a:	0940      	lsrs	r0, r0, #5
 800763c:	f7f9 f9d0 	bl	80009e0 <_test_assert>
 8007640:	2800      	cmp	r0, #0
 8007642:	d1f6      	bne.n	8007632 <rt_test_010_002_execute+0xa2>
  test_set_step(5);
 8007644:	2305      	movs	r3, #5
 8007646:	602b      	str	r3, [r5, #0]
    test_wait_threads();
 8007648:	f7ff fd3a 	bl	80070c0 <test_wait_threads>
    test_assert_sequence("ABCD", "invalid sequence");
 800764c:	4926      	ldr	r1, [pc, #152]	; (80076e8 <rt_test_010_002_execute+0x158>)
 800764e:	4827      	ldr	r0, [pc, #156]	; (80076ec <rt_test_010_002_execute+0x15c>)
 8007650:	f7f9 fb46 	bl	8000ce0 <_test_assert_sequence>
 8007654:	2800      	cmp	r0, #0
 8007656:	d1ec      	bne.n	8007632 <rt_test_010_002_execute+0xa2>
  test_set_step(6);
 8007658:	2306      	movs	r3, #6
      test_assert(chPoolAlloc(&mp1) != NULL, "pool list empty");
 800765a:	4f14      	ldr	r7, [pc, #80]	; (80076ac <rt_test_010_002_execute+0x11c>)
 800765c:	4e24      	ldr	r6, [pc, #144]	; (80076f0 <rt_test_010_002_execute+0x160>)
  test_set_step(6);
 800765e:	602b      	str	r3, [r5, #0]
 8007660:	2404      	movs	r4, #4
      test_assert(chPoolAlloc(&mp1) != NULL, "pool list empty");
 8007662:	4638      	mov	r0, r7
 8007664:	f7f9 fbe4 	bl	8000e30 <chPoolAlloc>
 8007668:	3800      	subs	r0, #0
 800766a:	bf18      	it	ne
 800766c:	2001      	movne	r0, #1
 800766e:	4631      	mov	r1, r6
 8007670:	f7f9 f9b6 	bl	80009e0 <_test_assert>
 8007674:	2800      	cmp	r0, #0
 8007676:	d1dc      	bne.n	8007632 <rt_test_010_002_execute+0xa2>
    for (i = 0; i < 4; i++)
 8007678:	3c01      	subs	r4, #1
 800767a:	d1f2      	bne.n	8007662 <rt_test_010_002_execute+0xd2>
    test_assert(chPoolAlloc(&mp1) == NULL, "pool list not empty");
 800767c:	480b      	ldr	r0, [pc, #44]	; (80076ac <rt_test_010_002_execute+0x11c>)
 800767e:	f7f9 fbd7 	bl	8000e30 <chPoolAlloc>
 8007682:	fab0 f080 	clz	r0, r0
}
 8007686:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    test_assert(chPoolAlloc(&mp1) == NULL, "pool list not empty");
 800768a:	491a      	ldr	r1, [pc, #104]	; (80076f4 <rt_test_010_002_execute+0x164>)
 800768c:	0940      	lsrs	r0, r0, #5
 800768e:	f7f9 b9a7 	b.w	80009e0 <_test_assert>
    test_assert((threads[0] != NULL) &&
 8007692:	4913      	ldr	r1, [pc, #76]	; (80076e0 <rt_test_010_002_execute+0x150>)
 8007694:	4618      	mov	r0, r3
 8007696:	f7f9 f9a3 	bl	80009e0 <_test_assert>
 800769a:	2800      	cmp	r0, #0
 800769c:	d1c9      	bne.n	8007632 <rt_test_010_002_execute+0xa2>
 800769e:	e7c9      	b.n	8007634 <rt_test_010_002_execute+0xa4>
 80076a0:	2000149c 	.word	0x2000149c
 80076a4:	0800b678 	.word	0x0800b678
 80076a8:	20000d88 	.word	0x20000d88
 80076ac:	20000c40 	.word	0x20000c40
 80076b0:	200009b0 	.word	0x200009b0
 80076b4:	0800a138 	.word	0x0800a138
 80076b8:	0800a2e8 	.word	0x0800a2e8
 80076bc:	200014b4 	.word	0x200014b4
 80076c0:	0800a13c 	.word	0x0800a13c
 80076c4:	0800a2f0 	.word	0x0800a2f0
 80076c8:	0800a2f8 	.word	0x0800a2f8
 80076cc:	0800a2fc 	.word	0x0800a2fc
 80076d0:	0800a304 	.word	0x0800a304
 80076d4:	0800a308 	.word	0x0800a308
 80076d8:	0800a42c 	.word	0x0800a42c
 80076dc:	0800a310 	.word	0x0800a310
 80076e0:	0800a318 	.word	0x0800a318
 80076e4:	0800a330 	.word	0x0800a330
 80076e8:	08009020 	.word	0x08009020
 80076ec:	0800a068 	.word	0x0800a068
 80076f0:	0800a34c 	.word	0x0800a34c
 80076f4:	0800a35c 	.word	0x0800a35c
	...

08007700 <rt_test_010_001_execute>:
static void rt_test_010_001_execute(void) {
 8007700:	b5f0      	push	{r4, r5, r6, r7, lr}
  return ch.rlist.current;
 8007702:	4b40      	ldr	r3, [pc, #256]	; (8007804 <rt_test_010_001_execute+0x104>)
  test_set_step(2);
 8007704:	4d40      	ldr	r5, [pc, #256]	; (8007808 <rt_test_010_001_execute+0x108>)
  return chThdGetSelfX()->prio;
 8007706:	699b      	ldr	r3, [r3, #24]
    n1 = chHeapStatus(&heap1, &total1, &largest1);
 8007708:	4840      	ldr	r0, [pc, #256]	; (800780c <rt_test_010_001_execute+0x10c>)
 800770a:	689e      	ldr	r6, [r3, #8]
static void rt_test_010_001_execute(void) {
 800770c:	b085      	sub	sp, #20
  test_set_step(2);
 800770e:	2302      	movs	r3, #2
    n1 = chHeapStatus(&heap1, &total1, &largest1);
 8007710:	a903      	add	r1, sp, #12
 8007712:	aa02      	add	r2, sp, #8
  test_set_step(2);
 8007714:	602b      	str	r3, [r5, #0]
    n1 = chHeapStatus(&heap1, &total1, &largest1);
 8007716:	f7fe fd1b 	bl	8006150 <chHeapStatus>
 800771a:	4604      	mov	r4, r0
    test_assert(n1 == 1, "heap fragmented");
 800771c:	f1a0 0001 	sub.w	r0, r0, #1
 8007720:	fab0 f080 	clz	r0, r0
 8007724:	493a      	ldr	r1, [pc, #232]	; (8007810 <rt_test_010_001_execute+0x110>)
 8007726:	0940      	lsrs	r0, r0, #5
 8007728:	f7f9 f95a 	bl	80009e0 <_test_assert>
 800772c:	b108      	cbz	r0, 8007732 <rt_test_010_001_execute+0x32>
}
 800772e:	b005      	add	sp, #20
 8007730:	bdf0      	pop	{r4, r5, r6, r7, pc}
  test_set_step(3);
 8007732:	2203      	movs	r2, #3
    threads[0] = chThdCreateFromHeap(&heap1,
 8007734:	4937      	ldr	r1, [pc, #220]	; (8007814 <rt_test_010_001_execute+0x114>)
  test_set_step(3);
 8007736:	602a      	str	r2, [r5, #0]
    threads[0] = chThdCreateFromHeap(&heap1,
 8007738:	4b37      	ldr	r3, [pc, #220]	; (8007818 <rt_test_010_001_execute+0x118>)
 800773a:	4f38      	ldr	r7, [pc, #224]	; (800781c <rt_test_010_001_execute+0x11c>)
 800773c:	1e72      	subs	r2, r6, #1
 800773e:	f44f 70a4 	mov.w	r0, #328	; 0x148
 8007742:	f7fd fb55 	bl	8004df0 <chThdCreateFromHeap.constprop.0>
 8007746:	6038      	str	r0, [r7, #0]
    test_assert(threads[0] != NULL, "thread creation failed");
 8007748:	3800      	subs	r0, #0
 800774a:	bf18      	it	ne
 800774c:	2001      	movne	r0, #1
 800774e:	4934      	ldr	r1, [pc, #208]	; (8007820 <rt_test_010_001_execute+0x120>)
 8007750:	f7f9 f946 	bl	80009e0 <_test_assert>
 8007754:	2800      	cmp	r0, #0
 8007756:	d1ea      	bne.n	800772e <rt_test_010_001_execute+0x2e>
  test_set_step(4);
 8007758:	2204      	movs	r2, #4
    threads[1] = chThdCreateFromHeap(&heap1,
 800775a:	4b32      	ldr	r3, [pc, #200]	; (8007824 <rt_test_010_001_execute+0x124>)
 800775c:	4932      	ldr	r1, [pc, #200]	; (8007828 <rt_test_010_001_execute+0x128>)
  test_set_step(4);
 800775e:	602a      	str	r2, [r5, #0]
    threads[1] = chThdCreateFromHeap(&heap1,
 8007760:	f44f 70a4 	mov.w	r0, #328	; 0x148
 8007764:	1eb2      	subs	r2, r6, #2
 8007766:	f7fd fb43 	bl	8004df0 <chThdCreateFromHeap.constprop.0>
 800776a:	4603      	mov	r3, r0
    test_assert(threads[1] != NULL, "thread creation failed");
 800776c:	3800      	subs	r0, #0
 800776e:	bf18      	it	ne
 8007770:	2001      	movne	r0, #1
 8007772:	492b      	ldr	r1, [pc, #172]	; (8007820 <rt_test_010_001_execute+0x120>)
    threads[1] = chThdCreateFromHeap(&heap1,
 8007774:	607b      	str	r3, [r7, #4]
    test_assert(threads[1] != NULL, "thread creation failed");
 8007776:	f7f9 f933 	bl	80009e0 <_test_assert>
 800777a:	2800      	cmp	r0, #0
 800777c:	d1d7      	bne.n	800772e <rt_test_010_001_execute+0x2e>
  test_set_step(5);
 800777e:	2005      	movs	r0, #5
    threads[2] = chThdCreateFromHeap(&heap1,
 8007780:	4b2a      	ldr	r3, [pc, #168]	; (800782c <rt_test_010_001_execute+0x12c>)
 8007782:	492b      	ldr	r1, [pc, #172]	; (8007830 <rt_test_010_001_execute+0x130>)
  test_set_step(5);
 8007784:	6028      	str	r0, [r5, #0]
    threads[2] = chThdCreateFromHeap(&heap1,
 8007786:	1ef2      	subs	r2, r6, #3
 8007788:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800778c:	f7fd fb30 	bl	8004df0 <chThdCreateFromHeap.constprop.0>
 8007790:	4603      	mov	r3, r0
    test_assert(threads[2] == NULL, "thread creation not failed");
 8007792:	fab0 f080 	clz	r0, r0
 8007796:	4927      	ldr	r1, [pc, #156]	; (8007834 <rt_test_010_001_execute+0x134>)
    threads[2] = chThdCreateFromHeap(&heap1,
 8007798:	60bb      	str	r3, [r7, #8]
    test_assert(threads[2] == NULL, "thread creation not failed");
 800779a:	0940      	lsrs	r0, r0, #5
 800779c:	f7f9 f920 	bl	80009e0 <_test_assert>
 80077a0:	2800      	cmp	r0, #0
 80077a2:	d1c4      	bne.n	800772e <rt_test_010_001_execute+0x2e>
  test_set_step(6);
 80077a4:	2306      	movs	r3, #6
 80077a6:	602b      	str	r3, [r5, #0]
    test_wait_threads();
 80077a8:	f7ff fc8a 	bl	80070c0 <test_wait_threads>
    test_assert_sequence("AB", "invalid sequence");
 80077ac:	4922      	ldr	r1, [pc, #136]	; (8007838 <rt_test_010_001_execute+0x138>)
 80077ae:	4823      	ldr	r0, [pc, #140]	; (800783c <rt_test_010_001_execute+0x13c>)
 80077b0:	f7f9 fa96 	bl	8000ce0 <_test_assert_sequence>
 80077b4:	2800      	cmp	r0, #0
 80077b6:	d1ba      	bne.n	800772e <rt_test_010_001_execute+0x2e>
  test_set_step(7);
 80077b8:	2307      	movs	r3, #7
    n2 = chHeapStatus(&heap1, &total2, &largest2);
 80077ba:	a901      	add	r1, sp, #4
 80077bc:	4813      	ldr	r0, [pc, #76]	; (800780c <rt_test_010_001_execute+0x10c>)
  test_set_step(7);
 80077be:	602b      	str	r3, [r5, #0]
    n2 = chHeapStatus(&heap1, &total2, &largest2);
 80077c0:	466a      	mov	r2, sp
 80077c2:	f7fe fcc5 	bl	8006150 <chHeapStatus>
    test_assert(n1 == n2, "fragmentation changed");
 80077c6:	1a20      	subs	r0, r4, r0
 80077c8:	fab0 f080 	clz	r0, r0
 80077cc:	491c      	ldr	r1, [pc, #112]	; (8007840 <rt_test_010_001_execute+0x140>)
 80077ce:	0940      	lsrs	r0, r0, #5
 80077d0:	f7f9 f906 	bl	80009e0 <_test_assert>
 80077d4:	2800      	cmp	r0, #0
 80077d6:	d1aa      	bne.n	800772e <rt_test_010_001_execute+0x2e>
    test_assert(total1 == total2, "total free space changed");
 80077d8:	9803      	ldr	r0, [sp, #12]
 80077da:	9b01      	ldr	r3, [sp, #4]
 80077dc:	4919      	ldr	r1, [pc, #100]	; (8007844 <rt_test_010_001_execute+0x144>)
 80077de:	1ac0      	subs	r0, r0, r3
 80077e0:	fab0 f080 	clz	r0, r0
 80077e4:	0940      	lsrs	r0, r0, #5
 80077e6:	f7f9 f8fb 	bl	80009e0 <_test_assert>
 80077ea:	2800      	cmp	r0, #0
 80077ec:	d19f      	bne.n	800772e <rt_test_010_001_execute+0x2e>
    test_assert(largest1 == largest2, "largest fragment size changed");
 80077ee:	9802      	ldr	r0, [sp, #8]
 80077f0:	9b00      	ldr	r3, [sp, #0]
 80077f2:	4915      	ldr	r1, [pc, #84]	; (8007848 <rt_test_010_001_execute+0x148>)
 80077f4:	1ac0      	subs	r0, r0, r3
 80077f6:	fab0 f080 	clz	r0, r0
 80077fa:	0940      	lsrs	r0, r0, #5
 80077fc:	f7f9 f8f0 	bl	80009e0 <_test_assert>
 8007800:	e795      	b.n	800772e <rt_test_010_001_execute+0x2e>
 8007802:	bf00      	nop
 8007804:	200009b0 	.word	0x200009b0
 8007808:	2000149c 	.word	0x2000149c
 800780c:	20000bb0 	.word	0x20000bb0
 8007810:	0800a1f4 	.word	0x0800a1f4
 8007814:	0800a2e8 	.word	0x0800a2e8
 8007818:	0800a138 	.word	0x0800a138
 800781c:	200014b4 	.word	0x200014b4
 8007820:	0800a318 	.word	0x0800a318
 8007824:	0800a13c 	.word	0x0800a13c
 8007828:	0800a2f0 	.word	0x0800a2f0
 800782c:	0800a2f8 	.word	0x0800a2f8
 8007830:	0800a2fc 	.word	0x0800a2fc
 8007834:	0800a330 	.word	0x0800a330
 8007838:	08009020 	.word	0x08009020
 800783c:	0800a370 	.word	0x0800a370
 8007840:	0800a374 	.word	0x0800a374
 8007844:	0800a38c 	.word	0x0800a38c
 8007848:	0800a3a8 	.word	0x0800a3a8
 800784c:	00000000 	.word	0x00000000

08007850 <rt_test_009_007_execute>:

static void rt_test_009_007_execute(void) {
 8007850:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  event_listener_t el1, el2;
  systime_t target_time;

  /* [9.7.1] Registering on two event sources associating them with
     flags 1 and 4.*/
  test_set_step(1);
 8007854:	4d39      	ldr	r5, [pc, #228]	; (800793c <rt_test_009_007_execute+0xec>)
 8007856:	2301      	movs	r3, #1
static void rt_test_009_007_execute(void) {
 8007858:	b08a      	sub	sp, #40	; 0x28
  test_set_step(1);
 800785a:	602b      	str	r3, [r5, #0]
 800785c:	2420      	movs	r4, #32
 800785e:	f384 8811 	msr	BASEPRI, r4
  elp->next     = esp->next;
 8007862:	4f37      	ldr	r7, [pc, #220]	; (8007940 <rt_test_009_007_execute+0xf0>)
  elp->listener = currp;
 8007864:	4e37      	ldr	r6, [pc, #220]	; (8007944 <rt_test_009_007_execute+0xf4>)
  elp->next     = esp->next;
 8007866:	6839      	ldr	r1, [r7, #0]
  elp->listener = currp;
 8007868:	69b2      	ldr	r2, [r6, #24]
  elp->events   = events;
 800786a:	9307      	str	r3, [sp, #28]
  esp->next     = elp;
 800786c:	f10d 0a14 	add.w	sl, sp, #20
  elp->flags    = (eventflags_t)0;
 8007870:	2300      	movs	r3, #0
  elp->wflags   = wflags;
 8007872:	f04f 30ff 	mov.w	r0, #4294967295
  elp->listener = currp;
 8007876:	e9cd 1205 	strd	r1, r2, [sp, #20]
  elp->wflags   = wflags;
 800787a:	e9cd 3008 	strd	r3, r0, [sp, #32]
  esp->next     = elp;
 800787e:	f8c7 a000 	str.w	sl, [r7]
 8007882:	f383 8811 	msr	BASEPRI, r3
 8007886:	f384 8811 	msr	BASEPRI, r4
  elp->next     = esp->next;
 800788a:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 8007960 <rt_test_009_007_execute+0x110>
  elp->listener = currp;
 800788e:	69b2      	ldr	r2, [r6, #24]
  elp->next     = esp->next;
 8007890:	f8d8 1000 	ldr.w	r1, [r8]
  elp->flags    = (eventflags_t)0;
 8007894:	9303      	str	r3, [sp, #12]
  elp->events   = events;
 8007896:	f04f 0904 	mov.w	r9, #4
  elp->listener = currp;
 800789a:	e9cd 1200 	strd	r1, r2, [sp]
  elp->wflags   = wflags;
 800789e:	9004      	str	r0, [sp, #16]
  esp->next     = elp;
 80078a0:	f8c8 d000 	str.w	sp, [r8]
  elp->events   = events;
 80078a4:	f8cd 9008 	str.w	r9, [sp, #8]
 80078a8:	f383 8811 	msr	BASEPRI, r3
  test_end_step(1);

  /* [9.7.2] Getting current time and starting a broadcaster thread,
     the thread broadcast the first Event Source immediately and the
     other after 50mS.*/
  test_set_step(2);
 80078ac:	2302      	movs	r3, #2
 80078ae:	602b      	str	r3, [r5, #0]
  {
    target_time = chTimeAddX(test_wait_tick(), TIME_MS2I(50));
 80078b0:	f7fb fafe 	bl	8002eb0 <test_wait_tick>
 80078b4:	69b2      	ldr	r2, [r6, #24]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 80078b6:	4b24      	ldr	r3, [pc, #144]	; (8007948 <rt_test_009_007_execute+0xf8>)
 80078b8:	6891      	ldr	r1, [r2, #8]
 80078ba:	4a24      	ldr	r2, [pc, #144]	; (800794c <rt_test_009_007_execute+0xfc>)
    target_time = chTimeAddX(test_wait_tick(), TIME_MS2I(50));
 80078bc:	4604      	mov	r4, r0
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 80078be:	3901      	subs	r1, #1
 80078c0:	4823      	ldr	r0, [pc, #140]	; (8007950 <rt_test_009_007_execute+0x100>)
 80078c2:	f7fa fbcd 	bl	8002060 <chThdCreateStatic.constprop.0>
 80078c6:	4b23      	ldr	r3, [pc, #140]	; (8007954 <rt_test_009_007_execute+0x104>)
  test_end_step(2);

  /* [9.7.3] Calling chEvtWaitAll() then verifying that both event
     flags have been received after 50mS and that the event flags mask
     has been emptied.*/
  test_set_step(3);
 80078c8:	2203      	movs	r2, #3
 80078ca:	602a      	str	r2, [r5, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 80078cc:	6018      	str	r0, [r3, #0]
  {
    m = chEvtWaitAll(5);
 80078ce:	f7fa fd07 	bl	80022e0 <chEvtWaitAll.constprop.0>
    test_assert_time_window(target_time,
 80078d2:	f504 7102 	add.w	r1, r4, #520	; 0x208
 80078d6:	f504 70fa 	add.w	r0, r4, #500	; 0x1f4
 80078da:	f7f8 fe19 	bl	8000510 <_test_assert_time_window.constprop.0>
 80078de:	b110      	cbz	r0, 80078e6 <rt_test_009_007_execute+0x96>
    chEvtUnregister(&es2, &el2);
    test_assert(!chEvtIsListeningI(&es1), "stuck listener");
    test_assert(!chEvtIsListeningI(&es2), "stuck listener");
  }
  test_end_step(4);
}
 80078e0:	b00a      	add	sp, #40	; 0x28
 80078e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    m = chEvtGetAndClearEvents(ALL_EVENTS);
 80078e6:	f7f8 fe03 	bl	80004f0 <chEvtGetAndClearEvents.constprop.0>
    test_assert(m == 0, "stuck event");
 80078ea:	fab0 f080 	clz	r0, r0
 80078ee:	491a      	ldr	r1, [pc, #104]	; (8007958 <rt_test_009_007_execute+0x108>)
 80078f0:	0940      	lsrs	r0, r0, #5
 80078f2:	f7f9 f875 	bl	80009e0 <_test_assert>
 80078f6:	2800      	cmp	r0, #0
 80078f8:	d1f2      	bne.n	80078e0 <rt_test_009_007_execute+0x90>
    test_wait_threads();
 80078fa:	f7ff fbe1 	bl	80070c0 <test_wait_threads>
    chEvtUnregister(&es1, &el1);
 80078fe:	4651      	mov	r1, sl
 8007900:	4638      	mov	r0, r7
  test_set_step(4);
 8007902:	f8c5 9000 	str.w	r9, [r5]
    chEvtUnregister(&es1, &el1);
 8007906:	f7f9 fb43 	bl	8000f90 <chEvtUnregister>
    chEvtUnregister(&es2, &el2);
 800790a:	4669      	mov	r1, sp
 800790c:	4640      	mov	r0, r8
 800790e:	f7f9 fb3f 	bl	8000f90 <chEvtUnregister>
    test_assert(!chEvtIsListeningI(&es1), "stuck listener");
 8007912:	6838      	ldr	r0, [r7, #0]
 8007914:	4911      	ldr	r1, [pc, #68]	; (800795c <rt_test_009_007_execute+0x10c>)
 8007916:	1bc0      	subs	r0, r0, r7
 8007918:	fab0 f080 	clz	r0, r0
 800791c:	0940      	lsrs	r0, r0, #5
 800791e:	f7f9 f85f 	bl	80009e0 <_test_assert>
 8007922:	2800      	cmp	r0, #0
 8007924:	d1dc      	bne.n	80078e0 <rt_test_009_007_execute+0x90>
    test_assert(!chEvtIsListeningI(&es2), "stuck listener");
 8007926:	f8d8 0000 	ldr.w	r0, [r8]
 800792a:	490c      	ldr	r1, [pc, #48]	; (800795c <rt_test_009_007_execute+0x10c>)
 800792c:	eba0 0008 	sub.w	r0, r0, r8
 8007930:	fab0 f080 	clz	r0, r0
 8007934:	0940      	lsrs	r0, r0, #5
 8007936:	f7f9 f853 	bl	80009e0 <_test_assert>
 800793a:	e7d1      	b.n	80078e0 <rt_test_009_007_execute+0x90>
 800793c:	2000149c 	.word	0x2000149c
 8007940:	20000808 	.word	0x20000808
 8007944:	200009b0 	.word	0x200009b0
 8007948:	0800a138 	.word	0x0800a138
 800794c:	08003ff1 	.word	0x08003ff1
 8007950:	20000d88 	.word	0x20000d88
 8007954:	200014b4 	.word	0x200014b4
 8007958:	0800a3c8 	.word	0x0800a3c8
 800795c:	0800907c 	.word	0x0800907c
 8007960:	2000080c 	.word	0x2000080c
	...

08007970 <rt_test_009_005_execute>:
static void rt_test_009_005_execute(void) {
 8007970:	b538      	push	{r3, r4, r5, lr}
    chEvtAddEvents(5);
 8007972:	2005      	movs	r0, #5
  test_set_step(2);
 8007974:	4c28      	ldr	r4, [pc, #160]	; (8007a18 <rt_test_009_005_execute+0xa8>)
    chEvtAddEvents(5);
 8007976:	f7f9 fafb 	bl	8000f70 <chEvtAddEvents>
  test_set_step(2);
 800797a:	2302      	movs	r3, #2
 800797c:	6023      	str	r3, [r4, #0]
    m = chEvtWaitAll(5);
 800797e:	f7fa fcaf 	bl	80022e0 <chEvtWaitAll.constprop.0>
    test_assert(m == 5, "unexpected pending bit");
 8007982:	f1a0 0005 	sub.w	r0, r0, #5
 8007986:	fab0 f080 	clz	r0, r0
 800798a:	4924      	ldr	r1, [pc, #144]	; (8007a1c <rt_test_009_005_execute+0xac>)
 800798c:	0940      	lsrs	r0, r0, #5
 800798e:	f7f9 f827 	bl	80009e0 <_test_assert>
 8007992:	b100      	cbz	r0, 8007996 <rt_test_009_005_execute+0x26>
}
 8007994:	bd38      	pop	{r3, r4, r5, pc}
    m = chEvtGetAndClearEvents(ALL_EVENTS);
 8007996:	f7f8 fdab 	bl	80004f0 <chEvtGetAndClearEvents.constprop.0>
    test_assert(m == 0, "stuck event");
 800799a:	fab0 f080 	clz	r0, r0
 800799e:	4920      	ldr	r1, [pc, #128]	; (8007a20 <rt_test_009_005_execute+0xb0>)
 80079a0:	0940      	lsrs	r0, r0, #5
 80079a2:	f7f9 f81d 	bl	80009e0 <_test_assert>
 80079a6:	2800      	cmp	r0, #0
 80079a8:	d1f4      	bne.n	8007994 <rt_test_009_005_execute+0x24>
    chEvtAddEvents(4);
 80079aa:	2004      	movs	r0, #4
 80079ac:	f7f9 fae0 	bl	8000f70 <chEvtAddEvents>
  test_set_step(4);
 80079b0:	2304      	movs	r3, #4
 80079b2:	6023      	str	r3, [r4, #0]
    target_time = chTimeAddX(test_wait_tick(), TIME_MS2I(50));
 80079b4:	f7fb fa7c 	bl	8002eb0 <test_wait_tick>
  return ch.rlist.current;
 80079b8:	4b1a      	ldr	r3, [pc, #104]	; (8007a24 <rt_test_009_005_execute+0xb4>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 80079ba:	4a1b      	ldr	r2, [pc, #108]	; (8007a28 <rt_test_009_005_execute+0xb8>)
 80079bc:	699b      	ldr	r3, [r3, #24]
 80079be:	6899      	ldr	r1, [r3, #8]
    target_time = chTimeAddX(test_wait_tick(), TIME_MS2I(50));
 80079c0:	4605      	mov	r5, r0
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 80079c2:	3901      	subs	r1, #1
 80079c4:	4819      	ldr	r0, [pc, #100]	; (8007a2c <rt_test_009_005_execute+0xbc>)
 80079c6:	f7fa fb4b 	bl	8002060 <chThdCreateStatic.constprop.0>
 80079ca:	4a19      	ldr	r2, [pc, #100]	; (8007a30 <rt_test_009_005_execute+0xc0>)
  test_set_step(5);
 80079cc:	2305      	movs	r3, #5
 80079ce:	6023      	str	r3, [r4, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 80079d0:	6010      	str	r0, [r2, #0]
    m = chEvtWaitAll(5);
 80079d2:	f7fa fc85 	bl	80022e0 <chEvtWaitAll.constprop.0>
    test_assert_time_window(target_time,
 80079d6:	f505 7102 	add.w	r1, r5, #520	; 0x208
    m = chEvtWaitAll(5);
 80079da:	4604      	mov	r4, r0
    test_assert_time_window(target_time,
 80079dc:	f505 70fa 	add.w	r0, r5, #500	; 0x1f4
 80079e0:	f7f8 fd96 	bl	8000510 <_test_assert_time_window.constprop.0>
 80079e4:	2800      	cmp	r0, #0
 80079e6:	d1d5      	bne.n	8007994 <rt_test_009_005_execute+0x24>
    test_assert(m == 5, "event flags error");
 80079e8:	f1a4 0005 	sub.w	r0, r4, #5
 80079ec:	fab0 f080 	clz	r0, r0
 80079f0:	4910      	ldr	r1, [pc, #64]	; (8007a34 <rt_test_009_005_execute+0xc4>)
 80079f2:	0940      	lsrs	r0, r0, #5
 80079f4:	f7f8 fff4 	bl	80009e0 <_test_assert>
 80079f8:	2800      	cmp	r0, #0
 80079fa:	d1cb      	bne.n	8007994 <rt_test_009_005_execute+0x24>
    m = chEvtGetAndClearEvents(ALL_EVENTS);
 80079fc:	f7f8 fd78 	bl	80004f0 <chEvtGetAndClearEvents.constprop.0>
    test_assert(m == 0, "stuck event");
 8007a00:	fab0 f080 	clz	r0, r0
 8007a04:	4906      	ldr	r1, [pc, #24]	; (8007a20 <rt_test_009_005_execute+0xb0>)
 8007a06:	0940      	lsrs	r0, r0, #5
 8007a08:	f7f8 ffea 	bl	80009e0 <_test_assert>
 8007a0c:	2800      	cmp	r0, #0
 8007a0e:	d1c1      	bne.n	8007994 <rt_test_009_005_execute+0x24>
}
 8007a10:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    test_wait_threads();
 8007a14:	f7ff bb54 	b.w	80070c0 <test_wait_threads>
 8007a18:	2000149c 	.word	0x2000149c
 8007a1c:	0800a3d4 	.word	0x0800a3d4
 8007a20:	0800a3c8 	.word	0x0800a3c8
 8007a24:	200009b0 	.word	0x200009b0
 8007a28:	08004031 	.word	0x08004031
 8007a2c:	20000d88 	.word	0x20000d88
 8007a30:	200014b4 	.word	0x200014b4
 8007a34:	0800a3ec 	.word	0x0800a3ec
	...

08007a40 <rt_test_009_004_execute>:
static void rt_test_009_004_execute(void) {
 8007a40:	b538      	push	{r3, r4, r5, lr}
    chEvtAddEvents(5);
 8007a42:	2005      	movs	r0, #5
  test_set_step(2);
 8007a44:	4c27      	ldr	r4, [pc, #156]	; (8007ae4 <rt_test_009_004_execute+0xa4>)
    chEvtAddEvents(5);
 8007a46:	f7f9 fa93 	bl	8000f70 <chEvtAddEvents>
  test_set_step(2);
 8007a4a:	2302      	movs	r3, #2
 8007a4c:	6023      	str	r3, [r4, #0]
    m = chEvtWaitAny(ALL_EVENTS);
 8007a4e:	f7fa fc27 	bl	80022a0 <chEvtWaitAny.constprop.0>
    test_assert(m == 5, "unexpected pending bit");
 8007a52:	f1a0 0005 	sub.w	r0, r0, #5
 8007a56:	fab0 f080 	clz	r0, r0
 8007a5a:	4923      	ldr	r1, [pc, #140]	; (8007ae8 <rt_test_009_004_execute+0xa8>)
 8007a5c:	0940      	lsrs	r0, r0, #5
 8007a5e:	f7f8 ffbf 	bl	80009e0 <_test_assert>
 8007a62:	b100      	cbz	r0, 8007a66 <rt_test_009_004_execute+0x26>
}
 8007a64:	bd38      	pop	{r3, r4, r5, pc}
    m = chEvtGetAndClearEvents(ALL_EVENTS);
 8007a66:	f7f8 fd43 	bl	80004f0 <chEvtGetAndClearEvents.constprop.0>
    test_assert(m == 0, "stuck event");
 8007a6a:	fab0 f080 	clz	r0, r0
 8007a6e:	491f      	ldr	r1, [pc, #124]	; (8007aec <rt_test_009_004_execute+0xac>)
 8007a70:	0940      	lsrs	r0, r0, #5
 8007a72:	f7f8 ffb5 	bl	80009e0 <_test_assert>
 8007a76:	2800      	cmp	r0, #0
 8007a78:	d1f4      	bne.n	8007a64 <rt_test_009_004_execute+0x24>
  test_set_step(3);
 8007a7a:	2303      	movs	r3, #3
 8007a7c:	6023      	str	r3, [r4, #0]
    target_time = chTimeAddX(test_wait_tick(), TIME_MS2I(50));
 8007a7e:	f7fb fa17 	bl	8002eb0 <test_wait_tick>
 8007a82:	4b1b      	ldr	r3, [pc, #108]	; (8007af0 <rt_test_009_004_execute+0xb0>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8007a84:	4a1b      	ldr	r2, [pc, #108]	; (8007af4 <rt_test_009_004_execute+0xb4>)
 8007a86:	699b      	ldr	r3, [r3, #24]
 8007a88:	6899      	ldr	r1, [r3, #8]
    target_time = chTimeAddX(test_wait_tick(), TIME_MS2I(50));
 8007a8a:	4605      	mov	r5, r0
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8007a8c:	3901      	subs	r1, #1
 8007a8e:	481a      	ldr	r0, [pc, #104]	; (8007af8 <rt_test_009_004_execute+0xb8>)
 8007a90:	f7fa fae6 	bl	8002060 <chThdCreateStatic.constprop.0>
 8007a94:	4a19      	ldr	r2, [pc, #100]	; (8007afc <rt_test_009_004_execute+0xbc>)
  test_set_step(4);
 8007a96:	2304      	movs	r3, #4
 8007a98:	6023      	str	r3, [r4, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8007a9a:	6010      	str	r0, [r2, #0]
    m = chEvtWaitAny(ALL_EVENTS);
 8007a9c:	f7fa fc00 	bl	80022a0 <chEvtWaitAny.constprop.0>
    test_assert_time_window(target_time,
 8007aa0:	f505 7102 	add.w	r1, r5, #520	; 0x208
    m = chEvtWaitAny(ALL_EVENTS);
 8007aa4:	4604      	mov	r4, r0
    test_assert_time_window(target_time,
 8007aa6:	f505 70fa 	add.w	r0, r5, #500	; 0x1f4
 8007aaa:	f7f8 fd31 	bl	8000510 <_test_assert_time_window.constprop.0>
 8007aae:	2800      	cmp	r0, #0
 8007ab0:	d1d8      	bne.n	8007a64 <rt_test_009_004_execute+0x24>
    test_assert(m == 1, "event flag error");
 8007ab2:	f1a4 0001 	sub.w	r0, r4, #1
 8007ab6:	fab0 f080 	clz	r0, r0
 8007aba:	4911      	ldr	r1, [pc, #68]	; (8007b00 <rt_test_009_004_execute+0xc0>)
 8007abc:	0940      	lsrs	r0, r0, #5
 8007abe:	f7f8 ff8f 	bl	80009e0 <_test_assert>
 8007ac2:	2800      	cmp	r0, #0
 8007ac4:	d1ce      	bne.n	8007a64 <rt_test_009_004_execute+0x24>
    m = chEvtGetAndClearEvents(ALL_EVENTS);
 8007ac6:	f7f8 fd13 	bl	80004f0 <chEvtGetAndClearEvents.constprop.0>
    test_assert(m == 0, "stuck event");
 8007aca:	fab0 f080 	clz	r0, r0
 8007ace:	4907      	ldr	r1, [pc, #28]	; (8007aec <rt_test_009_004_execute+0xac>)
 8007ad0:	0940      	lsrs	r0, r0, #5
 8007ad2:	f7f8 ff85 	bl	80009e0 <_test_assert>
 8007ad6:	2800      	cmp	r0, #0
 8007ad8:	d1c4      	bne.n	8007a64 <rt_test_009_004_execute+0x24>
}
 8007ada:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    test_wait_threads();
 8007ade:	f7ff baef 	b.w	80070c0 <test_wait_threads>
 8007ae2:	bf00      	nop
 8007ae4:	2000149c 	.word	0x2000149c
 8007ae8:	0800a3d4 	.word	0x0800a3d4
 8007aec:	0800a3c8 	.word	0x0800a3c8
 8007af0:	200009b0 	.word	0x200009b0
 8007af4:	08004031 	.word	0x08004031
 8007af8:	20000d88 	.word	0x20000d88
 8007afc:	200014b4 	.word	0x200014b4
 8007b00:	0800a400 	.word	0x0800a400
	...

08007b10 <rt_test_009_003_execute>:
static void rt_test_009_003_execute(void) {
 8007b10:	b538      	push	{r3, r4, r5, lr}
    chEvtAddEvents(7);
 8007b12:	2007      	movs	r0, #7
  test_set_step(2);
 8007b14:	4c33      	ldr	r4, [pc, #204]	; (8007be4 <rt_test_009_003_execute+0xd4>)
    chEvtAddEvents(7);
 8007b16:	f7f9 fa2b 	bl	8000f70 <chEvtAddEvents>
  test_set_step(2);
 8007b1a:	2302      	movs	r3, #2
 8007b1c:	6023      	str	r3, [r4, #0]
    m = chEvtWaitOne(ALL_EVENTS);
 8007b1e:	f7fa fb9f 	bl	8002260 <chEvtWaitOne.constprop.0>
    test_assert(m == 1, "single event error");
 8007b22:	f1a0 0001 	sub.w	r0, r0, #1
 8007b26:	fab0 f080 	clz	r0, r0
 8007b2a:	492f      	ldr	r1, [pc, #188]	; (8007be8 <rt_test_009_003_execute+0xd8>)
 8007b2c:	0940      	lsrs	r0, r0, #5
 8007b2e:	f7f8 ff57 	bl	80009e0 <_test_assert>
 8007b32:	b100      	cbz	r0, 8007b36 <rt_test_009_003_execute+0x26>
}
 8007b34:	bd38      	pop	{r3, r4, r5, pc}
    m = chEvtWaitOne(ALL_EVENTS);
 8007b36:	f7fa fb93 	bl	8002260 <chEvtWaitOne.constprop.0>
    test_assert(m == 2, "single event error");
 8007b3a:	f1a0 0002 	sub.w	r0, r0, #2
 8007b3e:	fab0 f080 	clz	r0, r0
 8007b42:	4929      	ldr	r1, [pc, #164]	; (8007be8 <rt_test_009_003_execute+0xd8>)
 8007b44:	0940      	lsrs	r0, r0, #5
 8007b46:	f7f8 ff4b 	bl	80009e0 <_test_assert>
 8007b4a:	2800      	cmp	r0, #0
 8007b4c:	d1f2      	bne.n	8007b34 <rt_test_009_003_execute+0x24>
    m = chEvtWaitOne(ALL_EVENTS);
 8007b4e:	f7fa fb87 	bl	8002260 <chEvtWaitOne.constprop.0>
    test_assert(m == 4, "single event error");
 8007b52:	f1a0 0004 	sub.w	r0, r0, #4
 8007b56:	fab0 f080 	clz	r0, r0
 8007b5a:	4923      	ldr	r1, [pc, #140]	; (8007be8 <rt_test_009_003_execute+0xd8>)
 8007b5c:	0940      	lsrs	r0, r0, #5
 8007b5e:	f7f8 ff3f 	bl	80009e0 <_test_assert>
 8007b62:	2800      	cmp	r0, #0
 8007b64:	d1e6      	bne.n	8007b34 <rt_test_009_003_execute+0x24>
    m = chEvtGetAndClearEvents(ALL_EVENTS);
 8007b66:	f7f8 fcc3 	bl	80004f0 <chEvtGetAndClearEvents.constprop.0>
    test_assert(m == 0, "stuck event");
 8007b6a:	fab0 f080 	clz	r0, r0
 8007b6e:	491f      	ldr	r1, [pc, #124]	; (8007bec <rt_test_009_003_execute+0xdc>)
 8007b70:	0940      	lsrs	r0, r0, #5
 8007b72:	f7f8 ff35 	bl	80009e0 <_test_assert>
 8007b76:	2800      	cmp	r0, #0
 8007b78:	d1dc      	bne.n	8007b34 <rt_test_009_003_execute+0x24>
  test_set_step(3);
 8007b7a:	2303      	movs	r3, #3
 8007b7c:	6023      	str	r3, [r4, #0]
    target_time = chTimeAddX(test_wait_tick(), TIME_MS2I(50));
 8007b7e:	f7fb f997 	bl	8002eb0 <test_wait_tick>
 8007b82:	4b1b      	ldr	r3, [pc, #108]	; (8007bf0 <rt_test_009_003_execute+0xe0>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8007b84:	4a1b      	ldr	r2, [pc, #108]	; (8007bf4 <rt_test_009_003_execute+0xe4>)
 8007b86:	699b      	ldr	r3, [r3, #24]
 8007b88:	6899      	ldr	r1, [r3, #8]
    target_time = chTimeAddX(test_wait_tick(), TIME_MS2I(50));
 8007b8a:	4605      	mov	r5, r0
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8007b8c:	3901      	subs	r1, #1
 8007b8e:	481a      	ldr	r0, [pc, #104]	; (8007bf8 <rt_test_009_003_execute+0xe8>)
 8007b90:	f7fa fa66 	bl	8002060 <chThdCreateStatic.constprop.0>
 8007b94:	4a19      	ldr	r2, [pc, #100]	; (8007bfc <rt_test_009_003_execute+0xec>)
  test_set_step(4);
 8007b96:	2304      	movs	r3, #4
 8007b98:	6023      	str	r3, [r4, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8007b9a:	6010      	str	r0, [r2, #0]
    m = chEvtWaitOne(ALL_EVENTS);
 8007b9c:	f7fa fb60 	bl	8002260 <chEvtWaitOne.constprop.0>
    test_assert_time_window(target_time,
 8007ba0:	f505 7102 	add.w	r1, r5, #520	; 0x208
    m = chEvtWaitOne(ALL_EVENTS);
 8007ba4:	4604      	mov	r4, r0
    test_assert_time_window(target_time,
 8007ba6:	f505 70fa 	add.w	r0, r5, #500	; 0x1f4
 8007baa:	f7f8 fcb1 	bl	8000510 <_test_assert_time_window.constprop.0>
 8007bae:	2800      	cmp	r0, #0
 8007bb0:	d1c0      	bne.n	8007b34 <rt_test_009_003_execute+0x24>
    test_assert(m == 1, "event flag error");
 8007bb2:	f1a4 0001 	sub.w	r0, r4, #1
 8007bb6:	fab0 f080 	clz	r0, r0
 8007bba:	4911      	ldr	r1, [pc, #68]	; (8007c00 <rt_test_009_003_execute+0xf0>)
 8007bbc:	0940      	lsrs	r0, r0, #5
 8007bbe:	f7f8 ff0f 	bl	80009e0 <_test_assert>
 8007bc2:	2800      	cmp	r0, #0
 8007bc4:	d1b6      	bne.n	8007b34 <rt_test_009_003_execute+0x24>
    m = chEvtGetAndClearEvents(ALL_EVENTS);
 8007bc6:	f7f8 fc93 	bl	80004f0 <chEvtGetAndClearEvents.constprop.0>
    test_assert(m == 0, "stuck event");
 8007bca:	fab0 f080 	clz	r0, r0
 8007bce:	4907      	ldr	r1, [pc, #28]	; (8007bec <rt_test_009_003_execute+0xdc>)
 8007bd0:	0940      	lsrs	r0, r0, #5
 8007bd2:	f7f8 ff05 	bl	80009e0 <_test_assert>
 8007bd6:	2800      	cmp	r0, #0
 8007bd8:	d1ac      	bne.n	8007b34 <rt_test_009_003_execute+0x24>
}
 8007bda:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    test_wait_threads();
 8007bde:	f7ff ba6f 	b.w	80070c0 <test_wait_threads>
 8007be2:	bf00      	nop
 8007be4:	2000149c 	.word	0x2000149c
 8007be8:	0800a414 	.word	0x0800a414
 8007bec:	0800a3c8 	.word	0x0800a3c8
 8007bf0:	200009b0 	.word	0x200009b0
 8007bf4:	08004031 	.word	0x08004031
 8007bf8:	20000d88 	.word	0x20000d88
 8007bfc:	200014b4 	.word	0x200014b4
 8007c00:	0800a400 	.word	0x0800a400
	...

08007c10 <rt_test_008_001_execute>:
 * - [8.1.1] Starting the messenger thread.
 * - [8.1.2] Waiting for four messages then testing the receive order.
 * .
 */

static void rt_test_008_001_execute(void) {
 8007c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c12:	4b16      	ldr	r3, [pc, #88]	; (8007c6c <rt_test_008_001_execute+0x5c>)
  thread_t *tp;
  msg_t msg;

  /* [8.1.1] Starting the messenger thread.*/
  test_set_step(1);
 8007c14:	4c16      	ldr	r4, [pc, #88]	; (8007c70 <rt_test_008_001_execute+0x60>)
 8007c16:	699b      	ldr	r3, [r3, #24]
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() + 1,
 8007c18:	4a16      	ldr	r2, [pc, #88]	; (8007c74 <rt_test_008_001_execute+0x64>)
 8007c1a:	6899      	ldr	r1, [r3, #8]
 8007c1c:	4816      	ldr	r0, [pc, #88]	; (8007c78 <rt_test_008_001_execute+0x68>)
 8007c1e:	3101      	adds	r1, #1
  test_set_step(1);
 8007c20:	2501      	movs	r5, #1
 8007c22:	6025      	str	r5, [r4, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() + 1,
 8007c24:	f7fa fa1c 	bl	8002060 <chThdCreateStatic.constprop.0>
 8007c28:	4a14      	ldr	r2, [pc, #80]	; (8007c7c <rt_test_008_001_execute+0x6c>)
  }
  test_end_step(1);

  /* [8.1.2] Waiting for four messages then testing the receive
     order.*/
  test_set_step(2);
 8007c2a:	2302      	movs	r3, #2
 8007c2c:	6023      	str	r3, [r4, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() + 1,
 8007c2e:	6010      	str	r0, [r2, #0]
  test_set_step(2);
 8007c30:	2404      	movs	r4, #4
 8007c32:	2720      	movs	r7, #32
 8007c34:	2600      	movs	r6, #0
 8007c36:	f387 8811 	msr	BASEPRI, r7
  tp = chMsgWaitS();
 8007c3a:	f7fb f999 	bl	8002f70 <chMsgWaitS>
 8007c3e:	f386 8811 	msr	BASEPRI, r6
  {
    unsigned i;

    for (i = 0; i < 4; i++) {
      tp = chMsgWait();
      msg = chMsgGet(tp);
 8007c42:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007c44:	f387 8811 	msr	BASEPRI, r7
  chSchWakeupS(tp, msg);
 8007c48:	4629      	mov	r1, r5
 8007c4a:	f7fa f9d9 	bl	8002000 <chSchWakeupS>
 8007c4e:	f386 8811 	msr	BASEPRI, r6
      chMsgRelease(tp, msg);
      test_emit_token(msg);
 8007c52:	b2e8      	uxtb	r0, r5
 8007c54:	f7f8 ff6c 	bl	8000b30 <test_emit_token>
    for (i = 0; i < 4; i++) {
 8007c58:	3c01      	subs	r4, #1
 8007c5a:	d1ec      	bne.n	8007c36 <rt_test_008_001_execute+0x26>
    }
    test_wait_threads();
 8007c5c:	f7ff fa30 	bl	80070c0 <test_wait_threads>
    test_assert_sequence("ABCD", "invalid sequence");
  }
  test_end_step(2);
}
 8007c60:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    test_assert_sequence("ABCD", "invalid sequence");
 8007c64:	4906      	ldr	r1, [pc, #24]	; (8007c80 <rt_test_008_001_execute+0x70>)
 8007c66:	4807      	ldr	r0, [pc, #28]	; (8007c84 <rt_test_008_001_execute+0x74>)
 8007c68:	f7f9 b83a 	b.w	8000ce0 <_test_assert_sequence>
 8007c6c:	200009b0 	.word	0x200009b0
 8007c70:	2000149c 	.word	0x2000149c
 8007c74:	08003061 	.word	0x08003061
 8007c78:	20000d88 	.word	0x20000d88
 8007c7c:	200014b4 	.word	0x200014b4
 8007c80:	08009020 	.word	0x08009020
 8007c84:	0800a068 	.word	0x0800a068
	...

08007c90 <rt_test_007_009_execute>:

static void rt_test_007_009_execute(void) {
 8007c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c92:	4b1e      	ldr	r3, [pc, #120]	; (8007d0c <rt_test_007_009_execute+0x7c>)

  /* [7.9.2] Thread A is created at priority P(+1), it locks M2, locks
     M1 and goes to wait on C1.*/
  test_set_step(2);
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread8, "A");
 8007c94:	4e1e      	ldr	r6, [pc, #120]	; (8007d10 <rt_test_007_009_execute+0x80>)
  return chThdGetSelfX()->prio;
 8007c96:	699b      	ldr	r3, [r3, #24]
  test_set_step(2);
 8007c98:	4c1e      	ldr	r4, [pc, #120]	; (8007d14 <rt_test_007_009_execute+0x84>)
 8007c9a:	689f      	ldr	r7, [r3, #8]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread8, "A");
 8007c9c:	4a1e      	ldr	r2, [pc, #120]	; (8007d18 <rt_test_007_009_execute+0x88>)
 8007c9e:	4b1f      	ldr	r3, [pc, #124]	; (8007d1c <rt_test_007_009_execute+0x8c>)
 8007ca0:	4d1f      	ldr	r5, [pc, #124]	; (8007d20 <rt_test_007_009_execute+0x90>)
 8007ca2:	1c79      	adds	r1, r7, #1
  test_set_step(2);
 8007ca4:	f04f 0c02 	mov.w	ip, #2
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread8, "A");
 8007ca8:	4630      	mov	r0, r6
  test_set_step(2);
 8007caa:	f8c4 c000 	str.w	ip, [r4]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread8, "A");
 8007cae:	f7fa f9d7 	bl	8002060 <chThdCreateStatic.constprop.0>
 8007cb2:	4602      	mov	r2, r0
  }
  test_end_step(2);

  /* [7.9.3] Thread C is created at priority P(+2), it enqueues on M1
     and boosts TA priority at P(+2).*/
  test_set_step(3);
 8007cb4:	f04f 0c03 	mov.w	ip, #3
  {
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "C");
 8007cb8:	1cb9      	adds	r1, r7, #2
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread8, "A");
 8007cba:	602a      	str	r2, [r5, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "C");
 8007cbc:	4b19      	ldr	r3, [pc, #100]	; (8007d24 <rt_test_007_009_execute+0x94>)
 8007cbe:	4a1a      	ldr	r2, [pc, #104]	; (8007d28 <rt_test_007_009_execute+0x98>)
  test_set_step(3);
 8007cc0:	f8c4 c000 	str.w	ip, [r4]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "C");
 8007cc4:	f506 70a4 	add.w	r0, r6, #328	; 0x148
 8007cc8:	f7fa f9ca 	bl	8002060 <chThdCreateStatic.constprop.0>

  /* [7.9.4] Thread B is created at priority P(+3), it enqueues on M2
     and boosts TA priority at P(+3).*/
  test_set_step(4);
  {
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread9, "B");
 8007ccc:	1cf9      	adds	r1, r7, #3
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "C");
 8007cce:	4684      	mov	ip, r0
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread9, "B");
 8007cd0:	4a16      	ldr	r2, [pc, #88]	; (8007d2c <rt_test_007_009_execute+0x9c>)
 8007cd2:	4b17      	ldr	r3, [pc, #92]	; (8007d30 <rt_test_007_009_execute+0xa0>)
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "C");
 8007cd4:	f8c5 c004 	str.w	ip, [r5, #4]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread9, "B");
 8007cd8:	f506 7024 	add.w	r0, r6, #656	; 0x290
  test_set_step(4);
 8007cdc:	2604      	movs	r6, #4
 8007cde:	6026      	str	r6, [r4, #0]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread9, "B");
 8007ce0:	f7fa f9be 	bl	8002060 <chThdCreateStatic.constprop.0>
  test_end_step(4);

  /* [7.9.5] Signaling C1: TA wakes up, unlocks M1 and priority goes to
     P(+2). TB locks M1, unlocks M1 and completes. TA unlocks M2 and
     priority goes to P(+1). TC waits on C1. TA completes.*/
  test_set_step(5);
 8007ce4:	2305      	movs	r3, #5
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread9, "B");
 8007ce6:	60a8      	str	r0, [r5, #8]
  test_set_step(5);
 8007ce8:	6023      	str	r3, [r4, #0]
  {
    chCondSignal(&c1);
 8007cea:	f7fa fa29 	bl	8002140 <chCondSignal.constprop.0>
  }
  test_end_step(5);

  /* [7.9.6] Signaling C1: TC wakes up, unlocks M1 and completes.*/
  test_set_step(6);
 8007cee:	2306      	movs	r3, #6
 8007cf0:	6023      	str	r3, [r4, #0]
  {
    chCondSignal(&c1);
 8007cf2:	f7fa fa25 	bl	8002140 <chCondSignal.constprop.0>
  }
  test_end_step(6);

  /* [7.9.7] Checking the order of operations.*/
  test_set_step(7);
 8007cf6:	2307      	movs	r3, #7
 8007cf8:	6023      	str	r3, [r4, #0]
  {
    test_wait_threads();
 8007cfa:	f7ff f9e1 	bl	80070c0 <test_wait_threads>
    test_assert_sequence("ABC", "invalid sequence");
  }
  test_end_step(7);
}
 8007cfe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    test_assert_sequence("ABC", "invalid sequence");
 8007d02:	490c      	ldr	r1, [pc, #48]	; (8007d34 <rt_test_007_009_execute+0xa4>)
 8007d04:	480c      	ldr	r0, [pc, #48]	; (8007d38 <rt_test_007_009_execute+0xa8>)
 8007d06:	f7f8 bfeb 	b.w	8000ce0 <_test_assert_sequence>
 8007d0a:	bf00      	nop
 8007d0c:	200009b0 	.word	0x200009b0
 8007d10:	20000d88 	.word	0x20000d88
 8007d14:	2000149c 	.word	0x2000149c
 8007d18:	080059a1 	.word	0x080059a1
 8007d1c:	0800a138 	.word	0x0800a138
 8007d20:	200014b4 	.word	0x200014b4
 8007d24:	0800a2f8 	.word	0x0800a2f8
 8007d28:	08005a31 	.word	0x08005a31
 8007d2c:	08005aa1 	.word	0x08005aa1
 8007d30:	0800a13c 	.word	0x0800a13c
 8007d34:	08009020 	.word	0x08009020
 8007d38:	08009034 	.word	0x08009034
 8007d3c:	00000000 	.word	0x00000000

08007d40 <rt_test_007_008_execute>:
static void rt_test_007_008_execute(void) {
 8007d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  return ch.rlist.current;
 8007d42:	4b28      	ldr	r3, [pc, #160]	; (8007de4 <rt_test_007_008_execute+0xa4>)
  test_set_step(1);
 8007d44:	4e28      	ldr	r6, [pc, #160]	; (8007de8 <rt_test_007_008_execute+0xa8>)
  return chThdGetSelfX()->prio;
 8007d46:	699a      	ldr	r2, [r3, #24]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread6, "E");
 8007d48:	4828      	ldr	r0, [pc, #160]	; (8007dec <rt_test_007_008_execute+0xac>)
 8007d4a:	6895      	ldr	r5, [r2, #8]
 8007d4c:	4b28      	ldr	r3, [pc, #160]	; (8007df0 <rt_test_007_008_execute+0xb0>)
 8007d4e:	4a29      	ldr	r2, [pc, #164]	; (8007df4 <rt_test_007_008_execute+0xb4>)
 8007d50:	4c29      	ldr	r4, [pc, #164]	; (8007df8 <rt_test_007_008_execute+0xb8>)
 8007d52:	1c69      	adds	r1, r5, #1
  test_set_step(1);
 8007d54:	2701      	movs	r7, #1
 8007d56:	6037      	str	r7, [r6, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread6, "E");
 8007d58:	f7fa f982 	bl	8002060 <chThdCreateStatic.constprop.0>
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "D");
 8007d5c:	1ca9      	adds	r1, r5, #2
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread6, "E");
 8007d5e:	4607      	mov	r7, r0
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "D");
 8007d60:	4b26      	ldr	r3, [pc, #152]	; (8007dfc <rt_test_007_008_execute+0xbc>)
 8007d62:	4a24      	ldr	r2, [pc, #144]	; (8007df4 <rt_test_007_008_execute+0xb4>)
 8007d64:	4826      	ldr	r0, [pc, #152]	; (8007e00 <rt_test_007_008_execute+0xc0>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread6, "E");
 8007d66:	6027      	str	r7, [r4, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "D");
 8007d68:	f7fa f97a 	bl	8002060 <chThdCreateStatic.constprop.0>
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread6, "C");
 8007d6c:	1ce9      	adds	r1, r5, #3
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "D");
 8007d6e:	4607      	mov	r7, r0
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread6, "C");
 8007d70:	4b24      	ldr	r3, [pc, #144]	; (8007e04 <rt_test_007_008_execute+0xc4>)
 8007d72:	4a20      	ldr	r2, [pc, #128]	; (8007df4 <rt_test_007_008_execute+0xb4>)
 8007d74:	4824      	ldr	r0, [pc, #144]	; (8007e08 <rt_test_007_008_execute+0xc8>)
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "D");
 8007d76:	6067      	str	r7, [r4, #4]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread6, "C");
 8007d78:	f7fa f972 	bl	8002060 <chThdCreateStatic.constprop.0>
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread6, "B");
 8007d7c:	1d29      	adds	r1, r5, #4
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread6, "C");
 8007d7e:	4607      	mov	r7, r0
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread6, "B");
 8007d80:	4b22      	ldr	r3, [pc, #136]	; (8007e0c <rt_test_007_008_execute+0xcc>)
 8007d82:	4a1c      	ldr	r2, [pc, #112]	; (8007df4 <rt_test_007_008_execute+0xb4>)
 8007d84:	4822      	ldr	r0, [pc, #136]	; (8007e10 <rt_test_007_008_execute+0xd0>)
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread6, "C");
 8007d86:	60a7      	str	r7, [r4, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread6, "B");
 8007d88:	f7fa f96a 	bl	8002060 <chThdCreateStatic.constprop.0>
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread6, "A");
 8007d8c:	4b21      	ldr	r3, [pc, #132]	; (8007e14 <rt_test_007_008_execute+0xd4>)
 8007d8e:	4a19      	ldr	r2, [pc, #100]	; (8007df4 <rt_test_007_008_execute+0xb4>)
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread6, "B");
 8007d90:	4607      	mov	r7, r0
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread6, "A");
 8007d92:	1d69      	adds	r1, r5, #5
 8007d94:	4820      	ldr	r0, [pc, #128]	; (8007e18 <rt_test_007_008_execute+0xd8>)
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread6, "B");
 8007d96:	60e7      	str	r7, [r4, #12]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread6, "A");
 8007d98:	f7fa f962 	bl	8002060 <chThdCreateStatic.constprop.0>
  test_set_step(2);
 8007d9c:	2302      	movs	r3, #2
 8007d9e:	6033      	str	r3, [r6, #0]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread6, "A");
 8007da0:	6120      	str	r0, [r4, #16]
 8007da2:	2320      	movs	r3, #32
 8007da4:	f383 8811 	msr	BASEPRI, r3
  return (bool)(tqp->next != (const thread_t *)tqp);
 8007da8:	4c1c      	ldr	r4, [pc, #112]	; (8007e1c <rt_test_007_008_execute+0xdc>)
 8007daa:	6823      	ldr	r3, [r4, #0]
  while (queue_notempty(&cp->queue)) {
 8007dac:	42a3      	cmp	r3, r4
 8007dae:	d00b      	beq.n	8007dc8 <rt_test_007_008_execute+0x88>
    chSchReadyI(queue_fifo_remove(&cp->queue))->u.rdymsg = MSG_RESET;
 8007db0:	f06f 0501 	mvn.w	r5, #1
  tqp->next             = tp->queue.next;
 8007db4:	681a      	ldr	r2, [r3, #0]
 8007db6:	6022      	str	r2, [r4, #0]
 8007db8:	4618      	mov	r0, r3
  tqp->next->queue.prev = (thread_t *)tqp;
 8007dba:	6054      	str	r4, [r2, #4]
 8007dbc:	f7f9 fa28 	bl	8001210 <chSchReadyI>
  return (bool)(tqp->next != (const thread_t *)tqp);
 8007dc0:	6823      	ldr	r3, [r4, #0]
 8007dc2:	6245      	str	r5, [r0, #36]	; 0x24
  while (queue_notempty(&cp->queue)) {
 8007dc4:	42a3      	cmp	r3, r4
 8007dc6:	d1f5      	bne.n	8007db4 <rt_test_007_008_execute+0x74>
  chSchRescheduleS();
 8007dc8:	f7fb fd9a 	bl	8003900 <chSchRescheduleS>
 8007dcc:	2300      	movs	r3, #0
 8007dce:	f383 8811 	msr	BASEPRI, r3
    test_wait_threads();
 8007dd2:	f7ff f975 	bl	80070c0 <test_wait_threads>
}
 8007dd6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    test_assert_sequence("ABCDE", "invalid sequence");
 8007dda:	4911      	ldr	r1, [pc, #68]	; (8007e20 <rt_test_007_008_execute+0xe0>)
 8007ddc:	4811      	ldr	r0, [pc, #68]	; (8007e24 <rt_test_007_008_execute+0xe4>)
 8007dde:	f7f8 bf7f 	b.w	8000ce0 <_test_assert_sequence>
 8007de2:	bf00      	nop
 8007de4:	200009b0 	.word	0x200009b0
 8007de8:	2000149c 	.word	0x2000149c
 8007dec:	20000d88 	.word	0x20000d88
 8007df0:	0800a42c 	.word	0x0800a42c
 8007df4:	08005a31 	.word	0x08005a31
 8007df8:	200014b4 	.word	0x200014b4
 8007dfc:	0800a304 	.word	0x0800a304
 8007e00:	20000ed0 	.word	0x20000ed0
 8007e04:	0800a2f8 	.word	0x0800a2f8
 8007e08:	20001018 	.word	0x20001018
 8007e0c:	0800a13c 	.word	0x0800a13c
 8007e10:	20001160 	.word	0x20001160
 8007e14:	0800a138 	.word	0x0800a138
 8007e18:	200012a8 	.word	0x200012a8
 8007e1c:	20000800 	.word	0x20000800
 8007e20:	08009020 	.word	0x08009020
 8007e24:	0800a428 	.word	0x0800a428
	...

08007e30 <rt_test_007_007_execute>:
  return ch.rlist.current;
 8007e30:	4b2c      	ldr	r3, [pc, #176]	; (8007ee4 <rt_test_007_007_execute+0xb4>)
  return chThdGetSelfX()->prio;
 8007e32:	699b      	ldr	r3, [r3, #24]
static void rt_test_007_007_execute(void) {
 8007e34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e38:	689f      	ldr	r7, [r3, #8]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread6, "E");
 8007e3a:	4e2b      	ldr	r6, [pc, #172]	; (8007ee8 <rt_test_007_007_execute+0xb8>)
 8007e3c:	4d2b      	ldr	r5, [pc, #172]	; (8007eec <rt_test_007_007_execute+0xbc>)
  test_set_step(1);
 8007e3e:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007f10 <rt_test_007_007_execute+0xe0>
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread6, "E");
 8007e42:	4b2b      	ldr	r3, [pc, #172]	; (8007ef0 <rt_test_007_007_execute+0xc0>)
 8007e44:	4c2b      	ldr	r4, [pc, #172]	; (8007ef4 <rt_test_007_007_execute+0xc4>)
 8007e46:	1c79      	adds	r1, r7, #1
 8007e48:	4632      	mov	r2, r6
  test_set_step(1);
 8007e4a:	f04f 0c01 	mov.w	ip, #1
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread6, "E");
 8007e4e:	4628      	mov	r0, r5
  test_set_step(1);
 8007e50:	f8c8 c000 	str.w	ip, [r8]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread6, "E");
 8007e54:	f7fa f904 	bl	8002060 <chThdCreateStatic.constprop.0>
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "D");
 8007e58:	1cb9      	adds	r1, r7, #2
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread6, "E");
 8007e5a:	4684      	mov	ip, r0
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "D");
 8007e5c:	4632      	mov	r2, r6
 8007e5e:	4b26      	ldr	r3, [pc, #152]	; (8007ef8 <rt_test_007_007_execute+0xc8>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread6, "E");
 8007e60:	f8c4 c000 	str.w	ip, [r4]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "D");
 8007e64:	f505 70a4 	add.w	r0, r5, #328	; 0x148
 8007e68:	f7fa f8fa 	bl	8002060 <chThdCreateStatic.constprop.0>
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread6, "C");
 8007e6c:	1cf9      	adds	r1, r7, #3
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "D");
 8007e6e:	4684      	mov	ip, r0
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread6, "C");
 8007e70:	4632      	mov	r2, r6
 8007e72:	4b22      	ldr	r3, [pc, #136]	; (8007efc <rt_test_007_007_execute+0xcc>)
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "D");
 8007e74:	f8c4 c004 	str.w	ip, [r4, #4]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread6, "C");
 8007e78:	f505 7024 	add.w	r0, r5, #656	; 0x290
 8007e7c:	f7fa f8f0 	bl	8002060 <chThdCreateStatic.constprop.0>
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread6, "B");
 8007e80:	1d39      	adds	r1, r7, #4
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread6, "C");
 8007e82:	4684      	mov	ip, r0
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread6, "B");
 8007e84:	4632      	mov	r2, r6
 8007e86:	4b1e      	ldr	r3, [pc, #120]	; (8007f00 <rt_test_007_007_execute+0xd0>)
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread6, "C");
 8007e88:	f8c4 c008 	str.w	ip, [r4, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread6, "B");
 8007e8c:	f505 7076 	add.w	r0, r5, #984	; 0x3d8
 8007e90:	f7fa f8e6 	bl	8002060 <chThdCreateStatic.constprop.0>
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread6, "A");
 8007e94:	4b1b      	ldr	r3, [pc, #108]	; (8007f04 <rt_test_007_007_execute+0xd4>)
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread6, "B");
 8007e96:	4684      	mov	ip, r0
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread6, "A");
 8007e98:	1d79      	adds	r1, r7, #5
 8007e9a:	4632      	mov	r2, r6
 8007e9c:	f505 60a4 	add.w	r0, r5, #1312	; 0x520
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread6, "B");
 8007ea0:	f8c4 c00c 	str.w	ip, [r4, #12]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread6, "A");
 8007ea4:	f7fa f8dc 	bl	8002060 <chThdCreateStatic.constprop.0>
  test_set_step(2);
 8007ea8:	2302      	movs	r3, #2
 8007eaa:	f8c8 3000 	str.w	r3, [r8]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread6, "A");
 8007eae:	6120      	str	r0, [r4, #16]
 8007eb0:	2320      	movs	r3, #32
 8007eb2:	f383 8811 	msr	BASEPRI, r3
    chCondSignalI(&c1);
 8007eb6:	f7f9 fa63 	bl	8001380 <chCondSignalI.constprop.0>
    chCondSignalI(&c1);
 8007eba:	f7f9 fa61 	bl	8001380 <chCondSignalI.constprop.0>
    chCondSignalI(&c1);
 8007ebe:	f7f9 fa5f 	bl	8001380 <chCondSignalI.constprop.0>
    chCondSignalI(&c1);
 8007ec2:	f7f9 fa5d 	bl	8001380 <chCondSignalI.constprop.0>
    chCondSignalI(&c1);
 8007ec6:	f7f9 fa5b 	bl	8001380 <chCondSignalI.constprop.0>
    chSchRescheduleS();
 8007eca:	f7fb fd19 	bl	8003900 <chSchRescheduleS>
 8007ece:	2300      	movs	r3, #0
 8007ed0:	f383 8811 	msr	BASEPRI, r3
    test_wait_threads();
 8007ed4:	f7ff f8f4 	bl	80070c0 <test_wait_threads>
}
 8007ed8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    test_assert_sequence("ABCDE", "invalid sequence");
 8007edc:	490a      	ldr	r1, [pc, #40]	; (8007f08 <rt_test_007_007_execute+0xd8>)
 8007ede:	480b      	ldr	r0, [pc, #44]	; (8007f0c <rt_test_007_007_execute+0xdc>)
 8007ee0:	f7f8 befe 	b.w	8000ce0 <_test_assert_sequence>
 8007ee4:	200009b0 	.word	0x200009b0
 8007ee8:	08005a31 	.word	0x08005a31
 8007eec:	20000d88 	.word	0x20000d88
 8007ef0:	0800a42c 	.word	0x0800a42c
 8007ef4:	200014b4 	.word	0x200014b4
 8007ef8:	0800a304 	.word	0x0800a304
 8007efc:	0800a2f8 	.word	0x0800a2f8
 8007f00:	0800a13c 	.word	0x0800a13c
 8007f04:	0800a138 	.word	0x0800a138
 8007f08:	08009020 	.word	0x08009020
 8007f0c:	0800a428 	.word	0x0800a428
 8007f10:	2000149c 	.word	0x2000149c
	...

08007f20 <rt_test_006_006_teardown>:
  test_wait_threads();
 8007f20:	f7ff b8ce 	b.w	80070c0 <test_wait_threads>
	...

08007f30 <rt_test_007_004_teardown>:
 8007f30:	f7ff b8c6 	b.w	80070c0 <test_wait_threads>
	...

08007f40 <rt_test_007_001_execute>:
static void rt_test_007_001_execute(void) {
 8007f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  return ch.rlist.current;
 8007f42:	4f29      	ldr	r7, [pc, #164]	; (8007fe8 <rt_test_007_001_execute+0xa8>)
  test_set_step(2);
 8007f44:	4e29      	ldr	r6, [pc, #164]	; (8007fec <rt_test_007_001_execute+0xac>)
  return chThdGetSelfX()->prio;
 8007f46:	69bb      	ldr	r3, [r7, #24]
    chMtxLock(&m1);
 8007f48:	4829      	ldr	r0, [pc, #164]	; (8007ff0 <rt_test_007_001_execute+0xb0>)
 8007f4a:	689c      	ldr	r4, [r3, #8]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread1, "E");
 8007f4c:	4d29      	ldr	r5, [pc, #164]	; (8007ff4 <rt_test_007_001_execute+0xb4>)
  test_set_step(2);
 8007f4e:	2302      	movs	r3, #2
 8007f50:	6033      	str	r3, [r6, #0]
    chMtxLock(&m1);
 8007f52:	f7fb f915 	bl	8003180 <chMtxLock>
  test_set_step(3);
 8007f56:	f04f 0c03 	mov.w	ip, #3
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread1, "E");
 8007f5a:	4b27      	ldr	r3, [pc, #156]	; (8007ff8 <rt_test_007_001_execute+0xb8>)
 8007f5c:	4a27      	ldr	r2, [pc, #156]	; (8007ffc <rt_test_007_001_execute+0xbc>)
 8007f5e:	4828      	ldr	r0, [pc, #160]	; (8008000 <rt_test_007_001_execute+0xc0>)
  test_set_step(3);
 8007f60:	f8c6 c000 	str.w	ip, [r6]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread1, "E");
 8007f64:	1c61      	adds	r1, r4, #1
 8007f66:	f7fa f87b 	bl	8002060 <chThdCreateStatic.constprop.0>
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread1, "D");
 8007f6a:	4b26      	ldr	r3, [pc, #152]	; (8008004 <rt_test_007_001_execute+0xc4>)
 8007f6c:	4a23      	ldr	r2, [pc, #140]	; (8007ffc <rt_test_007_001_execute+0xbc>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread1, "E");
 8007f6e:	4684      	mov	ip, r0
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread1, "D");
 8007f70:	1ca1      	adds	r1, r4, #2
 8007f72:	4825      	ldr	r0, [pc, #148]	; (8008008 <rt_test_007_001_execute+0xc8>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread1, "E");
 8007f74:	f8c5 c000 	str.w	ip, [r5]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread1, "D");
 8007f78:	f7fa f872 	bl	8002060 <chThdCreateStatic.constprop.0>
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread1, "C");
 8007f7c:	4b23      	ldr	r3, [pc, #140]	; (800800c <rt_test_007_001_execute+0xcc>)
 8007f7e:	4a1f      	ldr	r2, [pc, #124]	; (8007ffc <rt_test_007_001_execute+0xbc>)
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread1, "D");
 8007f80:	4684      	mov	ip, r0
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread1, "C");
 8007f82:	1ce1      	adds	r1, r4, #3
 8007f84:	4822      	ldr	r0, [pc, #136]	; (8008010 <rt_test_007_001_execute+0xd0>)
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread1, "D");
 8007f86:	f8c5 c004 	str.w	ip, [r5, #4]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread1, "C");
 8007f8a:	f7fa f869 	bl	8002060 <chThdCreateStatic.constprop.0>
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread1, "B");
 8007f8e:	4b21      	ldr	r3, [pc, #132]	; (8008014 <rt_test_007_001_execute+0xd4>)
 8007f90:	4a1a      	ldr	r2, [pc, #104]	; (8007ffc <rt_test_007_001_execute+0xbc>)
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread1, "C");
 8007f92:	4684      	mov	ip, r0
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread1, "B");
 8007f94:	1d21      	adds	r1, r4, #4
 8007f96:	4820      	ldr	r0, [pc, #128]	; (8008018 <rt_test_007_001_execute+0xd8>)
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread1, "C");
 8007f98:	f8c5 c008 	str.w	ip, [r5, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread1, "B");
 8007f9c:	f7fa f860 	bl	8002060 <chThdCreateStatic.constprop.0>
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread1, "A");
 8007fa0:	1d61      	adds	r1, r4, #5
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread1, "B");
 8007fa2:	4684      	mov	ip, r0
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread1, "A");
 8007fa4:	4b1d      	ldr	r3, [pc, #116]	; (800801c <rt_test_007_001_execute+0xdc>)
 8007fa6:	4a15      	ldr	r2, [pc, #84]	; (8007ffc <rt_test_007_001_execute+0xbc>)
 8007fa8:	481d      	ldr	r0, [pc, #116]	; (8008020 <rt_test_007_001_execute+0xe0>)
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread1, "B");
 8007faa:	f8c5 c00c 	str.w	ip, [r5, #12]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread1, "A");
 8007fae:	f7fa f857 	bl	8002060 <chThdCreateStatic.constprop.0>
  test_set_step(4);
 8007fb2:	2304      	movs	r3, #4
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread1, "A");
 8007fb4:	4602      	mov	r2, r0
    chMtxUnlock(&m1);
 8007fb6:	480e      	ldr	r0, [pc, #56]	; (8007ff0 <rt_test_007_001_execute+0xb0>)
  test_set_step(4);
 8007fb8:	6033      	str	r3, [r6, #0]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread1, "A");
 8007fba:	612a      	str	r2, [r5, #16]
    chMtxUnlock(&m1);
 8007fbc:	f7fc fe70 	bl	8004ca0 <chMtxUnlock>
    test_wait_threads();
 8007fc0:	f7ff f87e 	bl	80070c0 <test_wait_threads>
 8007fc4:	69bb      	ldr	r3, [r7, #24]
    test_assert(prio == chThdGetPriorityX(), "wrong priority level");
 8007fc6:	4917      	ldr	r1, [pc, #92]	; (8008024 <rt_test_007_001_execute+0xe4>)
 8007fc8:	6898      	ldr	r0, [r3, #8]
 8007fca:	1b00      	subs	r0, r0, r4
 8007fcc:	fab0 f080 	clz	r0, r0
 8007fd0:	0940      	lsrs	r0, r0, #5
 8007fd2:	f7f8 fd05 	bl	80009e0 <_test_assert>
 8007fd6:	b100      	cbz	r0, 8007fda <rt_test_007_001_execute+0x9a>
}
 8007fd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007fda:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    test_assert_sequence("ABCDE", "invalid sequence");
 8007fde:	4912      	ldr	r1, [pc, #72]	; (8008028 <rt_test_007_001_execute+0xe8>)
 8007fe0:	4812      	ldr	r0, [pc, #72]	; (800802c <rt_test_007_001_execute+0xec>)
 8007fe2:	f7f8 be7d 	b.w	8000ce0 <_test_assert_sequence>
 8007fe6:	bf00      	nop
 8007fe8:	200009b0 	.word	0x200009b0
 8007fec:	2000149c 	.word	0x2000149c
 8007ff0:	2000082c 	.word	0x2000082c
 8007ff4:	200014b4 	.word	0x200014b4
 8007ff8:	0800a42c 	.word	0x0800a42c
 8007ffc:	08005d91 	.word	0x08005d91
 8008000:	20000d88 	.word	0x20000d88
 8008004:	0800a304 	.word	0x0800a304
 8008008:	20000ed0 	.word	0x20000ed0
 800800c:	0800a2f8 	.word	0x0800a2f8
 8008010:	20001018 	.word	0x20001018
 8008014:	0800a13c 	.word	0x0800a13c
 8008018:	20001160 	.word	0x20001160
 800801c:	0800a138 	.word	0x0800a138
 8008020:	200012a8 	.word	0x200012a8
 8008024:	0800a120 	.word	0x0800a120
 8008028:	08009020 	.word	0x08009020
 800802c:	0800a428 	.word	0x0800a428

08008030 <rt_test_006_005_teardown>:
 8008030:	f7ff b846 	b.w	80070c0 <test_wait_threads>
	...

08008040 <rt_test_006_004_execute>:
  return ch.rlist.current;
 8008040:	4b23      	ldr	r3, [pc, #140]	; (80080d0 <rt_test_006_004_execute+0x90>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread1, "A");
 8008042:	4824      	ldr	r0, [pc, #144]	; (80080d4 <rt_test_006_004_execute+0x94>)
  return chThdGetSelfX()->prio;
 8008044:	699a      	ldr	r2, [r3, #24]
 8008046:	4b24      	ldr	r3, [pc, #144]	; (80080d8 <rt_test_006_004_execute+0x98>)
 8008048:	6891      	ldr	r1, [r2, #8]
 800804a:	4a24      	ldr	r2, [pc, #144]	; (80080dc <rt_test_006_004_execute+0x9c>)
static void rt_test_006_004_execute(void) {
 800804c:	b570      	push	{r4, r5, r6, lr}
  test_set_step(1);
 800804e:	4c24      	ldr	r4, [pc, #144]	; (80080e0 <rt_test_006_004_execute+0xa0>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread1, "A");
 8008050:	3101      	adds	r1, #1
  test_set_step(1);
 8008052:	2501      	movs	r5, #1
 8008054:	6025      	str	r5, [r4, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread1, "A");
 8008056:	f7fa f803 	bl	8002060 <chThdCreateStatic.constprop.0>
 800805a:	4b22      	ldr	r3, [pc, #136]	; (80080e4 <rt_test_006_004_execute+0xa4>)
  test_set_step(2);
 800805c:	2502      	movs	r5, #2
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread1, "A");
 800805e:	6018      	str	r0, [r3, #0]
  test_set_step(2);
 8008060:	6025      	str	r5, [r4, #0]
 8008062:	2320      	movs	r3, #32
 8008064:	f383 8811 	msr	BASEPRI, r3
void chSemAddCounterI(semaphore_t *sp, cnt_t n) {
 8008068:	4c1f      	ldr	r4, [pc, #124]	; (80080e8 <rt_test_006_004_execute+0xa8>)
      chSchReadyI(queue_fifo_remove(&sp->queue))->u.rdymsg = MSG_OK;
 800806a:	2600      	movs	r6, #0
 800806c:	e002      	b.n	8008074 <rt_test_006_004_execute+0x34>
  while (n > (cnt_t)0) {
 800806e:	2d01      	cmp	r5, #1
 8008070:	d00e      	beq.n	8008090 <rt_test_006_004_execute+0x50>
 8008072:	2501      	movs	r5, #1
    if (++sp->cnt <= (cnt_t)0) {
 8008074:	68a3      	ldr	r3, [r4, #8]
 8008076:	3301      	adds	r3, #1
 8008078:	2b00      	cmp	r3, #0
 800807a:	60a3      	str	r3, [r4, #8]
 800807c:	dcf7      	bgt.n	800806e <rt_test_006_004_execute+0x2e>
  thread_t *tp = tqp->next;
 800807e:	6820      	ldr	r0, [r4, #0]
  tqp->next             = tp->queue.next;
 8008080:	6803      	ldr	r3, [r0, #0]
 8008082:	6023      	str	r3, [r4, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 8008084:	605c      	str	r4, [r3, #4]
      chSchReadyI(queue_fifo_remove(&sp->queue))->u.rdymsg = MSG_OK;
 8008086:	f7f9 f8c3 	bl	8001210 <chSchReadyI>
  while (n > (cnt_t)0) {
 800808a:	2d01      	cmp	r5, #1
      chSchReadyI(queue_fifo_remove(&sp->queue))->u.rdymsg = MSG_OK;
 800808c:	6246      	str	r6, [r0, #36]	; 0x24
  while (n > (cnt_t)0) {
 800808e:	d1f0      	bne.n	8008072 <rt_test_006_004_execute+0x32>
    chSchRescheduleS();
 8008090:	f7fb fc36 	bl	8003900 <chSchRescheduleS>
 8008094:	2500      	movs	r5, #0
 8008096:	f385 8811 	msr	BASEPRI, r5
    test_wait_threads();
 800809a:	f7ff f811 	bl	80070c0 <test_wait_threads>
 800809e:	2320      	movs	r3, #32
 80080a0:	f383 8811 	msr	BASEPRI, r3
    test_assert_lock(chSemGetCounterI(&sem1) == 1, "invalid counter");
 80080a4:	68a0      	ldr	r0, [r4, #8]
 80080a6:	4911      	ldr	r1, [pc, #68]	; (80080ec <rt_test_006_004_execute+0xac>)
 80080a8:	f1a0 0001 	sub.w	r0, r0, #1
 80080ac:	fab0 f080 	clz	r0, r0
 80080b0:	0940      	lsrs	r0, r0, #5
 80080b2:	f7f8 fc95 	bl	80009e0 <_test_assert>
 80080b6:	b110      	cbz	r0, 80080be <rt_test_006_004_execute+0x7e>
 80080b8:	f385 8811 	msr	BASEPRI, r5
}
 80080bc:	bd70      	pop	{r4, r5, r6, pc}
 80080be:	f380 8811 	msr	BASEPRI, r0
    test_assert_sequence("A", "invalid sequence");
 80080c2:	490b      	ldr	r1, [pc, #44]	; (80080f0 <rt_test_006_004_execute+0xb0>)
 80080c4:	4804      	ldr	r0, [pc, #16]	; (80080d8 <rt_test_006_004_execute+0x98>)
}
 80080c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    test_assert_sequence("A", "invalid sequence");
 80080ca:	f7f8 be09 	b.w	8000ce0 <_test_assert_sequence>
 80080ce:	bf00      	nop
 80080d0:	200009b0 	.word	0x200009b0
 80080d4:	20000d88 	.word	0x20000d88
 80080d8:	0800a138 	.word	0x0800a138
 80080dc:	080033e1 	.word	0x080033e1
 80080e0:	2000149c 	.word	0x2000149c
 80080e4:	200014b4 	.word	0x200014b4
 80080e8:	20000d70 	.word	0x20000d70
 80080ec:	0800a430 	.word	0x0800a430
 80080f0:	08009020 	.word	0x08009020
	...

08008100 <rt_test_006_003_execute>:
static void rt_test_006_003_execute(void) {
 8008100:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  test_set_step(1);
 8008104:	4d4b      	ldr	r5, [pc, #300]	; (8008234 <rt_test_006_003_execute+0x134>)
 8008106:	2001      	movs	r0, #1
 8008108:	6028      	str	r0, [r5, #0]
 800810a:	2320      	movs	r3, #32
 800810c:	f383 8811 	msr	BASEPRI, r3
  if (--sp->cnt < (cnt_t)0) {
 8008110:	4c49      	ldr	r4, [pc, #292]	; (8008238 <rt_test_006_003_execute+0x138>)
 8008112:	68a3      	ldr	r3, [r4, #8]
 8008114:	3b01      	subs	r3, #1
 8008116:	bf5c      	itt	pl
 8008118:	60a3      	strpl	r3, [r4, #8]
 800811a:	2000      	movpl	r0, #0
 800811c:	2300      	movs	r3, #0
 800811e:	f383 8811 	msr	BASEPRI, r3
    test_assert(msg == MSG_TIMEOUT, "wrong wake-up message");
 8008122:	4946      	ldr	r1, [pc, #280]	; (800823c <rt_test_006_003_execute+0x13c>)
 8008124:	f7f8 fc5c 	bl	80009e0 <_test_assert>
 8008128:	b108      	cbz	r0, 800812e <rt_test_006_003_execute+0x2e>
}
 800812a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  return (bool)(tqp->next == (const thread_t *)tqp);
 800812e:	6820      	ldr	r0, [r4, #0]
    test_assert(queue_isempty(&sem1.queue), "queue not empty");
 8008130:	4943      	ldr	r1, [pc, #268]	; (8008240 <rt_test_006_003_execute+0x140>)
 8008132:	1b00      	subs	r0, r0, r4
 8008134:	fab0 f080 	clz	r0, r0
 8008138:	0940      	lsrs	r0, r0, #5
 800813a:	f7f8 fc51 	bl	80009e0 <_test_assert>
 800813e:	2800      	cmp	r0, #0
 8008140:	d1f3      	bne.n	800812a <rt_test_006_003_execute+0x2a>
    test_assert(sem1.cnt == 0, "counter not zero");
 8008142:	68a0      	ldr	r0, [r4, #8]
 8008144:	493f      	ldr	r1, [pc, #252]	; (8008244 <rt_test_006_003_execute+0x144>)
 8008146:	fab0 f080 	clz	r0, r0
 800814a:	0940      	lsrs	r0, r0, #5
 800814c:	f7f8 fc48 	bl	80009e0 <_test_assert>
 8008150:	4603      	mov	r3, r0
 8008152:	2800      	cmp	r0, #0
 8008154:	d1e9      	bne.n	800812a <rt_test_006_003_execute+0x2a>
  return ch.rlist.current;
 8008156:	493c      	ldr	r1, [pc, #240]	; (8008248 <rt_test_006_003_execute+0x148>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8008158:	4a3c      	ldr	r2, [pc, #240]	; (800824c <rt_test_006_003_execute+0x14c>)
  return chThdGetSelfX()->prio;
 800815a:	6989      	ldr	r1, [r1, #24]
 800815c:	483c      	ldr	r0, [pc, #240]	; (8008250 <rt_test_006_003_execute+0x150>)
 800815e:	6889      	ldr	r1, [r1, #8]
  test_set_step(2);
 8008160:	2602      	movs	r6, #2
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8008162:	3901      	subs	r1, #1
  test_set_step(2);
 8008164:	602e      	str	r6, [r5, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8008166:	f7f9 ff7b 	bl	8002060 <chThdCreateStatic.constprop.0>
 800816a:	4b3a      	ldr	r3, [pc, #232]	; (8008254 <rt_test_006_003_execute+0x154>)
 800816c:	4602      	mov	r2, r0
    msg = chSemWaitTimeout(&sem1, TIME_MS2I(500));
 800816e:	f241 3088 	movw	r0, #5000	; 0x1388
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8008172:	601a      	str	r2, [r3, #0]
    msg = chSemWaitTimeout(&sem1, TIME_MS2I(500));
 8008174:	f7fa f914 	bl	80023a0 <chSemWaitTimeout.constprop.0>
 8008178:	4606      	mov	r6, r0
    test_wait_threads();
 800817a:	f7fe ffa1 	bl	80070c0 <test_wait_threads>
    test_assert(msg == MSG_OK, "wrong wake-up message");
 800817e:	fab6 f086 	clz	r0, r6
 8008182:	492e      	ldr	r1, [pc, #184]	; (800823c <rt_test_006_003_execute+0x13c>)
 8008184:	0940      	lsrs	r0, r0, #5
 8008186:	f7f8 fc2b 	bl	80009e0 <_test_assert>
 800818a:	2800      	cmp	r0, #0
 800818c:	d1cd      	bne.n	800812a <rt_test_006_003_execute+0x2a>
 800818e:	6820      	ldr	r0, [r4, #0]
    test_assert(queue_isempty(&sem1.queue), "queue not empty");
 8008190:	492b      	ldr	r1, [pc, #172]	; (8008240 <rt_test_006_003_execute+0x140>)
 8008192:	1b00      	subs	r0, r0, r4
 8008194:	fab0 f080 	clz	r0, r0
 8008198:	0940      	lsrs	r0, r0, #5
 800819a:	f7f8 fc21 	bl	80009e0 <_test_assert>
 800819e:	2800      	cmp	r0, #0
 80081a0:	d1c3      	bne.n	800812a <rt_test_006_003_execute+0x2a>
    test_assert(sem1.cnt == 0, "counter not zero");
 80081a2:	68a0      	ldr	r0, [r4, #8]
 80081a4:	4927      	ldr	r1, [pc, #156]	; (8008244 <rt_test_006_003_execute+0x144>)
 80081a6:	fab0 f080 	clz	r0, r0
 80081aa:	0940      	lsrs	r0, r0, #5
 80081ac:	f7f8 fc18 	bl	80009e0 <_test_assert>
 80081b0:	2800      	cmp	r0, #0
 80081b2:	d1ba      	bne.n	800812a <rt_test_006_003_execute+0x2a>
  test_set_step(3);
 80081b4:	2303      	movs	r3, #3
 80081b6:	602b      	str	r3, [r5, #0]
    target_time = chTimeAddX(test_wait_tick(), TIME_MS2I(5 * 50));
 80081b8:	f7fa fe7a 	bl	8002eb0 <test_wait_tick>
      test_assert(msg == MSG_TIMEOUT, "wrong wake-up message");
 80081bc:	4f1f      	ldr	r7, [pc, #124]	; (800823c <rt_test_006_003_execute+0x13c>)
      test_assert(queue_isempty(&sem1.queue), "queue not empty");
 80081be:	4e20      	ldr	r6, [pc, #128]	; (8008240 <rt_test_006_003_execute+0x140>)
      test_assert(sem1.cnt == 0, "counter not zero");
 80081c0:	f8df 8080 	ldr.w	r8, [pc, #128]	; 8008244 <rt_test_006_003_execute+0x144>
    target_time = chTimeAddX(test_wait_tick(), TIME_MS2I(5 * 50));
 80081c4:	4681      	mov	r9, r0
 80081c6:	2541      	movs	r5, #65	; 0x41
      test_emit_token('A' + i);
 80081c8:	4628      	mov	r0, r5
 80081ca:	f7f8 fcb1 	bl	8000b30 <test_emit_token>
      msg = chSemWaitTimeout(&sem1, TIME_MS2I(50));
 80081ce:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80081d2:	f7fa f8e5 	bl	80023a0 <chSemWaitTimeout.constprop.0>
      test_assert(msg == MSG_TIMEOUT, "wrong wake-up message");
 80081d6:	f1a0 30ff 	sub.w	r0, r0, #4294967295
 80081da:	fab0 f080 	clz	r0, r0
 80081de:	4639      	mov	r1, r7
 80081e0:	0940      	lsrs	r0, r0, #5
 80081e2:	f7f8 fbfd 	bl	80009e0 <_test_assert>
      test_assert(queue_isempty(&sem1.queue), "queue not empty");
 80081e6:	4631      	mov	r1, r6
      test_assert(msg == MSG_TIMEOUT, "wrong wake-up message");
 80081e8:	2800      	cmp	r0, #0
 80081ea:	d19e      	bne.n	800812a <rt_test_006_003_execute+0x2a>
 80081ec:	6820      	ldr	r0, [r4, #0]
      test_assert(queue_isempty(&sem1.queue), "queue not empty");
 80081ee:	1b00      	subs	r0, r0, r4
 80081f0:	fab0 f080 	clz	r0, r0
 80081f4:	0940      	lsrs	r0, r0, #5
 80081f6:	f7f8 fbf3 	bl	80009e0 <_test_assert>
      test_assert(sem1.cnt == 0, "counter not zero");
 80081fa:	4641      	mov	r1, r8
      test_assert(queue_isempty(&sem1.queue), "queue not empty");
 80081fc:	2800      	cmp	r0, #0
 80081fe:	d194      	bne.n	800812a <rt_test_006_003_execute+0x2a>
      test_assert(sem1.cnt == 0, "counter not zero");
 8008200:	68a0      	ldr	r0, [r4, #8]
 8008202:	fab0 f080 	clz	r0, r0
 8008206:	0940      	lsrs	r0, r0, #5
 8008208:	f7f8 fbea 	bl	80009e0 <_test_assert>
    for (i = 0; i < 5; i++) {
 800820c:	3501      	adds	r5, #1
 800820e:	b2ed      	uxtb	r5, r5
      test_assert(sem1.cnt == 0, "counter not zero");
 8008210:	2800      	cmp	r0, #0
 8008212:	d18a      	bne.n	800812a <rt_test_006_003_execute+0x2a>
    for (i = 0; i < 5; i++) {
 8008214:	2d46      	cmp	r5, #70	; 0x46
 8008216:	d1d7      	bne.n	80081c8 <rt_test_006_003_execute+0xc8>
    test_assert_sequence("ABCDE", "invalid sequence");
 8008218:	490f      	ldr	r1, [pc, #60]	; (8008258 <rt_test_006_003_execute+0x158>)
 800821a:	4810      	ldr	r0, [pc, #64]	; (800825c <rt_test_006_003_execute+0x15c>)
 800821c:	f7f8 fd60 	bl	8000ce0 <_test_assert_sequence>
 8008220:	2800      	cmp	r0, #0
 8008222:	d182      	bne.n	800812a <rt_test_006_003_execute+0x2a>
    test_assert_time_window(target_time,
 8008224:	f609 11d8 	addw	r1, r9, #2520	; 0x9d8
 8008228:	f609 10c4 	addw	r0, r9, #2500	; 0x9c4
}
 800822c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    test_assert_time_window(target_time,
 8008230:	f7f8 b96e 	b.w	8000510 <_test_assert_time_window.constprop.0>
 8008234:	2000149c 	.word	0x2000149c
 8008238:	20000d70 	.word	0x20000d70
 800823c:	08009fa0 	.word	0x08009fa0
 8008240:	08009edc 	.word	0x08009edc
 8008244:	08009eec 	.word	0x08009eec
 8008248:	200009b0 	.word	0x200009b0
 800824c:	08004251 	.word	0x08004251
 8008250:	20000d88 	.word	0x20000d88
 8008254:	200014b4 	.word	0x200014b4
 8008258:	08009020 	.word	0x08009020
 800825c:	0800a428 	.word	0x0800a428

08008260 <rt_test_006_002_execute>:
static void rt_test_006_002_execute(void) {
 8008260:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  return ch.rlist.current;
 8008264:	4c2b      	ldr	r4, [pc, #172]	; (8008314 <rt_test_006_002_execute+0xb4>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
 8008266:	4f2c      	ldr	r7, [pc, #176]	; (8008318 <rt_test_006_002_execute+0xb8>)
  return chThdGetSelfX()->prio;
 8008268:	69a3      	ldr	r3, [r4, #24]
 800826a:	4e2c      	ldr	r6, [pc, #176]	; (800831c <rt_test_006_002_execute+0xbc>)
 800826c:	6899      	ldr	r1, [r3, #8]
  test_set_step(1);
 800826e:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 8008344 <rt_test_006_002_execute+0xe4>
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
 8008272:	4b2b      	ldr	r3, [pc, #172]	; (8008320 <rt_test_006_002_execute+0xc0>)
 8008274:	4d2b      	ldr	r5, [pc, #172]	; (8008324 <rt_test_006_002_execute+0xc4>)
  test_set_step(1);
 8008276:	f04f 0c01 	mov.w	ip, #1
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
 800827a:	463a      	mov	r2, r7
 800827c:	3105      	adds	r1, #5
 800827e:	4630      	mov	r0, r6
  test_set_step(1);
 8008280:	f8c8 c000 	str.w	ip, [r8]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
 8008284:	f7f9 feec 	bl	8002060 <chThdCreateStatic.constprop.0>
 8008288:	69a2      	ldr	r2, [r4, #24]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+1, thread1, "B");
 800828a:	4b27      	ldr	r3, [pc, #156]	; (8008328 <rt_test_006_002_execute+0xc8>)
 800828c:	6891      	ldr	r1, [r2, #8]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
 800828e:	6028      	str	r0, [r5, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+1, thread1, "B");
 8008290:	463a      	mov	r2, r7
 8008292:	3101      	adds	r1, #1
 8008294:	f506 70a4 	add.w	r0, r6, #328	; 0x148
 8008298:	f7f9 fee2 	bl	8002060 <chThdCreateStatic.constprop.0>
 800829c:	69a2      	ldr	r2, [r4, #24]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()+3, thread1, "C");
 800829e:	4b23      	ldr	r3, [pc, #140]	; (800832c <rt_test_006_002_execute+0xcc>)
 80082a0:	6891      	ldr	r1, [r2, #8]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+1, thread1, "B");
 80082a2:	6068      	str	r0, [r5, #4]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()+3, thread1, "C");
 80082a4:	463a      	mov	r2, r7
 80082a6:	3103      	adds	r1, #3
 80082a8:	f506 7024 	add.w	r0, r6, #656	; 0x290
 80082ac:	f7f9 fed8 	bl	8002060 <chThdCreateStatic.constprop.0>
 80082b0:	69a2      	ldr	r2, [r4, #24]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()+4, thread1, "D");
 80082b2:	4b1f      	ldr	r3, [pc, #124]	; (8008330 <rt_test_006_002_execute+0xd0>)
 80082b4:	6891      	ldr	r1, [r2, #8]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()+3, thread1, "C");
 80082b6:	60a8      	str	r0, [r5, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()+4, thread1, "D");
 80082b8:	463a      	mov	r2, r7
 80082ba:	3104      	adds	r1, #4
 80082bc:	f506 7076 	add.w	r0, r6, #984	; 0x3d8
 80082c0:	f7f9 fece 	bl	8002060 <chThdCreateStatic.constprop.0>
 80082c4:	69a3      	ldr	r3, [r4, #24]
    chSemSignal(&sem1);
 80082c6:	4c1b      	ldr	r4, [pc, #108]	; (8008334 <rt_test_006_002_execute+0xd4>)
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()+2, thread1, "E");
 80082c8:	6899      	ldr	r1, [r3, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()+4, thread1, "D");
 80082ca:	60e8      	str	r0, [r5, #12]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()+2, thread1, "E");
 80082cc:	3102      	adds	r1, #2
 80082ce:	463a      	mov	r2, r7
 80082d0:	4b19      	ldr	r3, [pc, #100]	; (8008338 <rt_test_006_002_execute+0xd8>)
 80082d2:	f506 60a4 	add.w	r0, r6, #1312	; 0x520
 80082d6:	f7f9 fec3 	bl	8002060 <chThdCreateStatic.constprop.0>
  test_set_step(2);
 80082da:	2302      	movs	r3, #2
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()+2, thread1, "E");
 80082dc:	4602      	mov	r2, r0
    chSemSignal(&sem1);
 80082de:	4620      	mov	r0, r4
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()+2, thread1, "E");
 80082e0:	612a      	str	r2, [r5, #16]
  test_set_step(2);
 80082e2:	f8c8 3000 	str.w	r3, [r8]
    chSemSignal(&sem1);
 80082e6:	f7f9 ff73 	bl	80021d0 <chSemSignal>
    chSemSignal(&sem1);
 80082ea:	4620      	mov	r0, r4
 80082ec:	f7f9 ff70 	bl	80021d0 <chSemSignal>
    chSemSignal(&sem1);
 80082f0:	4620      	mov	r0, r4
 80082f2:	f7f9 ff6d 	bl	80021d0 <chSemSignal>
    chSemSignal(&sem1);
 80082f6:	4620      	mov	r0, r4
 80082f8:	f7f9 ff6a 	bl	80021d0 <chSemSignal>
    chSemSignal(&sem1);
 80082fc:	4620      	mov	r0, r4
 80082fe:	f7f9 ff67 	bl	80021d0 <chSemSignal>
    test_wait_threads();
 8008302:	f7fe fedd 	bl	80070c0 <test_wait_threads>
}
 8008306:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    test_assert_sequence("ABCDE", "invalid sequence");
 800830a:	490c      	ldr	r1, [pc, #48]	; (800833c <rt_test_006_002_execute+0xdc>)
 800830c:	480c      	ldr	r0, [pc, #48]	; (8008340 <rt_test_006_002_execute+0xe0>)
 800830e:	f7f8 bce7 	b.w	8000ce0 <_test_assert_sequence>
 8008312:	bf00      	nop
 8008314:	200009b0 	.word	0x200009b0
 8008318:	080033e1 	.word	0x080033e1
 800831c:	20000d88 	.word	0x20000d88
 8008320:	0800a138 	.word	0x0800a138
 8008324:	200014b4 	.word	0x200014b4
 8008328:	0800a13c 	.word	0x0800a13c
 800832c:	0800a2f8 	.word	0x0800a2f8
 8008330:	0800a304 	.word	0x0800a304
 8008334:	20000d70 	.word	0x20000d70
 8008338:	0800a42c 	.word	0x0800a42c
 800833c:	08009020 	.word	0x08009020
 8008340:	0800a428 	.word	0x0800a428
 8008344:	2000149c 	.word	0x2000149c
	...

08008350 <rt_test_005_001_execute>:

static void rt_test_005_001_execute(void) {
 8008350:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  return ch.rlist.current;
 8008354:	4d30      	ldr	r5, [pc, #192]	; (8008418 <rt_test_005_001_execute+0xc8>)
  msg_t msg;

  /* [5.1.1] The function chThdSuspendTimeoutS() is invoked, the thread
     is remotely resumed with message @p MSG_OK. On return the message
     and the state of the reference are tested.*/
  test_set_step(1);
 8008356:	4f31      	ldr	r7, [pc, #196]	; (800841c <rt_test_005_001_execute+0xcc>)
  return chThdGetSelfX()->prio;
 8008358:	69aa      	ldr	r2, [r5, #24]
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, thread1, "A");
 800835a:	4b31      	ldr	r3, [pc, #196]	; (8008420 <rt_test_005_001_execute+0xd0>)
 800835c:	6891      	ldr	r1, [r2, #8]
 800835e:	4831      	ldr	r0, [pc, #196]	; (8008424 <rt_test_005_001_execute+0xd4>)
 8008360:	4a31      	ldr	r2, [pc, #196]	; (8008428 <rt_test_005_001_execute+0xd8>)
 8008362:	3901      	subs	r1, #1
  test_set_step(1);
 8008364:	2401      	movs	r4, #1
 8008366:	603c      	str	r4, [r7, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, thread1, "A");
 8008368:	f7f9 fe7a 	bl	8002060 <chThdCreateStatic.constprop.0>
 800836c:	4b2f      	ldr	r3, [pc, #188]	; (800842c <rt_test_005_001_execute+0xdc>)
 800836e:	2620      	movs	r6, #32
 8008370:	6018      	str	r0, [r3, #0]
 8008372:	f386 8811 	msr	BASEPRI, r6
  return ch.rlist.current;
 8008376:	69ab      	ldr	r3, [r5, #24]
  *trp = tp;
 8008378:	4c2d      	ldr	r4, [pc, #180]	; (8008430 <rt_test_005_001_execute+0xe0>)
  tp->u.wttrp = trp;
 800837a:	625c      	str	r4, [r3, #36]	; 0x24
    chSchGoSleepS(newstate);
 800837c:	2003      	movs	r0, #3
  *trp = tp;
 800837e:	6023      	str	r3, [r4, #0]
 8008380:	f7f9 ff56 	bl	8002230 <chSchGoSleepS>
  return currp->u.rdymsg;
 8008384:	69aa      	ldr	r2, [r5, #24]
 8008386:	2300      	movs	r3, #0
 8008388:	f8d2 8024 	ldr.w	r8, [r2, #36]	; 0x24
 800838c:	f383 8811 	msr	BASEPRI, r3
    chSysLock();
    msg = chThdSuspendTimeoutS(&tr1, TIME_INFINITE);
    chSysUnlock();
    test_assert(NULL == tr1, "not NULL");
 8008390:	6820      	ldr	r0, [r4, #0]
 8008392:	4928      	ldr	r1, [pc, #160]	; (8008434 <rt_test_005_001_execute+0xe4>)
 8008394:	fab0 f080 	clz	r0, r0
 8008398:	0940      	lsrs	r0, r0, #5
 800839a:	f7f8 fb21 	bl	80009e0 <_test_assert>
 800839e:	b108      	cbz	r0, 80083a4 <rt_test_005_001_execute+0x54>
                            "out of time window");
    test_assert(NULL == tr1, "not NULL");
    test_assert(MSG_TIMEOUT == msg, "wrong returned message");
  }
  test_end_step(2);
}
 80083a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    test_assert(MSG_OK == msg,"wrong returned message");
 80083a4:	fab8 f088 	clz	r0, r8
 80083a8:	4923      	ldr	r1, [pc, #140]	; (8008438 <rt_test_005_001_execute+0xe8>)
 80083aa:	0940      	lsrs	r0, r0, #5
 80083ac:	f7f8 fb18 	bl	80009e0 <_test_assert>
 80083b0:	4680      	mov	r8, r0
 80083b2:	2800      	cmp	r0, #0
 80083b4:	d1f4      	bne.n	80083a0 <rt_test_005_001_execute+0x50>
    test_wait_threads();
 80083b6:	f7fe fe83 	bl	80070c0 <test_wait_threads>
  test_set_step(2);
 80083ba:	2302      	movs	r3, #2
 80083bc:	603b      	str	r3, [r7, #0]
 80083be:	f386 8811 	msr	BASEPRI, r6
 80083c2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80083c6:	69ab      	ldr	r3, [r5, #24]
 80083c8:	6a56      	ldr	r6, [r2, #36]	; 0x24
  tp->u.wttrp = trp;
 80083ca:	625c      	str	r4, [r3, #36]	; 0x24
  return chSchGoSleepTimeoutS(CH_STATE_SUSPENDED, timeout);
 80083cc:	f242 7110 	movw	r1, #10000	; 0x2710
 80083d0:	2003      	movs	r0, #3
  *trp = tp;
 80083d2:	6023      	str	r3, [r4, #0]
  return chSchGoSleepTimeoutS(CH_STATE_SUSPENDED, timeout);
 80083d4:	f7f9 ffbc 	bl	8002350 <chSchGoSleepTimeoutS>
 80083d8:	4605      	mov	r5, r0
 80083da:	f388 8811 	msr	BASEPRI, r8
    test_assert_time_window(chTimeAddX(time, TIME_MS2I(1000)),
 80083de:	f506 511c 	add.w	r1, r6, #9984	; 0x2700
 80083e2:	4608      	mov	r0, r1
 80083e4:	3010      	adds	r0, #16
 80083e6:	3113      	adds	r1, #19
 80083e8:	f7f8 f892 	bl	8000510 <_test_assert_time_window.constprop.0>
 80083ec:	2800      	cmp	r0, #0
 80083ee:	d1d7      	bne.n	80083a0 <rt_test_005_001_execute+0x50>
    test_assert(NULL == tr1, "not NULL");
 80083f0:	6820      	ldr	r0, [r4, #0]
 80083f2:	4910      	ldr	r1, [pc, #64]	; (8008434 <rt_test_005_001_execute+0xe4>)
 80083f4:	fab0 f080 	clz	r0, r0
 80083f8:	0940      	lsrs	r0, r0, #5
 80083fa:	f7f8 faf1 	bl	80009e0 <_test_assert>
 80083fe:	2800      	cmp	r0, #0
 8008400:	d1ce      	bne.n	80083a0 <rt_test_005_001_execute+0x50>
    test_assert(MSG_TIMEOUT == msg, "wrong returned message");
 8008402:	f1a5 30ff 	sub.w	r0, r5, #4294967295
 8008406:	fab0 f080 	clz	r0, r0
}
 800840a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    test_assert(MSG_TIMEOUT == msg, "wrong returned message");
 800840e:	490a      	ldr	r1, [pc, #40]	; (8008438 <rt_test_005_001_execute+0xe8>)
 8008410:	0940      	lsrs	r0, r0, #5
 8008412:	f7f8 bae5 	b.w	80009e0 <_test_assert>
 8008416:	bf00      	nop
 8008418:	200009b0 	.word	0x200009b0
 800841c:	2000149c 	.word	0x2000149c
 8008420:	0800a138 	.word	0x0800a138
 8008424:	20000d88 	.word	0x20000d88
 8008428:	080042b1 	.word	0x080042b1
 800842c:	200014b4 	.word	0x200014b4
 8008430:	200014c8 	.word	0x200014c8
 8008434:	0800a440 	.word	0x0800a440
 8008438:	08009ec4 	.word	0x08009ec4
 800843c:	00000000 	.word	0x00000000

08008440 <rt_test_004_002_execute>:
 * - [4.2.3] Creating 5 threads with pseudo-random priority, execution
 *   sequence is tested.
 * .
 */

static void rt_test_004_002_execute(void) {
 8008440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008442:	4d5a      	ldr	r5, [pc, #360]	; (80085ac <rt_test_004_002_execute+0x16c>)

  /* [4.2.1] Creating 5 threads with increasing priority, execution
     sequence is tested.*/
  test_set_step(1);
 8008444:	4e5a      	ldr	r6, [pc, #360]	; (80085b0 <rt_test_004_002_execute+0x170>)
  return chThdGetSelfX()->prio;
 8008446:	69aa      	ldr	r2, [r5, #24]
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 8008448:	4b5a      	ldr	r3, [pc, #360]	; (80085b4 <rt_test_004_002_execute+0x174>)
 800844a:	6891      	ldr	r1, [r2, #8]
 800844c:	485a      	ldr	r0, [pc, #360]	; (80085b8 <rt_test_004_002_execute+0x178>)
 800844e:	4a5b      	ldr	r2, [pc, #364]	; (80085bc <rt_test_004_002_execute+0x17c>)
 8008450:	4c5b      	ldr	r4, [pc, #364]	; (80085c0 <rt_test_004_002_execute+0x180>)
 8008452:	3905      	subs	r1, #5
  test_set_step(1);
 8008454:	2701      	movs	r7, #1
 8008456:	6037      	str	r7, [r6, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 8008458:	f7f9 fe02 	bl	8002060 <chThdCreateStatic.constprop.0>
 800845c:	69aa      	ldr	r2, [r5, #24]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 800845e:	4b59      	ldr	r3, [pc, #356]	; (80085c4 <rt_test_004_002_execute+0x184>)
 8008460:	6891      	ldr	r1, [r2, #8]
 8008462:	4a56      	ldr	r2, [pc, #344]	; (80085bc <rt_test_004_002_execute+0x17c>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 8008464:	4607      	mov	r7, r0
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 8008466:	3904      	subs	r1, #4
 8008468:	4857      	ldr	r0, [pc, #348]	; (80085c8 <rt_test_004_002_execute+0x188>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 800846a:	6027      	str	r7, [r4, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 800846c:	f7f9 fdf8 	bl	8002060 <chThdCreateStatic.constprop.0>
 8008470:	69aa      	ldr	r2, [r5, #24]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
 8008472:	4b56      	ldr	r3, [pc, #344]	; (80085cc <rt_test_004_002_execute+0x18c>)
 8008474:	6891      	ldr	r1, [r2, #8]
 8008476:	4a51      	ldr	r2, [pc, #324]	; (80085bc <rt_test_004_002_execute+0x17c>)
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 8008478:	4607      	mov	r7, r0
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
 800847a:	3903      	subs	r1, #3
 800847c:	4854      	ldr	r0, [pc, #336]	; (80085d0 <rt_test_004_002_execute+0x190>)
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 800847e:	6067      	str	r7, [r4, #4]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
 8008480:	f7f9 fdee 	bl	8002060 <chThdCreateStatic.constprop.0>
 8008484:	69aa      	ldr	r2, [r5, #24]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 8008486:	4b53      	ldr	r3, [pc, #332]	; (80085d4 <rt_test_004_002_execute+0x194>)
 8008488:	6891      	ldr	r1, [r2, #8]
 800848a:	4a4c      	ldr	r2, [pc, #304]	; (80085bc <rt_test_004_002_execute+0x17c>)
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
 800848c:	4607      	mov	r7, r0
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 800848e:	3902      	subs	r1, #2
 8008490:	4851      	ldr	r0, [pc, #324]	; (80085d8 <rt_test_004_002_execute+0x198>)
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
 8008492:	60a7      	str	r7, [r4, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 8008494:	f7f9 fde4 	bl	8002060 <chThdCreateStatic.constprop.0>
 8008498:	69aa      	ldr	r2, [r5, #24]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 800849a:	4b50      	ldr	r3, [pc, #320]	; (80085dc <rt_test_004_002_execute+0x19c>)
 800849c:	6891      	ldr	r1, [r2, #8]
 800849e:	4a47      	ldr	r2, [pc, #284]	; (80085bc <rt_test_004_002_execute+0x17c>)
 80084a0:	3901      	subs	r1, #1
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 80084a2:	4607      	mov	r7, r0
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 80084a4:	484e      	ldr	r0, [pc, #312]	; (80085e0 <rt_test_004_002_execute+0x1a0>)
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 80084a6:	60e7      	str	r7, [r4, #12]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 80084a8:	f7f9 fdda 	bl	8002060 <chThdCreateStatic.constprop.0>
 80084ac:	6120      	str	r0, [r4, #16]
    test_wait_threads();
 80084ae:	f7fe fe07 	bl	80070c0 <test_wait_threads>
    test_assert_sequence("ABCDE", "invalid sequence");
 80084b2:	494c      	ldr	r1, [pc, #304]	; (80085e4 <rt_test_004_002_execute+0x1a4>)
 80084b4:	484c      	ldr	r0, [pc, #304]	; (80085e8 <rt_test_004_002_execute+0x1a8>)
 80084b6:	f7f8 fc13 	bl	8000ce0 <_test_assert_sequence>
 80084ba:	b100      	cbz	r0, 80084be <rt_test_004_002_execute+0x7e>
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
    test_wait_threads();
    test_assert_sequence("ABCDE", "invalid sequence");
  }
  test_end_step(3);
}
 80084bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80084be:	69aa      	ldr	r2, [r5, #24]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 80084c0:	4b46      	ldr	r3, [pc, #280]	; (80085dc <rt_test_004_002_execute+0x19c>)
 80084c2:	6891      	ldr	r1, [r2, #8]
 80084c4:	4846      	ldr	r0, [pc, #280]	; (80085e0 <rt_test_004_002_execute+0x1a0>)
 80084c6:	4a3d      	ldr	r2, [pc, #244]	; (80085bc <rt_test_004_002_execute+0x17c>)
 80084c8:	3901      	subs	r1, #1
  test_set_step(2);
 80084ca:	2702      	movs	r7, #2
 80084cc:	6037      	str	r7, [r6, #0]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 80084ce:	f7f9 fdc7 	bl	8002060 <chThdCreateStatic.constprop.0>
 80084d2:	69aa      	ldr	r2, [r5, #24]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 80084d4:	4b3f      	ldr	r3, [pc, #252]	; (80085d4 <rt_test_004_002_execute+0x194>)
 80084d6:	6891      	ldr	r1, [r2, #8]
 80084d8:	4a38      	ldr	r2, [pc, #224]	; (80085bc <rt_test_004_002_execute+0x17c>)
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 80084da:	4607      	mov	r7, r0
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 80084dc:	3902      	subs	r1, #2
 80084de:	483e      	ldr	r0, [pc, #248]	; (80085d8 <rt_test_004_002_execute+0x198>)
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 80084e0:	6127      	str	r7, [r4, #16]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 80084e2:	f7f9 fdbd 	bl	8002060 <chThdCreateStatic.constprop.0>
 80084e6:	69aa      	ldr	r2, [r5, #24]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
 80084e8:	4b38      	ldr	r3, [pc, #224]	; (80085cc <rt_test_004_002_execute+0x18c>)
 80084ea:	6891      	ldr	r1, [r2, #8]
 80084ec:	4a33      	ldr	r2, [pc, #204]	; (80085bc <rt_test_004_002_execute+0x17c>)
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 80084ee:	4607      	mov	r7, r0
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
 80084f0:	3903      	subs	r1, #3
 80084f2:	4837      	ldr	r0, [pc, #220]	; (80085d0 <rt_test_004_002_execute+0x190>)
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 80084f4:	60e7      	str	r7, [r4, #12]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
 80084f6:	f7f9 fdb3 	bl	8002060 <chThdCreateStatic.constprop.0>
 80084fa:	69aa      	ldr	r2, [r5, #24]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 80084fc:	4b31      	ldr	r3, [pc, #196]	; (80085c4 <rt_test_004_002_execute+0x184>)
 80084fe:	6891      	ldr	r1, [r2, #8]
 8008500:	4a2e      	ldr	r2, [pc, #184]	; (80085bc <rt_test_004_002_execute+0x17c>)
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
 8008502:	4607      	mov	r7, r0
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 8008504:	3904      	subs	r1, #4
 8008506:	4830      	ldr	r0, [pc, #192]	; (80085c8 <rt_test_004_002_execute+0x188>)
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
 8008508:	60a7      	str	r7, [r4, #8]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 800850a:	f7f9 fda9 	bl	8002060 <chThdCreateStatic.constprop.0>
 800850e:	69aa      	ldr	r2, [r5, #24]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 8008510:	4b28      	ldr	r3, [pc, #160]	; (80085b4 <rt_test_004_002_execute+0x174>)
 8008512:	6891      	ldr	r1, [r2, #8]
 8008514:	4a29      	ldr	r2, [pc, #164]	; (80085bc <rt_test_004_002_execute+0x17c>)
 8008516:	3905      	subs	r1, #5
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 8008518:	4607      	mov	r7, r0
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 800851a:	4827      	ldr	r0, [pc, #156]	; (80085b8 <rt_test_004_002_execute+0x178>)
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 800851c:	6067      	str	r7, [r4, #4]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 800851e:	f7f9 fd9f 	bl	8002060 <chThdCreateStatic.constprop.0>
 8008522:	6020      	str	r0, [r4, #0]
    test_wait_threads();
 8008524:	f7fe fdcc 	bl	80070c0 <test_wait_threads>
    test_assert_sequence("ABCDE", "invalid sequence");
 8008528:	492e      	ldr	r1, [pc, #184]	; (80085e4 <rt_test_004_002_execute+0x1a4>)
 800852a:	482f      	ldr	r0, [pc, #188]	; (80085e8 <rt_test_004_002_execute+0x1a8>)
 800852c:	f7f8 fbd8 	bl	8000ce0 <_test_assert_sequence>
 8008530:	2800      	cmp	r0, #0
 8008532:	d1c3      	bne.n	80084bc <rt_test_004_002_execute+0x7c>
 8008534:	69aa      	ldr	r2, [r5, #24]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 8008536:	4b23      	ldr	r3, [pc, #140]	; (80085c4 <rt_test_004_002_execute+0x184>)
 8008538:	6891      	ldr	r1, [r2, #8]
 800853a:	4823      	ldr	r0, [pc, #140]	; (80085c8 <rt_test_004_002_execute+0x188>)
 800853c:	4a1f      	ldr	r2, [pc, #124]	; (80085bc <rt_test_004_002_execute+0x17c>)
 800853e:	3904      	subs	r1, #4
  test_set_step(3);
 8008540:	2703      	movs	r7, #3
 8008542:	6037      	str	r7, [r6, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 8008544:	f7f9 fd8c 	bl	8002060 <chThdCreateStatic.constprop.0>
 8008548:	69aa      	ldr	r2, [r5, #24]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 800854a:	4b1a      	ldr	r3, [pc, #104]	; (80085b4 <rt_test_004_002_execute+0x174>)
 800854c:	6891      	ldr	r1, [r2, #8]
 800854e:	4a1b      	ldr	r2, [pc, #108]	; (80085bc <rt_test_004_002_execute+0x17c>)
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 8008550:	4606      	mov	r6, r0
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 8008552:	3905      	subs	r1, #5
 8008554:	4818      	ldr	r0, [pc, #96]	; (80085b8 <rt_test_004_002_execute+0x178>)
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 8008556:	6066      	str	r6, [r4, #4]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 8008558:	f7f9 fd82 	bl	8002060 <chThdCreateStatic.constprop.0>
 800855c:	69aa      	ldr	r2, [r5, #24]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 800855e:	4b1f      	ldr	r3, [pc, #124]	; (80085dc <rt_test_004_002_execute+0x19c>)
 8008560:	6891      	ldr	r1, [r2, #8]
 8008562:	4a16      	ldr	r2, [pc, #88]	; (80085bc <rt_test_004_002_execute+0x17c>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 8008564:	4606      	mov	r6, r0
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 8008566:	3901      	subs	r1, #1
 8008568:	481d      	ldr	r0, [pc, #116]	; (80085e0 <rt_test_004_002_execute+0x1a0>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 800856a:	6026      	str	r6, [r4, #0]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 800856c:	f7f9 fd78 	bl	8002060 <chThdCreateStatic.constprop.0>
 8008570:	69aa      	ldr	r2, [r5, #24]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 8008572:	4b18      	ldr	r3, [pc, #96]	; (80085d4 <rt_test_004_002_execute+0x194>)
 8008574:	6891      	ldr	r1, [r2, #8]
 8008576:	4a11      	ldr	r2, [pc, #68]	; (80085bc <rt_test_004_002_execute+0x17c>)
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 8008578:	4606      	mov	r6, r0
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 800857a:	3902      	subs	r1, #2
 800857c:	4816      	ldr	r0, [pc, #88]	; (80085d8 <rt_test_004_002_execute+0x198>)
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 800857e:	6126      	str	r6, [r4, #16]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 8008580:	f7f9 fd6e 	bl	8002060 <chThdCreateStatic.constprop.0>
 8008584:	69aa      	ldr	r2, [r5, #24]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
 8008586:	4b11      	ldr	r3, [pc, #68]	; (80085cc <rt_test_004_002_execute+0x18c>)
 8008588:	6891      	ldr	r1, [r2, #8]
 800858a:	4a0c      	ldr	r2, [pc, #48]	; (80085bc <rt_test_004_002_execute+0x17c>)
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 800858c:	4606      	mov	r6, r0
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
 800858e:	3903      	subs	r1, #3
 8008590:	480f      	ldr	r0, [pc, #60]	; (80085d0 <rt_test_004_002_execute+0x190>)
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 8008592:	60e6      	str	r6, [r4, #12]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
 8008594:	f7f9 fd64 	bl	8002060 <chThdCreateStatic.constprop.0>
 8008598:	60a0      	str	r0, [r4, #8]
    test_wait_threads();
 800859a:	f7fe fd91 	bl	80070c0 <test_wait_threads>
}
 800859e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    test_assert_sequence("ABCDE", "invalid sequence");
 80085a2:	4910      	ldr	r1, [pc, #64]	; (80085e4 <rt_test_004_002_execute+0x1a4>)
 80085a4:	4810      	ldr	r0, [pc, #64]	; (80085e8 <rt_test_004_002_execute+0x1a8>)
 80085a6:	f7f8 bb9b 	b.w	8000ce0 <_test_assert_sequence>
 80085aa:	bf00      	nop
 80085ac:	200009b0 	.word	0x200009b0
 80085b0:	2000149c 	.word	0x2000149c
 80085b4:	0800a42c 	.word	0x0800a42c
 80085b8:	20000d88 	.word	0x20000d88
 80085bc:	08000c51 	.word	0x08000c51
 80085c0:	200014b4 	.word	0x200014b4
 80085c4:	0800a304 	.word	0x0800a304
 80085c8:	20000ed0 	.word	0x20000ed0
 80085cc:	0800a2f8 	.word	0x0800a2f8
 80085d0:	20001018 	.word	0x20001018
 80085d4:	0800a13c 	.word	0x0800a13c
 80085d8:	20001160 	.word	0x20001160
 80085dc:	0800a138 	.word	0x0800a138
 80085e0:	200012a8 	.word	0x200012a8
 80085e4:	08009020 	.word	0x08009020
 80085e8:	0800a428 	.word	0x0800a428
 80085ec:	00000000 	.word	0x00000000

080085f0 <chThdSetPriority>:
tprio_t chThdSetPriority(tprio_t newprio) {
 80085f0:	b510      	push	{r4, lr}
 80085f2:	2220      	movs	r2, #32
 80085f4:	f382 8811 	msr	BASEPRI, r2
  oldprio = currp->realprio;
 80085f8:	4a08      	ldr	r2, [pc, #32]	; (800861c <chThdSetPriority+0x2c>)
 80085fa:	6992      	ldr	r2, [r2, #24]
 80085fc:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
  if ((currp->prio == currp->realprio) || (newprio > currp->prio)) {
 80085fe:	6891      	ldr	r1, [r2, #8]
 8008600:	42a1      	cmp	r1, r4
 8008602:	d001      	beq.n	8008608 <chThdSetPriority+0x18>
 8008604:	4281      	cmp	r1, r0
 8008606:	d200      	bcs.n	800860a <chThdSetPriority+0x1a>
    currp->prio = newprio;
 8008608:	6090      	str	r0, [r2, #8]
  currp->realprio = newprio;
 800860a:	63d0      	str	r0, [r2, #60]	; 0x3c
  chSchRescheduleS();
 800860c:	f7fb f978 	bl	8003900 <chSchRescheduleS>
 8008610:	2300      	movs	r3, #0
 8008612:	f383 8811 	msr	BASEPRI, r3
}
 8008616:	4620      	mov	r0, r4
 8008618:	bd10      	pop	{r4, pc}
 800861a:	bf00      	nop
 800861c:	200009b0 	.word	0x200009b0

08008620 <rt_test_004_004_execute>:
 * - [4.4.3] Raising thread priority above the boosted level.
 * - [4.4.4] Restoring original conditions.
 * .
 */

static void rt_test_004_004_execute(void) {
 8008620:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  return ch.rlist.current;
 8008624:	4d2f      	ldr	r5, [pc, #188]	; (80086e4 <rt_test_004_004_execute+0xc4>)
  }
  test_end_step(1);

  /* [4.4.2] Raising thread priority above original priority but below
     the boosted level.*/
  test_set_step(2);
 8008626:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80086f8 <rt_test_004_004_execute+0xd8>
 800862a:	69ab      	ldr	r3, [r5, #24]
  return chThdGetSelfX()->prio;
 800862c:	689c      	ldr	r4, [r3, #8]
    chThdGetSelfX()->prio += 2;
 800862e:	1ca6      	adds	r6, r4, #2
  {
    p1 = chThdSetPriority(prio + 1);
 8008630:	1c67      	adds	r7, r4, #1
    chThdGetSelfX()->prio += 2;
 8008632:	609e      	str	r6, [r3, #8]
    p1 = chThdSetPriority(prio + 1);
 8008634:	4638      	mov	r0, r7
  test_set_step(2);
 8008636:	2302      	movs	r3, #2
 8008638:	f8c8 3000 	str.w	r3, [r8]
    p1 = chThdSetPriority(prio + 1);
 800863c:	f7ff ffd8 	bl	80085f0 <chThdSetPriority>
    test_assert(p1 == prio, "unexpected returned priority level");
 8008640:	1b00      	subs	r0, r0, r4
 8008642:	fab0 f080 	clz	r0, r0
 8008646:	4928      	ldr	r1, [pc, #160]	; (80086e8 <rt_test_004_004_execute+0xc8>)
 8008648:	0940      	lsrs	r0, r0, #5
 800864a:	f7f8 f9c9 	bl	80009e0 <_test_assert>
 800864e:	b108      	cbz	r0, 8008654 <rt_test_004_004_execute+0x34>
    chThdGetSelfX()->prio = prio;
    chThdGetSelfX()->realprio = prio;
    chSysUnlock();
  }
  test_end_step(4);
}
 8008650:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    test_assert(chThdGetSelfX()->prio == prio + 2, "unexpected priority level");
 8008654:	69ab      	ldr	r3, [r5, #24]
 8008656:	4925      	ldr	r1, [pc, #148]	; (80086ec <rt_test_004_004_execute+0xcc>)
 8008658:	6898      	ldr	r0, [r3, #8]
 800865a:	1b80      	subs	r0, r0, r6
 800865c:	fab0 f080 	clz	r0, r0
 8008660:	0940      	lsrs	r0, r0, #5
 8008662:	f7f8 f9bd 	bl	80009e0 <_test_assert>
 8008666:	2800      	cmp	r0, #0
 8008668:	d1f2      	bne.n	8008650 <rt_test_004_004_execute+0x30>
    test_assert(chThdGetSelfX()->realprio == prio + 1, "unexpected returned real priority level");
 800866a:	69ab      	ldr	r3, [r5, #24]
 800866c:	4920      	ldr	r1, [pc, #128]	; (80086f0 <rt_test_004_004_execute+0xd0>)
 800866e:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8008670:	1bc0      	subs	r0, r0, r7
 8008672:	fab0 f080 	clz	r0, r0
 8008676:	0940      	lsrs	r0, r0, #5
 8008678:	f7f8 f9b2 	bl	80009e0 <_test_assert>
 800867c:	2800      	cmp	r0, #0
 800867e:	d1e7      	bne.n	8008650 <rt_test_004_004_execute+0x30>
    p1 = chThdSetPriority(prio + 3);
 8008680:	1ce6      	adds	r6, r4, #3
  test_set_step(3);
 8008682:	2303      	movs	r3, #3
    p1 = chThdSetPriority(prio + 3);
 8008684:	4630      	mov	r0, r6
  test_set_step(3);
 8008686:	f8c8 3000 	str.w	r3, [r8]
    p1 = chThdSetPriority(prio + 3);
 800868a:	f7ff ffb1 	bl	80085f0 <chThdSetPriority>
    test_assert(p1 == prio + 1, "unexpected returned priority level");
 800868e:	1a38      	subs	r0, r7, r0
 8008690:	fab0 f080 	clz	r0, r0
 8008694:	4914      	ldr	r1, [pc, #80]	; (80086e8 <rt_test_004_004_execute+0xc8>)
 8008696:	0940      	lsrs	r0, r0, #5
 8008698:	f7f8 f9a2 	bl	80009e0 <_test_assert>
 800869c:	2800      	cmp	r0, #0
 800869e:	d1d7      	bne.n	8008650 <rt_test_004_004_execute+0x30>
    test_assert(chThdGetSelfX()->prio == prio + 3, "unexpected priority level");
 80086a0:	69ab      	ldr	r3, [r5, #24]
 80086a2:	4912      	ldr	r1, [pc, #72]	; (80086ec <rt_test_004_004_execute+0xcc>)
 80086a4:	6898      	ldr	r0, [r3, #8]
 80086a6:	1b80      	subs	r0, r0, r6
 80086a8:	fab0 f080 	clz	r0, r0
 80086ac:	0940      	lsrs	r0, r0, #5
 80086ae:	f7f8 f997 	bl	80009e0 <_test_assert>
 80086b2:	2800      	cmp	r0, #0
 80086b4:	d1cc      	bne.n	8008650 <rt_test_004_004_execute+0x30>
    test_assert(chThdGetSelfX()->realprio == prio + 3, "unexpected real priority level");
 80086b6:	69ab      	ldr	r3, [r5, #24]
 80086b8:	490e      	ldr	r1, [pc, #56]	; (80086f4 <rt_test_004_004_execute+0xd4>)
 80086ba:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80086bc:	1b80      	subs	r0, r0, r6
 80086be:	fab0 f080 	clz	r0, r0
 80086c2:	0940      	lsrs	r0, r0, #5
 80086c4:	f7f8 f98c 	bl	80009e0 <_test_assert>
 80086c8:	2800      	cmp	r0, #0
 80086ca:	d1c1      	bne.n	8008650 <rt_test_004_004_execute+0x30>
  test_set_step(4);
 80086cc:	2304      	movs	r3, #4
 80086ce:	f8c8 3000 	str.w	r3, [r8]
 80086d2:	2320      	movs	r3, #32
 80086d4:	f383 8811 	msr	BASEPRI, r3
  return ch.rlist.current;
 80086d8:	69ab      	ldr	r3, [r5, #24]
    chThdGetSelfX()->prio = prio;
 80086da:	609c      	str	r4, [r3, #8]
    chThdGetSelfX()->realprio = prio;
 80086dc:	63dc      	str	r4, [r3, #60]	; 0x3c
 80086de:	f380 8811 	msr	BASEPRI, r0
  test_end_step(4);
 80086e2:	e7b5      	b.n	8008650 <rt_test_004_004_execute+0x30>
 80086e4:	200009b0 	.word	0x200009b0
 80086e8:	0800a44c 	.word	0x0800a44c
 80086ec:	0800a470 	.word	0x0800a470
 80086f0:	0800a48c 	.word	0x0800a48c
 80086f4:	0800a4b4 	.word	0x0800a4b4
 80086f8:	2000149c 	.word	0x2000149c
 80086fc:	00000000 	.word	0x00000000

08008700 <rt_test_004_003_execute>:
static void rt_test_004_003_execute(void) {
 8008700:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008704:	4f1d      	ldr	r7, [pc, #116]	; (800877c <rt_test_004_003_execute+0x7c>)
  test_set_step(1);
 8008706:	f8df 8080 	ldr.w	r8, [pc, #128]	; 8008788 <rt_test_004_003_execute+0x88>
  return chThdGetSelfX()->prio;
 800870a:	69bb      	ldr	r3, [r7, #24]
 800870c:	689e      	ldr	r6, [r3, #8]
    p1 = chThdSetPriority(prio + 1);
 800870e:	1c75      	adds	r5, r6, #1
  test_set_step(1);
 8008710:	2301      	movs	r3, #1
    p1 = chThdSetPriority(prio + 1);
 8008712:	4628      	mov	r0, r5
  test_set_step(1);
 8008714:	f8c8 3000 	str.w	r3, [r8]
    p1 = chThdSetPriority(prio + 1);
 8008718:	f7ff ff6a 	bl	80085f0 <chThdSetPriority>
 800871c:	4604      	mov	r4, r0
    test_assert(p1 == prio, "unexpected returned priority level");
 800871e:	1b80      	subs	r0, r0, r6
 8008720:	fab0 f080 	clz	r0, r0
 8008724:	4916      	ldr	r1, [pc, #88]	; (8008780 <rt_test_004_003_execute+0x80>)
 8008726:	0940      	lsrs	r0, r0, #5
 8008728:	f7f8 f95a 	bl	80009e0 <_test_assert>
 800872c:	b108      	cbz	r0, 8008732 <rt_test_004_003_execute+0x32>
}
 800872e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008732:	69bb      	ldr	r3, [r7, #24]
    test_assert(chThdGetPriorityX() == prio + 1, "unexpected priority level");
 8008734:	4913      	ldr	r1, [pc, #76]	; (8008784 <rt_test_004_003_execute+0x84>)
 8008736:	6898      	ldr	r0, [r3, #8]
 8008738:	1b40      	subs	r0, r0, r5
 800873a:	fab0 f080 	clz	r0, r0
 800873e:	0940      	lsrs	r0, r0, #5
 8008740:	f7f8 f94e 	bl	80009e0 <_test_assert>
 8008744:	2800      	cmp	r0, #0
 8008746:	d1f2      	bne.n	800872e <rt_test_004_003_execute+0x2e>
  test_set_step(2);
 8008748:	2302      	movs	r3, #2
    p1 = chThdSetPriority(p1);
 800874a:	4620      	mov	r0, r4
  test_set_step(2);
 800874c:	f8c8 3000 	str.w	r3, [r8]
    p1 = chThdSetPriority(p1);
 8008750:	f7ff ff4e 	bl	80085f0 <chThdSetPriority>
    test_assert(p1 == prio + 1, "unexpected returned priority level");
 8008754:	1a28      	subs	r0, r5, r0
 8008756:	fab0 f080 	clz	r0, r0
 800875a:	4909      	ldr	r1, [pc, #36]	; (8008780 <rt_test_004_003_execute+0x80>)
 800875c:	0940      	lsrs	r0, r0, #5
 800875e:	f7f8 f93f 	bl	80009e0 <_test_assert>
 8008762:	2800      	cmp	r0, #0
 8008764:	d1e3      	bne.n	800872e <rt_test_004_003_execute+0x2e>
 8008766:	69bb      	ldr	r3, [r7, #24]
    test_assert(chThdGetPriorityX() == prio, "unexpected priority level");
 8008768:	4906      	ldr	r1, [pc, #24]	; (8008784 <rt_test_004_003_execute+0x84>)
 800876a:	6898      	ldr	r0, [r3, #8]
 800876c:	1b80      	subs	r0, r0, r6
 800876e:	fab0 f080 	clz	r0, r0
}
 8008772:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    test_assert(chThdGetPriorityX() == prio, "unexpected priority level");
 8008776:	0940      	lsrs	r0, r0, #5
 8008778:	f7f8 b932 	b.w	80009e0 <_test_assert>
 800877c:	200009b0 	.word	0x200009b0
 8008780:	0800a44c 	.word	0x0800a44c
 8008784:	0800a470 	.word	0x0800a470
 8008788:	2000149c 	.word	0x2000149c
 800878c:	00000000 	.word	0x00000000

08008790 <chSysRestoreStatusX.part.0>:
 *
 * @param[in] sts       the system status to be restored.
 *
 * @xclass
 */
void chSysRestoreStatusX(syssts_t sts) {
 8008790:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008792:	f3ef 8405 	mrs	r4, IPSR
  return (bool)((__get_IPSR() & 0x1FFU) != 0U);
 8008796:	f3c4 0408 	ubfx	r4, r4, #0, #9

  if (port_irq_enabled(sts)) {
    if (port_is_isr_context()) {
 800879a:	b11c      	cbz	r4, 80087a4 <chSysRestoreStatusX.part.0+0x14>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 800879c:	2300      	movs	r3, #0
 800879e:	f383 8811 	msr	BASEPRI, r3
    else {
      chSchRescheduleS();
      chSysUnlock();
    }
  }
}
 80087a2:	bd10      	pop	{r4, pc}
      chSchRescheduleS();
 80087a4:	f7fb f8ac 	bl	8003900 <chSchRescheduleS>
 80087a8:	f384 8811 	msr	BASEPRI, r4
}
 80087ac:	bd10      	pop	{r4, pc}
 80087ae:	bf00      	nop

080087b0 <rt_test_002_002_execute>:
static void rt_test_002_002_execute(void) {
 80087b0:	b510      	push	{r4, lr}
  test_set_step(1);
 80087b2:	4c31      	ldr	r4, [pc, #196]	; (8008878 <rt_test_002_002_execute+0xc8>)
 80087b4:	2301      	movs	r3, #1
static void rt_test_002_002_execute(void) {
 80087b6:	b086      	sub	sp, #24
  test_set_step(1);
 80087b8:	6023      	str	r3, [r4, #0]
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80087ba:	f3ef 8311 	mrs	r3, BASEPRI
  if (port_irq_enabled(sts)) {
 80087be:	b91b      	cbnz	r3, 80087c8 <rt_test_002_002_execute+0x18>
 80087c0:	f7f8 ff1e 	bl	8001600 <chSysGetStatusAndLockX.part.0>
  return sts == (syssts_t)CORTEX_BASEPRI_DISABLED;
 80087c4:	f7ff ffe4 	bl	8008790 <chSysRestoreStatusX.part.0>
  test_set_step(2);
 80087c8:	2302      	movs	r3, #2
 80087ca:	6023      	str	r3, [r4, #0]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80087cc:	2320      	movs	r3, #32
 80087ce:	f383 8811 	msr	BASEPRI, r3
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80087d2:	f3ef 8311 	mrs	r3, BASEPRI
 80087d6:	b91b      	cbnz	r3, 80087e0 <rt_test_002_002_execute+0x30>
 80087d8:	f7f8 ff12 	bl	8001600 <chSysGetStatusAndLockX.part.0>
 80087dc:	f7ff ffd8 	bl	8008790 <chSysRestoreStatusX.part.0>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80087e0:	2300      	movs	r3, #0
 80087e2:	f383 8811 	msr	BASEPRI, r3
  test_set_step(3);
 80087e6:	2303      	movs	r3, #3
 80087e8:	6023      	str	r3, [r4, #0]
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80087ea:	f3ef 8311 	mrs	r3, BASEPRI
 *
 * @special
 */
static inline void chSysUnconditionalLock(void) {

  if (port_irq_enabled(port_get_irq_status())) {
 80087ee:	b913      	cbnz	r3, 80087f6 <rt_test_002_002_execute+0x46>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80087f0:	2320      	movs	r3, #32
 80087f2:	f383 8811 	msr	BASEPRI, r3
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80087f6:	f3ef 8311 	mrs	r3, BASEPRI
 80087fa:	b913      	cbnz	r3, 8008802 <rt_test_002_002_execute+0x52>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80087fc:	2320      	movs	r3, #32
 80087fe:	f383 8811 	msr	BASEPRI, r3
 8008802:	2300      	movs	r3, #0
 8008804:	f383 8811 	msr	BASEPRI, r3
  test_set_step(4);
 8008808:	2204      	movs	r2, #4
 800880a:	6022      	str	r2, [r4, #0]
 800880c:	2220      	movs	r2, #32
 800880e:	f382 8811 	msr	BASEPRI, r2
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008812:	f3ef 8211 	mrs	r2, BASEPRI
 *
 * @special
 */
static inline void chSysUnconditionalUnlock(void) {

  if (!port_irq_enabled(port_get_irq_status())) {
 8008816:	b10a      	cbz	r2, 800881c <rt_test_002_002_execute+0x6c>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8008818:	f383 8811 	msr	BASEPRI, r3
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800881c:	f3ef 8311 	mrs	r3, BASEPRI
 8008820:	b113      	cbz	r3, 8008828 <rt_test_002_002_execute+0x78>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8008822:	2300      	movs	r3, #0
 8008824:	f383 8811 	msr	BASEPRI, r3
  test_set_step(5);
 8008828:	2205      	movs	r2, #5
 *
 * @init
 */
static inline void chVTObjectInit(virtual_timer_t *vtp) {

  vtp->func = NULL;
 800882a:	2300      	movs	r3, #0
 800882c:	9304      	str	r3, [sp, #16]
 800882e:	6022      	str	r2, [r4, #0]
 8008830:	2320      	movs	r3, #32
 8008832:	f383 8811 	msr	BASEPRI, r3
 *
 * @iclass
 */
static inline void chVTResetI(virtual_timer_t *vtp) {

  if (chVTIsArmedI(vtp)) {
 8008836:	9b04      	ldr	r3, [sp, #16]
    chVTDoResetI(vtp);
 8008838:	ac01      	add	r4, sp, #4
  if (chVTIsArmedI(vtp)) {
 800883a:	b113      	cbz	r3, 8008842 <rt_test_002_002_execute+0x92>
    chVTDoResetI(vtp);
 800883c:	4620      	mov	r0, r4
 800883e:	f7f8 fe57 	bl	80014f0 <chVTDoResetI>
 */
static inline void chVTSetI(virtual_timer_t *vtp, sysinterval_t delay,
                            vtfunc_t vtfunc, void *par) {

  chVTResetI(vtp);
  chVTDoSetI(vtp, delay, vtfunc, par);
 8008842:	4620      	mov	r0, r4
 8008844:	4a0d      	ldr	r2, [pc, #52]	; (800887c <rt_test_002_002_execute+0xcc>)
 8008846:	2300      	movs	r3, #0
 8008848:	2101      	movs	r1, #1
 800884a:	f7f8 fe91 	bl	8001570 <chVTDoSetI>
 800884e:	2400      	movs	r4, #0
 8008850:	f384 8811 	msr	BASEPRI, r4
    chThdSleep(10);
 8008854:	200a      	movs	r0, #10
 8008856:	f7fa f863 	bl	8002920 <chThdSleep>
 800885a:	2320      	movs	r3, #32
 800885c:	f383 8811 	msr	BASEPRI, r3
  b = chVTIsArmedI(vtp);
 8008860:	9804      	ldr	r0, [sp, #16]
 8008862:	f384 8811 	msr	BASEPRI, r4
    test_assert(chVTIsArmed(&vt) == false, "timer still armed");
 8008866:	fab0 f080 	clz	r0, r0
 800886a:	4905      	ldr	r1, [pc, #20]	; (8008880 <rt_test_002_002_execute+0xd0>)
 800886c:	0940      	lsrs	r0, r0, #5
 800886e:	f7f8 f8b7 	bl	80009e0 <_test_assert>
}
 8008872:	b006      	add	sp, #24
 8008874:	bd10      	pop	{r4, pc}
 8008876:	bf00      	nop
 8008878:	2000149c 	.word	0x2000149c
 800887c:	08008891 	.word	0x08008891
 8008880:	0800a4d4 	.word	0x0800a4d4
	...

08008890 <vtcb>:
static void vtcb(void *p) {
 8008890:	b508      	push	{r3, lr}
 8008892:	2320      	movs	r3, #32
 8008894:	f383 8811 	msr	BASEPRI, r3
 8008898:	2200      	movs	r2, #0
 800889a:	f382 8811 	msr	BASEPRI, r2
 800889e:	f383 8811 	msr	BASEPRI, r3
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80088a2:	f3ef 8311 	mrs	r3, BASEPRI
 80088a6:	b91b      	cbnz	r3, 80088b0 <vtcb+0x20>
 80088a8:	f7f8 feaa 	bl	8001600 <chSysGetStatusAndLockX.part.0>
 80088ac:	f7ff ff70 	bl	8008790 <chSysRestoreStatusX.part.0>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80088b0:	2300      	movs	r3, #0
 80088b2:	f383 8811 	msr	BASEPRI, r3
}
 80088b6:	bd08      	pop	{r3, pc}
	...

080088c0 <__early_init>:

static void stm32_gpio_init(void) {

  /* Enabling GPIO-related clocks, the mask comes from the
     registry header file.*/
  rccResetAHB1(STM32_GPIO_EN_MASK);
 80088c0:	4a7e      	ldr	r2, [pc, #504]	; (8008abc <__early_init+0x1fc>)
  gpiop->OTYPER  = config->otyper;
 80088c2:	487f      	ldr	r0, [pc, #508]	; (8008ac0 <__early_init+0x200>)
  rccResetAHB1(STM32_GPIO_EN_MASK);
 80088c4:	6913      	ldr	r3, [r2, #16]
  gpiop->OTYPER  = config->otyper;
 80088c6:	f8df c24c 	ldr.w	ip, [pc, #588]	; 8008b14 <__early_init+0x254>
  rccResetAHB1(STM32_GPIO_EN_MASK);
 80088ca:	f240 11ff 	movw	r1, #511	; 0x1ff
 80088ce:	430b      	orrs	r3, r1
/**
 * @brief   Early initialization code.
 * @details GPIO ports and system clocks are initialized before everything
 *          else.
 */
void __early_init(void) {
 80088d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  rccResetAHB1(STM32_GPIO_EN_MASK);
 80088d4:	6113      	str	r3, [r2, #16]
 80088d6:	6913      	ldr	r3, [r2, #16]
  gpiop->OTYPER  = config->otyper;
 80088d8:	4e7a      	ldr	r6, [pc, #488]	; (8008ac4 <__early_init+0x204>)
  gpiop->PUPDR   = config->pupdr;
 80088da:	f8df e23c 	ldr.w	lr, [pc, #572]	; 8008b18 <__early_init+0x258>
  gpiop->AFRL    = config->afrl;
 80088de:	4f7a      	ldr	r7, [pc, #488]	; (8008ac8 <__early_init+0x208>)
  gpiop->OTYPER  = config->otyper;
 80088e0:	4d7a      	ldr	r5, [pc, #488]	; (8008acc <__early_init+0x20c>)
 80088e2:	4c7b      	ldr	r4, [pc, #492]	; (8008ad0 <__early_init+0x210>)
  rccResetAHB1(STM32_GPIO_EN_MASK);
 80088e4:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 80088e8:	f023 0301 	bic.w	r3, r3, #1
 80088ec:	6113      	str	r3, [r2, #16]
 80088ee:	6913      	ldr	r3, [r2, #16]
  rccEnableAHB1(STM32_GPIO_EN_MASK, true);
 80088f0:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80088f2:	430b      	orrs	r3, r1
 80088f4:	6313      	str	r3, [r2, #48]	; 0x30
 80088f6:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80088f8:	430b      	orrs	r3, r1
 80088fa:	6513      	str	r3, [r2, #80]	; 0x50
  gpiop->OSPEEDR = config->ospeedr;
 80088fc:	f46f 41a8 	mvn.w	r1, #21504	; 0x5400
  gpiop->OTYPER  = config->otyper;
 8008900:	2300      	movs	r3, #0
  rccEnableAHB1(STM32_GPIO_EN_MASK, true);
 8008902:	f8d2 8050 	ldr.w	r8, [r2, #80]	; 0x50
  gpiop->OTYPER  = config->otyper;
 8008906:	6043      	str	r3, [r0, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8008908:	6081      	str	r1, [r0, #8]
  gpiop->ODR     = config->odr;
 800890a:	f64f 71ff 	movw	r1, #65535	; 0xffff
  gpiop->PUPDR   = config->pupdr;
 800890e:	f8c0 e00c 	str.w	lr, [r0, #12]
  gpiop->AFRH    = config->afrh;
 8008912:	f8df 8208 	ldr.w	r8, [pc, #520]	; 8008b1c <__early_init+0x25c>
  gpiop->ODR     = config->odr;
 8008916:	6141      	str	r1, [r0, #20]
  gpiop->MODER   = config->moder;
 8008918:	f8df e204 	ldr.w	lr, [pc, #516]	; 8008b20 <__early_init+0x260>
  gpiop->AFRL    = config->afrl;
 800891c:	6207      	str	r7, [r0, #32]
  gpiop->OTYPER  = config->otyper;
 800891e:	f44f 7710 	mov.w	r7, #576	; 0x240
  gpiop->AFRH    = config->afrh;
 8008922:	f8c0 8024 	str.w	r8, [r0, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8008926:	f8c0 e000 	str.w	lr, [r0]
  gpiop->OTYPER  = config->otyper;
 800892a:	6077      	str	r7, [r6, #4]
  gpiop->OSPEEDR = config->ospeedr;
 800892c:	f04f 30ff 	mov.w	r0, #4294967295
  gpiop->PUPDR   = config->pupdr;
 8008930:	f8df e1f0 	ldr.w	lr, [pc, #496]	; 8008b24 <__early_init+0x264>
  gpiop->OSPEEDR = config->ospeedr;
 8008934:	60b0      	str	r0, [r6, #8]
  gpiop->AFRL    = config->afrl;
 8008936:	f04f 6780 	mov.w	r7, #67108864	; 0x4000000
  gpiop->PUPDR   = config->pupdr;
 800893a:	f8c6 e00c 	str.w	lr, [r6, #12]
  gpiop->ODR     = config->odr;
 800893e:	6171      	str	r1, [r6, #20]
  gpiop->AFRH    = config->afrh;
 8008940:	f04f 0e40 	mov.w	lr, #64	; 0x40
  gpiop->AFRL    = config->afrl;
 8008944:	6237      	str	r7, [r6, #32]
  gpiop->MODER   = config->moder;
 8008946:	4f63      	ldr	r7, [pc, #396]	; (8008ad4 <__early_init+0x214>)
  gpiop->AFRH    = config->afrh;
 8008948:	f8c6 e024 	str.w	lr, [r6, #36]	; 0x24
  gpiop->MODER   = config->moder;
 800894c:	6037      	str	r7, [r6, #0]
  gpiop->PUPDR   = config->pupdr;
 800894e:	f106 56a2 	add.w	r6, r6, #339738624	; 0x14400000
 8008952:	f506 3644 	add.w	r6, r6, #200704	; 0x31000
 8008956:	f506 76aa 	add.w	r6, r6, #340	; 0x154
  gpiop->OTYPER  = config->otyper;
 800895a:	606b      	str	r3, [r5, #4]
  gpiop->OSPEEDR = config->ospeedr;
 800895c:	60a8      	str	r0, [r5, #8]
  gpiop->PUPDR   = config->pupdr;
 800895e:	60ee      	str	r6, [r5, #12]
  gpiop->AFRL    = config->afrl;
 8008960:	f04f 46c0 	mov.w	r6, #1610612736	; 0x60000000
  gpiop->ODR     = config->odr;
 8008964:	6169      	str	r1, [r5, #20]
  gpiop->AFRL    = config->afrl;
 8008966:	622e      	str	r6, [r5, #32]
  gpiop->AFRH    = config->afrh;
 8008968:	4e5b      	ldr	r6, [pc, #364]	; (8008ad8 <__early_init+0x218>)
 800896a:	626e      	str	r6, [r5, #36]	; 0x24
  gpiop->MODER   = config->moder;
 800896c:	4e5b      	ldr	r6, [pc, #364]	; (8008adc <__early_init+0x21c>)
 800896e:	602e      	str	r6, [r5, #0]
  gpiop->PUPDR   = config->pupdr;
 8008970:	4d5b      	ldr	r5, [pc, #364]	; (8008ae0 <__early_init+0x220>)
  gpiop->OTYPER  = config->otyper;
 8008972:	6063      	str	r3, [r4, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8008974:	60a0      	str	r0, [r4, #8]
  gpiop->PUPDR   = config->pupdr;
 8008976:	60e5      	str	r5, [r4, #12]
  gpiop->ODR     = config->odr;
 8008978:	f640 75ff 	movw	r5, #4095	; 0xfff
 800897c:	6165      	str	r5, [r4, #20]
  gpiop->OTYPER  = config->otyper;
 800897e:	4f59      	ldr	r7, [pc, #356]	; (8008ae4 <__early_init+0x224>)
 8008980:	4e59      	ldr	r6, [pc, #356]	; (8008ae8 <__early_init+0x228>)
  gpiop->MODER   = config->moder;
 8008982:	4d5a      	ldr	r5, [pc, #360]	; (8008aec <__early_init+0x22c>)
  gpiop->AFRL    = config->afrl;
 8008984:	6223      	str	r3, [r4, #32]
  gpiop->AFRH    = config->afrh;
 8008986:	6263      	str	r3, [r4, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8008988:	6025      	str	r5, [r4, #0]
  gpiop->OTYPER  = config->otyper;
 800898a:	f8cc 3004 	str.w	r3, [ip, #4]
 800898e:	4d58      	ldr	r5, [pc, #352]	; (8008af0 <__early_init+0x230>)
  gpiop->OSPEEDR = config->ospeedr;
 8008990:	f8cc 0008 	str.w	r0, [ip, #8]
  gpiop->OTYPER  = config->otyper;
 8008994:	f504 54a0 	add.w	r4, r4, #5120	; 0x1400
  gpiop->PUPDR   = config->pupdr;
 8008998:	f8cc 300c 	str.w	r3, [ip, #12]
  gpiop->ODR     = config->odr;
 800899c:	f8cc 1014 	str.w	r1, [ip, #20]
  gpiop->AFRL    = config->afrl;
 80089a0:	f8cc 3020 	str.w	r3, [ip, #32]
  gpiop->AFRH    = config->afrh;
 80089a4:	f8cc 3024 	str.w	r3, [ip, #36]	; 0x24
  gpiop->MODER   = config->moder;
 80089a8:	f8cc e000 	str.w	lr, [ip]
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
#endif

  /* PWR initialization.*/
#if defined(STM32F4XX) || defined(__DOXYGEN__)
  PWR->CR = STM32_VOS;
 80089ac:	f5ac 3cd0 	sub.w	ip, ip, #106496	; 0x1a000
  gpiop->OTYPER  = config->otyper;
 80089b0:	607b      	str	r3, [r7, #4]
  gpiop->OSPEEDR = config->ospeedr;
 80089b2:	60b8      	str	r0, [r7, #8]
  gpiop->PUPDR   = config->pupdr;
 80089b4:	60fb      	str	r3, [r7, #12]
  gpiop->ODR     = config->odr;
 80089b6:	6179      	str	r1, [r7, #20]
  gpiop->AFRL    = config->afrl;
 80089b8:	623b      	str	r3, [r7, #32]
  gpiop->AFRH    = config->afrh;
 80089ba:	627b      	str	r3, [r7, #36]	; 0x24
  gpiop->MODER   = config->moder;
 80089bc:	603b      	str	r3, [r7, #0]
  gpiop->OTYPER  = config->otyper;
 80089be:	6073      	str	r3, [r6, #4]
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 80089c0:	f04f 5780 	mov.w	r7, #268435456	; 0x10000000
  gpiop->OSPEEDR = config->ospeedr;
 80089c4:	60b0      	str	r0, [r6, #8]
  gpiop->PUPDR   = config->pupdr;
 80089c6:	60f3      	str	r3, [r6, #12]
  gpiop->ODR     = config->odr;
 80089c8:	6171      	str	r1, [r6, #20]
  gpiop->AFRL    = config->afrl;
 80089ca:	6233      	str	r3, [r6, #32]
  gpiop->AFRH    = config->afrh;
 80089cc:	6273      	str	r3, [r6, #36]	; 0x24
  gpiop->MODER   = config->moder;
 80089ce:	6033      	str	r3, [r6, #0]
  PWR->CR = STM32_VOS;
 80089d0:	f44f 4640 	mov.w	r6, #49152	; 0xc000
  gpiop->OTYPER  = config->otyper;
 80089d4:	606b      	str	r3, [r5, #4]
  gpiop->OSPEEDR = config->ospeedr;
 80089d6:	60a8      	str	r0, [r5, #8]
  gpiop->PUPDR   = config->pupdr;
 80089d8:	60eb      	str	r3, [r5, #12]
  gpiop->ODR     = config->odr;
 80089da:	6169      	str	r1, [r5, #20]
  gpiop->AFRL    = config->afrl;
 80089dc:	622b      	str	r3, [r5, #32]
  gpiop->AFRH    = config->afrh;
 80089de:	626b      	str	r3, [r5, #36]	; 0x24
  gpiop->MODER   = config->moder;
 80089e0:	602b      	str	r3, [r5, #0]
  gpiop->OTYPER  = config->otyper;
 80089e2:	6063      	str	r3, [r4, #4]
  gpiop->OSPEEDR = config->ospeedr;
 80089e4:	60a0      	str	r0, [r4, #8]
  gpiop->PUPDR   = config->pupdr;
 80089e6:	60e3      	str	r3, [r4, #12]
  gpiop->ODR     = config->odr;
 80089e8:	6161      	str	r1, [r4, #20]
  gpiop->AFRL    = config->afrl;
 80089ea:	6223      	str	r3, [r4, #32]
  gpiop->AFRH    = config->afrh;
 80089ec:	6263      	str	r3, [r4, #36]	; 0x24
  gpiop->MODER   = config->moder;
 80089ee:	6023      	str	r3, [r4, #0]
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 80089f0:	6417      	str	r7, [r2, #64]	; 0x40
  PWR->CR = STM32_VOS;
 80089f2:	f8cc 6000 	str.w	r6, [ip]
  PWR->CR = 0;
#endif

  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 80089f6:	6813      	ldr	r3, [r2, #0]
 80089f8:	f043 0301 	orr.w	r3, r3, #1
 80089fc:	6013      	str	r3, [r2, #0]
  while (!(RCC->CR & RCC_CR_HSIRDY))
 80089fe:	6813      	ldr	r3, [r2, #0]
 8008a00:	079e      	lsls	r6, r3, #30
 8008a02:	d5fc      	bpl.n	80089fe <__early_init+0x13e>
    ;                                       /* Wait until HSI is stable.    */

  /* HSI is selected as new source without touching the other fields in
     CFGR. Clearing the register has to be postponed after HSI is the
     new source.*/
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW, selecting HSI.     */
 8008a04:	6891      	ldr	r1, [r2, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 8008a06:	4b2d      	ldr	r3, [pc, #180]	; (8008abc <__early_init+0x1fc>)
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW, selecting HSI.     */
 8008a08:	f021 0103 	bic.w	r1, r1, #3
 8008a0c:	6091      	str	r1, [r2, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 8008a0e:	689a      	ldr	r2, [r3, #8]
 8008a10:	f012 020c 	ands.w	r2, r2, #12
 8008a14:	d1fb      	bne.n	8008a0e <__early_init+0x14e>
    ;                                       /* Wait until HSI is selected.  */

  /* Registers finally cleared to reset values.*/
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 8008a16:	6818      	ldr	r0, [r3, #0]
  RCC->CR |= RCC_CR_HSEON | RCC_CR_HSEBYP;
#else
  /* No HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEON;
#endif
  while ((RCC->CR & RCC_CR_HSERDY) == 0)
 8008a18:	4928      	ldr	r1, [pc, #160]	; (8008abc <__early_init+0x1fc>)
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 8008a1a:	f000 00f9 	and.w	r0, r0, #249	; 0xf9
 8008a1e:	6018      	str	r0, [r3, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 8008a20:	609a      	str	r2, [r3, #8]
  RCC->CR |= RCC_CR_HSEON;
 8008a22:	681a      	ldr	r2, [r3, #0]
 8008a24:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8008a28:	601a      	str	r2, [r3, #0]
  while ((RCC->CR & RCC_CR_HSERDY) == 0)
 8008a2a:	680b      	ldr	r3, [r1, #0]
 8008a2c:	039d      	lsls	r5, r3, #14
 8008a2e:	d5fc      	bpl.n	8008a2a <__early_init+0x16a>
    ;                           /* Waits until HSE is stable.               */
#endif

#if STM32_LSI_ENABLED
  /* LSI activation.*/
  RCC->CSR |= RCC_CSR_LSION;
 8008a30:	6f4a      	ldr	r2, [r1, #116]	; 0x74
  while ((RCC->CSR & RCC_CSR_LSIRDY) == 0)
 8008a32:	4b22      	ldr	r3, [pc, #136]	; (8008abc <__early_init+0x1fc>)
  RCC->CSR |= RCC_CSR_LSION;
 8008a34:	f042 0201 	orr.w	r2, r2, #1
 8008a38:	674a      	str	r2, [r1, #116]	; 0x74
  while ((RCC->CSR & RCC_CSR_LSIRDY) == 0)
 8008a3a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8008a3c:	0794      	lsls	r4, r2, #30
 8008a3e:	d5fc      	bpl.n	8008a3a <__early_init+0x17a>
    ;                           /* Waits until LSI is stable.               */
#endif

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->PLLCFGR = STM32_PLLQ | STM32_PLLSRC | STM32_PLLP | STM32_PLLN |
 8008a40:	4a2c      	ldr	r2, [pc, #176]	; (8008af4 <__early_init+0x234>)
 8008a42:	605a      	str	r2, [r3, #4]
                 STM32_PLLM;
  RCC->CR |= RCC_CR_PLLON;
 8008a44:	681a      	ldr	r2, [r3, #0]

  /* Synchronization with voltage regulator stabilization.*/
#if defined(STM32F4XX)
  while ((PWR->CSR & PWR_CSR_VOSRDY) == 0)
 8008a46:	492c      	ldr	r1, [pc, #176]	; (8008af8 <__early_init+0x238>)
  RCC->CR |= RCC_CR_PLLON;
 8008a48:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8008a4c:	601a      	str	r2, [r3, #0]
  while ((PWR->CSR & PWR_CSR_VOSRDY) == 0)
 8008a4e:	684b      	ldr	r3, [r1, #4]
 8008a50:	0458      	lsls	r0, r3, #17
 8008a52:	d5fc      	bpl.n	8008a4e <__early_init+0x18e>
      ;
#endif /* STM32_OVERDRIVE_REQUIRED */
#endif /* defined(STM32F4XX) */

  /* Waiting for PLL lock.*/
  while (!(RCC->CR & RCC_CR_PLLRDY))
 8008a54:	4b19      	ldr	r3, [pc, #100]	; (8008abc <__early_init+0x1fc>)
 8008a56:	681a      	ldr	r2, [r3, #0]
 8008a58:	0192      	lsls	r2, r2, #6
 8008a5a:	d5fc      	bpl.n	8008a56 <__early_init+0x196>
    ;
#endif /* STM32_ACTIVATE_PLLSAI */

  /* Other clock-related settings (dividers, MCO etc).*/
#if !defined(STM32F413xx)
  RCC->CFGR = STM32_MCO2PRE | STM32_MCO2SEL | STM32_MCO1PRE | STM32_MCO1SEL |
 8008a5c:	4927      	ldr	r1, [pc, #156]	; (8008afc <__early_init+0x23c>)

  /* Flash setup.*/
#if !defined(STM32_REMOVE_REVISION_A_FIX)
  /* Some old revisions of F4x MCUs randomly crashes with compiler
     optimizations enabled AND flash caches enabled. */
  if ((DBGMCU->IDCODE == 0x20006411) && (SCB->CPUID == 0x410FC241))
 8008a5e:	4a28      	ldr	r2, [pc, #160]	; (8008b00 <__early_init+0x240>)
  RCC->CFGR = STM32_MCO2PRE | STM32_MCO2SEL | STM32_MCO1PRE | STM32_MCO1SEL |
 8008a60:	6099      	str	r1, [r3, #8]
  if ((DBGMCU->IDCODE == 0x20006411) && (SCB->CPUID == 0x410FC241))
 8008a62:	6812      	ldr	r2, [r2, #0]
 8008a64:	4b27      	ldr	r3, [pc, #156]	; (8008b04 <__early_init+0x244>)
 8008a66:	429a      	cmp	r2, r3
 8008a68:	d01e      	beq.n	8008aa8 <__early_init+0x1e8>
    FLASH->ACR = FLASH_ACR_PRFTEN | STM32_FLASHBITS;
  else
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
 8008a6a:	4b27      	ldr	r3, [pc, #156]	; (8008b08 <__early_init+0x248>)
 8008a6c:	f240 7205 	movw	r2, #1797	; 0x705
 8008a70:	601a      	str	r2, [r3, #0]
                 FLASH_ACR_DCEN | STM32_FLASHBITS;
#else
  FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
               FLASH_ACR_DCEN | STM32_FLASHBITS;
#endif
  while ((FLASH->ACR & FLASH_ACR_LATENCY_Msk) !=
 8008a72:	4a25      	ldr	r2, [pc, #148]	; (8008b08 <__early_init+0x248>)
 8008a74:	6813      	ldr	r3, [r2, #0]
 8008a76:	f003 030f 	and.w	r3, r3, #15
 8008a7a:	2b05      	cmp	r3, #5
 8008a7c:	d1fa      	bne.n	8008a74 <__early_init+0x1b4>
         (STM32_FLASHBITS & FLASH_ACR_LATENCY_Msk)) {
  }

  /* Switching to the configured clock source if it is different from HSI.*/
#if (STM32_SW != STM32_SW_HSI)
  RCC->CFGR |= STM32_SW;        /* Switches on the selected clock source.   */
 8008a7e:	4b0f      	ldr	r3, [pc, #60]	; (8008abc <__early_init+0x1fc>)
 8008a80:	689a      	ldr	r2, [r3, #8]
 8008a82:	f042 0202 	orr.w	r2, r2, #2
 8008a86:	609a      	str	r2, [r3, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 8008a88:	689a      	ldr	r2, [r3, #8]
 8008a8a:	f002 020c 	and.w	r2, r2, #12
 8008a8e:	2a08      	cmp	r2, #8
 8008a90:	d1fa      	bne.n	8008a88 <__early_init+0x1c8>
#endif
#endif /* STM32_NO_INIT */

  /* SYSCFG clock enabled here because it is a multi-functional unit shared
     among multiple drivers.*/
  rccEnableAPB2(RCC_APB2ENR_SYSCFGEN, true);
 8008a92:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008a94:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008a98:	645a      	str	r2, [r3, #68]	; 0x44
 8008a9a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8008a9c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008aa0:	665a      	str	r2, [r3, #100]	; 0x64
 8008aa2:	6e5b      	ldr	r3, [r3, #100]	; 0x64

  stm32_gpio_init();
  stm32_clock_init();
}
 8008aa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((DBGMCU->IDCODE == 0x20006411) && (SCB->CPUID == 0x410FC241))
 8008aa8:	4a18      	ldr	r2, [pc, #96]	; (8008b0c <__early_init+0x24c>)
 8008aaa:	4b19      	ldr	r3, [pc, #100]	; (8008b10 <__early_init+0x250>)
 8008aac:	6812      	ldr	r2, [r2, #0]
 8008aae:	429a      	cmp	r2, r3
 8008ab0:	d1db      	bne.n	8008a6a <__early_init+0x1aa>
    FLASH->ACR = FLASH_ACR_PRFTEN | STM32_FLASHBITS;
 8008ab2:	4b15      	ldr	r3, [pc, #84]	; (8008b08 <__early_init+0x248>)
 8008ab4:	f240 1205 	movw	r2, #261	; 0x105
 8008ab8:	601a      	str	r2, [r3, #0]
 8008aba:	e7da      	b.n	8008a72 <__early_init+0x1b2>
 8008abc:	40023800 	.word	0x40023800
 8008ac0:	40020000 	.word	0x40020000
 8008ac4:	40020400 	.word	0x40020400
 8008ac8:	55560000 	.word	0x55560000
 8008acc:	40020800 	.word	0x40020800
 8008ad0:	40020c00 	.word	0x40020c00
 8008ad4:	00082080 	.word	0x00082080
 8008ad8:	00060600 	.word	0x00060600
 8008adc:	02208001 	.word	0x02208001
 8008ae0:	00555055 	.word	0x00555055
 8008ae4:	40021400 	.word	0x40021400
 8008ae8:	40021800 	.word	0x40021800
 8008aec:	55000100 	.word	0x55000100
 8008af0:	40021c00 	.word	0x40021c00
 8008af4:	07405408 	.word	0x07405408
 8008af8:	40007000 	.word	0x40007000
 8008afc:	38889400 	.word	0x38889400
 8008b00:	e0042000 	.word	0xe0042000
 8008b04:	20006411 	.word	0x20006411
 8008b08:	40023c00 	.word	0x40023c00
 8008b0c:	e000ed00 	.word	0xe000ed00
 8008b10:	410fc241 	.word	0x410fc241
 8008b14:	40021000 	.word	0x40021000
 8008b18:	40010054 	.word	0x40010054
 8008b1c:	000aaa00 	.word	0x000aaa00
 8008b20:	2aa0aa00 	.word	0x2aa0aa00
 8008b24:	55514515 	.word	0x55514515
	...

08008b30 <VectorD8>:
OSAL_IRQ_HANDLER(STM32_USART2_HANDLER) {
 8008b30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  USART_TypeDef *u = sdp->usart;
 8008b34:	4c62      	ldr	r4, [pc, #392]	; (8008cc0 <VectorD8+0x190>)
 8008b36:	6f66      	ldr	r6, [r4, #116]	; 0x74
  uint16_t cr1 = u->CR1;
 8008b38:	f8d6 800c 	ldr.w	r8, [r6, #12]
  uint16_t sr = u->SR;
 8008b3c:	6833      	ldr	r3, [r6, #0]
  if (sr & USART_SR_LBD) {
 8008b3e:	05da      	lsls	r2, r3, #23
  uint16_t sr = u->SR;
 8008b40:	b29d      	uxth	r5, r3
  if (sr & USART_SR_LBD) {
 8008b42:	d476      	bmi.n	8008c32 <VectorD8+0x102>
 8008b44:	2320      	movs	r3, #32
 8008b46:	f383 8811 	msr	BASEPRI, r3
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 8008b4a:	f015 0f2f 	tst.w	r5, #47	; 0x2f
 8008b4e:	d044      	beq.n	8008bda <VectorD8+0xaa>
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
 8008b50:	4f5c      	ldr	r7, [pc, #368]	; (8008cc4 <VectorD8+0x194>)
  chThdDequeueNextI(tqp, msg);
 8008b52:	f107 0908 	add.w	r9, r7, #8
 8008b56:	e008      	b.n	8008b6a <VectorD8+0x3a>
    if (sr & USART_SR_RXNE)
 8008b58:	06a8      	lsls	r0, r5, #26
    b = (uint8_t)u->DR & sdp->rxmask;
 8008b5a:	f8d6 a004 	ldr.w	sl, [r6, #4]
    if (sr & USART_SR_RXNE)
 8008b5e:	d41e      	bmi.n	8008b9e <VectorD8+0x6e>
    sr = u->SR;
 8008b60:	6833      	ldr	r3, [r6, #0]
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 8008b62:	f013 0f2f 	tst.w	r3, #47	; 0x2f
    sr = u->SR;
 8008b66:	b29d      	uxth	r5, r3
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 8008b68:	d037      	beq.n	8008bda <VectorD8+0xaa>
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
 8008b6a:	072b      	lsls	r3, r5, #28
 8008b6c:	d0f4      	beq.n	8008b58 <VectorD8+0x28>
    sts |= SD_OVERRUN_ERROR;
 8008b6e:	f015 0f08 	tst.w	r5, #8
 8008b72:	bf0c      	ite	eq
 8008b74:	2100      	moveq	r1, #0
 8008b76:	2180      	movne	r1, #128	; 0x80
  if (sr & USART_SR_PE)
 8008b78:	07e8      	lsls	r0, r5, #31
    sts |= SD_PARITY_ERROR;
 8008b7a:	bf48      	it	mi
 8008b7c:	f041 0120 	orrmi.w	r1, r1, #32
  if (sr & USART_SR_FE)
 8008b80:	07aa      	lsls	r2, r5, #30
    sts |= SD_FRAMING_ERROR;
 8008b82:	bf48      	it	mi
 8008b84:	f041 0140 	orrmi.w	r1, r1, #64	; 0x40
  if (sr & USART_SR_NE)
 8008b88:	076b      	lsls	r3, r5, #29
    sts |= SD_NOISE_ERROR;
 8008b8a:	bf48      	it	mi
 8008b8c:	f441 7180 	orrmi.w	r1, r1, #256	; 0x100
  chEvtBroadcastFlagsI(esp, flags);
 8008b90:	4638      	mov	r0, r7
 8008b92:	f7f8 fc1d 	bl	80013d0 <chEvtBroadcastFlagsI>
    if (sr & USART_SR_RXNE)
 8008b96:	06a8      	lsls	r0, r5, #26
    b = (uint8_t)u->DR & sdp->rxmask;
 8008b98:	f8d6 a004 	ldr.w	sl, [r6, #4]
    if (sr & USART_SR_RXNE)
 8008b9c:	d5e0      	bpl.n	8008b60 <VectorD8+0x30>
void sdIncomingDataI(SerialDriver *sdp, uint8_t b) {

  osalDbgCheckClassI();
  osalDbgCheck(sdp != NULL);

  if (iqIsEmptyI(&sdp->iqueue))
 8008b9e:	6963      	ldr	r3, [r4, #20]
    b = (uint8_t)u->DR & sdp->rxmask;
 8008ba0:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
 8008ba4:	b3a3      	cbz	r3, 8008c10 <VectorD8+0xe0>
  if (!iqIsFullI(iqp)) {
 8008ba6:	e9d4 3208 	ldrd	r3, r2, [r4, #32]
 8008baa:	4293      	cmp	r3, r2
 8008bac:	d038      	beq.n	8008c20 <VectorD8+0xf0>
    iqp->q_counter++;
 8008bae:	6962      	ldr	r2, [r4, #20]
    *iqp->q_wrptr++ = b;
 8008bb0:	1c59      	adds	r1, r3, #1
    iqp->q_counter++;
 8008bb2:	3201      	adds	r2, #1
 8008bb4:	ea05 050a 	and.w	r5, r5, sl
 8008bb8:	6162      	str	r2, [r4, #20]
    *iqp->q_wrptr++ = b;
 8008bba:	6221      	str	r1, [r4, #32]
 8008bbc:	701d      	strb	r5, [r3, #0]
    if (iqp->q_wrptr >= iqp->q_top) {
 8008bbe:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 8008bc2:	429a      	cmp	r2, r3
 8008bc4:	d301      	bcc.n	8008bca <VectorD8+0x9a>
      iqp->q_wrptr = iqp->q_buffer;
 8008bc6:	69a3      	ldr	r3, [r4, #24]
 8008bc8:	6223      	str	r3, [r4, #32]
  chThdDequeueNextI(tqp, msg);
 8008bca:	4648      	mov	r0, r9
 8008bcc:	f7f8 fb38 	bl	8001240 <chThdDequeueNextI.constprop.0>
    sr = u->SR;
 8008bd0:	6833      	ldr	r3, [r6, #0]
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 8008bd2:	f013 0f2f 	tst.w	r3, #47	; 0x2f
    sr = u->SR;
 8008bd6:	b29d      	uxth	r5, r3
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 8008bd8:	d1c7      	bne.n	8008b6a <VectorD8+0x3a>
 8008bda:	2300      	movs	r3, #0
 8008bdc:	f383 8811 	msr	BASEPRI, r3
  if ((cr1 & USART_CR1_TXEIE) && (sr & USART_SR_TXE)) {
 8008be0:	f018 0f80 	tst.w	r8, #128	; 0x80
 8008be4:	d001      	beq.n	8008bea <VectorD8+0xba>
 8008be6:	062a      	lsls	r2, r5, #24
 8008be8:	d432      	bmi.n	8008c50 <VectorD8+0x120>
  if ((cr1 & USART_CR1_TCIE) && (sr & USART_SR_TC)) {
 8008bea:	f018 0f40 	tst.w	r8, #64	; 0x40
 8008bee:	d00b      	beq.n	8008c08 <VectorD8+0xd8>
 8008bf0:	066b      	lsls	r3, r5, #25
 8008bf2:	d509      	bpl.n	8008c08 <VectorD8+0xd8>
 8008bf4:	2320      	movs	r3, #32
 8008bf6:	f383 8811 	msr	BASEPRI, r3
    if (oqIsEmptyI(&sdp->oqueue)) {
 8008bfa:	e9d4 2311 	ldrd	r2, r3, [r4, #68]	; 0x44
 8008bfe:	429a      	cmp	r2, r3
 8008c00:	d043      	beq.n	8008c8a <VectorD8+0x15a>
 8008c02:	2300      	movs	r3, #0
 8008c04:	f383 8811 	msr	BASEPRI, r3
}
 8008c08:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  OSAL_IRQ_EPILOGUE();
 8008c0c:	f7f8 b8d0 	b.w	8000db0 <_port_irq_epilogue>
  chEvtBroadcastFlagsI(esp, flags);
 8008c10:	2104      	movs	r1, #4
 8008c12:	4638      	mov	r0, r7
 8008c14:	f7f8 fbdc 	bl	80013d0 <chEvtBroadcastFlagsI>
  if (!iqIsFullI(iqp)) {
 8008c18:	e9d4 3208 	ldrd	r3, r2, [r4, #32]
 8008c1c:	4293      	cmp	r3, r2
 8008c1e:	d1c6      	bne.n	8008bae <VectorD8+0x7e>
 8008c20:	6962      	ldr	r2, [r4, #20]
 8008c22:	2a00      	cmp	r2, #0
 8008c24:	d0c3      	beq.n	8008bae <VectorD8+0x7e>
 8008c26:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8008c2a:	4638      	mov	r0, r7
 8008c2c:	f7f8 fbd0 	bl	80013d0 <chEvtBroadcastFlagsI>
 8008c30:	e796      	b.n	8008b60 <VectorD8+0x30>
 8008c32:	2320      	movs	r3, #32
 8008c34:	f383 8811 	msr	BASEPRI, r3
 8008c38:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008c3c:	1d20      	adds	r0, r4, #4
 8008c3e:	f7f8 fbc7 	bl	80013d0 <chEvtBroadcastFlagsI>
    u->SR = ~USART_SR_LBD;
 8008c42:	f46f 7380 	mvn.w	r3, #256	; 0x100
 8008c46:	6033      	str	r3, [r6, #0]
 8008c48:	2300      	movs	r3, #0
 8008c4a:	f383 8811 	msr	BASEPRI, r3
 8008c4e:	e779      	b.n	8008b44 <VectorD8+0x14>
 8008c50:	2320      	movs	r3, #32
 8008c52:	f383 8811 	msr	BASEPRI, r3
  if (!oqIsEmptyI(oqp)) {
 8008c56:	e9d4 2311 	ldrd	r2, r3, [r4, #68]	; 0x44
 8008c5a:	429a      	cmp	r2, r3
 8008c5c:	d022      	beq.n	8008ca4 <VectorD8+0x174>
    oqp->q_counter++;
 8008c5e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    if (oqp->q_rdptr >= oqp->q_top) {
 8008c60:	6c21      	ldr	r1, [r4, #64]	; 0x40
    b = *oqp->q_rdptr++;
 8008c62:	1c58      	adds	r0, r3, #1
    oqp->q_counter++;
 8008c64:	3201      	adds	r2, #1
 8008c66:	63a2      	str	r2, [r4, #56]	; 0x38
    b = *oqp->q_rdptr++;
 8008c68:	64a0      	str	r0, [r4, #72]	; 0x48
    if (oqp->q_rdptr >= oqp->q_top) {
 8008c6a:	4288      	cmp	r0, r1
    b = *oqp->q_rdptr++;
 8008c6c:	781f      	ldrb	r7, [r3, #0]
    if (oqp->q_rdptr >= oqp->q_top) {
 8008c6e:	d301      	bcc.n	8008c74 <VectorD8+0x144>
      oqp->q_rdptr = oqp->q_buffer;
 8008c70:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008c72:	64a3      	str	r3, [r4, #72]	; 0x48
  chThdDequeueNextI(tqp, msg);
 8008c74:	4814      	ldr	r0, [pc, #80]	; (8008cc8 <VectorD8+0x198>)
 8008c76:	f7f8 fae3 	bl	8001240 <chThdDequeueNextI.constprop.0>
      u->DR = b;
 8008c7a:	6077      	str	r7, [r6, #4]
 8008c7c:	2300      	movs	r3, #0
 8008c7e:	f383 8811 	msr	BASEPRI, r3
  if ((cr1 & USART_CR1_TCIE) && (sr & USART_SR_TC)) {
 8008c82:	f018 0f40 	tst.w	r8, #64	; 0x40
 8008c86:	d0bf      	beq.n	8008c08 <VectorD8+0xd8>
 8008c88:	e7b2      	b.n	8008bf0 <VectorD8+0xc0>
    if (oqIsEmptyI(&sdp->oqueue)) {
 8008c8a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d0b8      	beq.n	8008c02 <VectorD8+0xd2>
  chEvtBroadcastFlagsI(esp, flags);
 8008c90:	480c      	ldr	r0, [pc, #48]	; (8008cc4 <VectorD8+0x194>)
 8008c92:	2110      	movs	r1, #16
 8008c94:	f7f8 fb9c 	bl	80013d0 <chEvtBroadcastFlagsI>
      u->CR1 = cr1 & ~USART_CR1_TCIE;
 8008c98:	f64f 73bf 	movw	r3, #65471	; 0xffbf
 8008c9c:	ea08 0303 	and.w	r3, r8, r3
 8008ca0:	60f3      	str	r3, [r6, #12]
 8008ca2:	e7ae      	b.n	8008c02 <VectorD8+0xd2>
  if (!oqIsEmptyI(oqp)) {
 8008ca4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8008ca6:	2a00      	cmp	r2, #0
 8008ca8:	d0d9      	beq.n	8008c5e <VectorD8+0x12e>
 8008caa:	4806      	ldr	r0, [pc, #24]	; (8008cc4 <VectorD8+0x194>)
 8008cac:	2108      	movs	r1, #8
 8008cae:	f7f8 fb8f 	bl	80013d0 <chEvtBroadcastFlagsI>
      u->CR1 = cr1 & ~USART_CR1_TXEIE;
 8008cb2:	f64f 737f 	movw	r3, #65407	; 0xff7f
 8008cb6:	ea08 0303 	and.w	r3, r8, r3
 8008cba:	60f3      	str	r3, [r6, #12]
 8008cbc:	e7de      	b.n	8008c7c <VectorD8+0x14c>
 8008cbe:	bf00      	nop
 8008cc0:	200008e0 	.word	0x200008e0
 8008cc4:	200008e4 	.word	0x200008e4
 8008cc8:	20000910 	.word	0x20000910
 8008ccc:	00000000 	.word	0x00000000

08008cd0 <VectorB0>:
void st_lld_serve_interrupt(void) {
#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  uint32_t sr;
  stm32_tim_t *timp = STM32_ST_TIM;

  sr  = timp->SR;
 8008cd0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
OSAL_IRQ_HANDLER(ST_HANDLER) {
 8008cd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  sr  = timp->SR;
 8008cd8:	6903      	ldr	r3, [r0, #16]
  sr &= timp->DIER & STM32_TIM_DIER_IRQ_MASK;
 8008cda:	68c2      	ldr	r2, [r0, #12]
 8008cdc:	4013      	ands	r3, r2
 8008cde:	b2da      	uxtb	r2, r3
  timp->SR = ~sr;
 8008ce0:	43d2      	mvns	r2, r2

  if ((sr & TIM_SR_CC1IF) != 0U)
 8008ce2:	079b      	lsls	r3, r3, #30
  timp->SR = ~sr;
 8008ce4:	6102      	str	r2, [r0, #16]
  if ((sr & TIM_SR_CC1IF) != 0U)
 8008ce6:	d403      	bmi.n	8008cf0 <VectorB0+0x20>
}
 8008ce8:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  OSAL_IRQ_EPILOGUE();
 8008cec:	f7f8 b860 	b.w	8000db0 <_port_irq_epilogue>
 8008cf0:	2320      	movs	r3, #32
 8008cf2:	f383 8811 	msr	BASEPRI, r3
  virtual_timer_t *vtp;
  systime_t now;
  sysinterval_t delta, nowdelta;

  /* Looping through timers.*/
  vtp = ch.vtlist.next;
 8008cf6:	4d23      	ldr	r5, [pc, #140]	; (8008d84 <VectorB0+0xb4>)
 8008cf8:	6a47      	ldr	r7, [r0, #36]	; 0x24
 8008cfa:	69eb      	ldr	r3, [r5, #28]
  while (true) {

    /* Getting the system time as reference.*/
    now = chVTGetSystemTimeX();
    nowdelta = chTimeDiffX(ch.vtlist.lasttime, now);
 8008cfc:	6aaa      	ldr	r2, [r5, #40]	; 0x28

    /* The list scan is limited by the timers header having
       "ch.vtlist.vt_delta == (sysinterval_t)-1" which is
       greater than all deltas.*/
    if (nowdelta < vtp->delta) {
 8008cfe:	6899      	ldr	r1, [r3, #8]
  return (sysinterval_t)((systime_t)(end - start));
 8008d00:	1abe      	subs	r6, r7, r2
 8008d02:	42b1      	cmp	r1, r6
 8008d04:	bf88      	it	hi
 8008d06:	f105 091c 	addhi.w	r9, r5, #28
 8008d0a:	d825      	bhi.n	8008d58 <VectorB0+0x88>
  STM32_ST_TIM->DIER = 0U;
 8008d0c:	4604      	mov	r4, r0
 8008d0e:	f105 091c 	add.w	r9, r5, #28
      nowdelta -= vtp->delta;

      vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
      ch.vtlist.next = vtp->next;
      fn = vtp->func;
      vtp->func = NULL;
 8008d12:	f04f 0800 	mov.w	r8, #0
 8008d16:	2720      	movs	r7, #32
 8008d18:	e000      	b.n	8008d1c <VectorB0+0x4c>
 8008d1a:	6aaa      	ldr	r2, [r5, #40]	; 0x28
      vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
 8008d1c:	6818      	ldr	r0, [r3, #0]
      ch.vtlist.lasttime += vtp->delta;
 8008d1e:	440a      	add	r2, r1

      /* If the list becomes empty then the timer is stopped.*/
      if (ch.vtlist.next == (virtual_timer_t *)&ch.vtlist) {
 8008d20:	4548      	cmp	r0, r9
      ch.vtlist.lasttime += vtp->delta;
 8008d22:	62aa      	str	r2, [r5, #40]	; 0x28
      nowdelta -= vtp->delta;
 8008d24:	eba6 0601 	sub.w	r6, r6, r1
      fn = vtp->func;
 8008d28:	68da      	ldr	r2, [r3, #12]
      vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
 8008d2a:	f8c0 9004 	str.w	r9, [r0, #4]
      ch.vtlist.next = vtp->next;
 8008d2e:	61e8      	str	r0, [r5, #28]
      vtp->func = NULL;
 8008d30:	f8c3 800c 	str.w	r8, [r3, #12]
 8008d34:	bf08      	it	eq
 8008d36:	f8c4 800c 	streq.w	r8, [r4, #12]
 8008d3a:	f388 8811 	msr	BASEPRI, r8
        port_timer_stop_alarm();
      }

      /* The callback is invoked outside the kernel critical zone.*/
      chSysUnlockFromISR();
      fn(vtp->par);
 8008d3e:	6918      	ldr	r0, [r3, #16]
 8008d40:	4790      	blx	r2
 8008d42:	f387 8811 	msr	BASEPRI, r7
      chSysLockFromISR();

      /* Next element in the list.*/
      vtp = ch.vtlist.next;
 8008d46:	69eb      	ldr	r3, [r5, #28]
    }
    while (vtp->delta <= nowdelta);
 8008d48:	6899      	ldr	r1, [r3, #8]
 8008d4a:	428e      	cmp	r6, r1
 8008d4c:	d2e5      	bcs.n	8008d1a <VectorB0+0x4a>
  return (systime_t)STM32_ST_TIM->CNT;
 8008d4e:	6a67      	ldr	r7, [r4, #36]	; 0x24
    nowdelta = chTimeDiffX(ch.vtlist.lasttime, now);
 8008d50:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8008d52:	1abe      	subs	r6, r7, r2
    if (nowdelta < vtp->delta) {
 8008d54:	428e      	cmp	r6, r1
 8008d56:	d2de      	bcs.n	8008d16 <VectorB0+0x46>
  }

  /* If the list is empty, nothing else to do.*/
  if (ch.vtlist.next == (virtual_timer_t *)&ch.vtlist) {
 8008d58:	454b      	cmp	r3, r9
 8008d5a:	d00b      	beq.n	8008d74 <VectorB0+0xa4>
  }

  /* The "unprocessed nowdelta" time slice is added to "last time"
     and subtracted to next timer's delta.*/
  ch.vtlist.lasttime += nowdelta;
  ch.vtlist.next->delta -= nowdelta;
 8008d5c:	6899      	ldr	r1, [r3, #8]
  ch.vtlist.lasttime += nowdelta;
 8008d5e:	62af      	str	r7, [r5, #40]	; 0x28
  ch.vtlist.next->delta -= nowdelta;
 8008d60:	1bc9      	subs	r1, r1, r7
 8008d62:	440a      	add	r2, r1
  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 8008d64:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  return systime + (systime_t)interval;
 8008d68:	2a02      	cmp	r2, #2
 8008d6a:	bf2c      	ite	cs
 8008d6c:	18bf      	addcs	r7, r7, r2
 8008d6e:	3702      	addcc	r7, #2
 8008d70:	609a      	str	r2, [r3, #8]
 8008d72:	634f      	str	r7, [r1, #52]	; 0x34
 8008d74:	2300      	movs	r3, #0
 8008d76:	f383 8811 	msr	BASEPRI, r3
}
 8008d7a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  OSAL_IRQ_EPILOGUE();
 8008d7e:	f7f8 b817 	b.w	8000db0 <_port_irq_epilogue>
 8008d82:	bf00      	nop
 8008d84:	200009b0 	.word	0x200009b0
	...

08008d90 <__init_ram_areas>:
}

/**
 * @brief   Performs the initialization of the various RAM areas.
 */
void __init_ram_areas(void) {
 8008d90:	b4f0      	push	{r4, r5, r6, r7}
 8008d92:	4f14      	ldr	r7, [pc, #80]	; (8008de4 <__init_ram_areas+0x54>)
 8008d94:	4d14      	ldr	r5, [pc, #80]	; (8008de8 <__init_ram_areas+0x58>)
 8008d96:	4815      	ldr	r0, [pc, #84]	; (8008dec <__init_ram_areas+0x5c>)
 8008d98:	4b15      	ldr	r3, [pc, #84]	; (8008df0 <__init_ram_areas+0x60>)
 8008d9a:	4916      	ldr	r1, [pc, #88]	; (8008df4 <__init_ram_areas+0x64>)
 8008d9c:	f107 0c70 	add.w	ip, r7, #112	; 0x70
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
      *p = 0;
 8008da0:	2600      	movs	r6, #0
    while (p < rap->clear_area) {
 8008da2:	4298      	cmp	r0, r3
 8008da4:	d911      	bls.n	8008dca <__init_ram_areas+0x3a>
 8008da6:	3904      	subs	r1, #4
 8008da8:	461a      	mov	r2, r3
      *p = *tp;
 8008daa:	f851 4f04 	ldr.w	r4, [r1, #4]!
 8008dae:	f842 4b04 	str.w	r4, [r2], #4
    while (p < rap->clear_area) {
 8008db2:	4290      	cmp	r0, r2
 8008db4:	d8f9      	bhi.n	8008daa <__init_ram_areas+0x1a>
 8008db6:	1e42      	subs	r2, r0, #1
 8008db8:	1ad2      	subs	r2, r2, r3
 8008dba:	f022 0203 	bic.w	r2, r2, #3
 8008dbe:	3204      	adds	r2, #4
 8008dc0:	4413      	add	r3, r2
    while (p < rap->no_init_area) {
 8008dc2:	429d      	cmp	r5, r3
 8008dc4:	d903      	bls.n	8008dce <__init_ram_areas+0x3e>
      *p = 0;
 8008dc6:	f843 6b04 	str.w	r6, [r3], #4
    while (p < rap->no_init_area) {
 8008dca:	429d      	cmp	r5, r3
 8008dcc:	d8fb      	bhi.n	8008dc6 <__init_ram_areas+0x36>
      p++;
    }
    rap++;
  }
  while (rap < &ram_areas[CRT1_AREAS_NUMBER]);
 8008dce:	4567      	cmp	r7, ip
 8008dd0:	d005      	beq.n	8008dde <__init_ram_areas+0x4e>
 8008dd2:	e9d7 1304 	ldrd	r1, r3, [r7, #16]
 8008dd6:	e9d7 0506 	ldrd	r0, r5, [r7, #24]
 8008dda:	3710      	adds	r7, #16
 8008ddc:	e7e1      	b.n	8008da2 <__init_ram_areas+0x12>
#endif
}
 8008dde:	bcf0      	pop	{r4, r5, r6, r7}
 8008de0:	4770      	bx	lr
 8008de2:	bf00      	nop
 8008de4:	0800b164 	.word	0x0800b164
 8008de8:	20001ce0 	.word	0x20001ce0
 8008dec:	20001ce0 	.word	0x20001ce0
 8008df0:	20001ce0 	.word	0x20001ce0
 8008df4:	0800b764 	.word	0x0800b764
	...

08008e00 <__default_exit>:
  while (true) {
 8008e00:	e7fe      	b.n	8008e00 <__default_exit>
 8008e02:	bf00      	nop
	...

08008e10 <__late_init>:
 8008e10:	4770      	bx	lr
 8008e12:	bf00      	nop
	...

08008e20 <__core_init>:
}
 8008e20:	4770      	bx	lr
 8008e22:	bf00      	nop

08008e24 <memcmp>:
 8008e24:	2a03      	cmp	r2, #3
 8008e26:	b470      	push	{r4, r5, r6}
 8008e28:	d912      	bls.n	8008e50 <memcmp+0x2c>
 8008e2a:	ea40 0501 	orr.w	r5, r0, r1
 8008e2e:	07ad      	lsls	r5, r5, #30
 8008e30:	4604      	mov	r4, r0
 8008e32:	460b      	mov	r3, r1
 8008e34:	d11e      	bne.n	8008e74 <memcmp+0x50>
 8008e36:	4619      	mov	r1, r3
 8008e38:	4620      	mov	r0, r4
 8008e3a:	f853 5b04 	ldr.w	r5, [r3], #4
 8008e3e:	f854 6b04 	ldr.w	r6, [r4], #4
 8008e42:	42ae      	cmp	r6, r5
 8008e44:	d116      	bne.n	8008e74 <memcmp+0x50>
 8008e46:	3a04      	subs	r2, #4
 8008e48:	2a03      	cmp	r2, #3
 8008e4a:	4620      	mov	r0, r4
 8008e4c:	4619      	mov	r1, r3
 8008e4e:	d8f2      	bhi.n	8008e36 <memcmp+0x12>
 8008e50:	1e56      	subs	r6, r2, #1
 8008e52:	b1a2      	cbz	r2, 8008e7e <memcmp+0x5a>
 8008e54:	3901      	subs	r1, #1
 8008e56:	1e44      	subs	r4, r0, #1
 8008e58:	e001      	b.n	8008e5e <memcmp+0x3a>
 8008e5a:	18c3      	adds	r3, r0, r3
 8008e5c:	d00c      	beq.n	8008e78 <memcmp+0x54>
 8008e5e:	f814 5f01 	ldrb.w	r5, [r4, #1]!
 8008e62:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8008e66:	4295      	cmp	r5, r2
 8008e68:	eba6 0304 	sub.w	r3, r6, r4
 8008e6c:	d0f5      	beq.n	8008e5a <memcmp+0x36>
 8008e6e:	1aa8      	subs	r0, r5, r2
 8008e70:	bc70      	pop	{r4, r5, r6}
 8008e72:	4770      	bx	lr
 8008e74:	1e56      	subs	r6, r2, #1
 8008e76:	e7ed      	b.n	8008e54 <memcmp+0x30>
 8008e78:	4618      	mov	r0, r3
 8008e7a:	bc70      	pop	{r4, r5, r6}
 8008e7c:	4770      	bx	lr
 8008e7e:	4610      	mov	r0, r2
 8008e80:	e7f6      	b.n	8008e70 <memcmp+0x4c>
 8008e82:	bf00      	nop

08008e84 <memset>:
 8008e84:	b4f0      	push	{r4, r5, r6, r7}
 8008e86:	0786      	lsls	r6, r0, #30
 8008e88:	d046      	beq.n	8008f18 <memset+0x94>
 8008e8a:	1e54      	subs	r4, r2, #1
 8008e8c:	2a00      	cmp	r2, #0
 8008e8e:	d03c      	beq.n	8008f0a <memset+0x86>
 8008e90:	b2ca      	uxtb	r2, r1
 8008e92:	4603      	mov	r3, r0
 8008e94:	e001      	b.n	8008e9a <memset+0x16>
 8008e96:	3c01      	subs	r4, #1
 8008e98:	d337      	bcc.n	8008f0a <memset+0x86>
 8008e9a:	f803 2b01 	strb.w	r2, [r3], #1
 8008e9e:	079d      	lsls	r5, r3, #30
 8008ea0:	d1f9      	bne.n	8008e96 <memset+0x12>
 8008ea2:	2c03      	cmp	r4, #3
 8008ea4:	d92a      	bls.n	8008efc <memset+0x78>
 8008ea6:	b2cd      	uxtb	r5, r1
 8008ea8:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 8008eac:	2c0f      	cmp	r4, #15
 8008eae:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8008eb2:	d934      	bls.n	8008f1e <memset+0x9a>
 8008eb4:	f1a4 0210 	sub.w	r2, r4, #16
 8008eb8:	f022 0c0f 	bic.w	ip, r2, #15
 8008ebc:	f103 0720 	add.w	r7, r3, #32
 8008ec0:	0916      	lsrs	r6, r2, #4
 8008ec2:	4467      	add	r7, ip
 8008ec4:	f103 0210 	add.w	r2, r3, #16
 8008ec8:	e942 5504 	strd	r5, r5, [r2, #-16]
 8008ecc:	e942 5502 	strd	r5, r5, [r2, #-8]
 8008ed0:	3210      	adds	r2, #16
 8008ed2:	42ba      	cmp	r2, r7
 8008ed4:	d1f8      	bne.n	8008ec8 <memset+0x44>
 8008ed6:	1c72      	adds	r2, r6, #1
 8008ed8:	f014 0f0c 	tst.w	r4, #12
 8008edc:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 8008ee0:	f004 060f 	and.w	r6, r4, #15
 8008ee4:	d013      	beq.n	8008f0e <memset+0x8a>
 8008ee6:	1f33      	subs	r3, r6, #4
 8008ee8:	f023 0303 	bic.w	r3, r3, #3
 8008eec:	3304      	adds	r3, #4
 8008eee:	4413      	add	r3, r2
 8008ef0:	f842 5b04 	str.w	r5, [r2], #4
 8008ef4:	4293      	cmp	r3, r2
 8008ef6:	d1fb      	bne.n	8008ef0 <memset+0x6c>
 8008ef8:	f006 0403 	and.w	r4, r6, #3
 8008efc:	b12c      	cbz	r4, 8008f0a <memset+0x86>
 8008efe:	b2ca      	uxtb	r2, r1
 8008f00:	441c      	add	r4, r3
 8008f02:	f803 2b01 	strb.w	r2, [r3], #1
 8008f06:	429c      	cmp	r4, r3
 8008f08:	d1fb      	bne.n	8008f02 <memset+0x7e>
 8008f0a:	bcf0      	pop	{r4, r5, r6, r7}
 8008f0c:	4770      	bx	lr
 8008f0e:	4634      	mov	r4, r6
 8008f10:	4613      	mov	r3, r2
 8008f12:	2c00      	cmp	r4, #0
 8008f14:	d1f3      	bne.n	8008efe <memset+0x7a>
 8008f16:	e7f8      	b.n	8008f0a <memset+0x86>
 8008f18:	4614      	mov	r4, r2
 8008f1a:	4603      	mov	r3, r0
 8008f1c:	e7c1      	b.n	8008ea2 <memset+0x1e>
 8008f1e:	461a      	mov	r2, r3
 8008f20:	4626      	mov	r6, r4
 8008f22:	e7e0      	b.n	8008ee6 <memset+0x62>

08008f24 <strncmp>:
 8008f24:	b39a      	cbz	r2, 8008f8e <strncmp+0x6a>
 8008f26:	b4f0      	push	{r4, r5, r6, r7}
 8008f28:	ea40 0501 	orr.w	r5, r0, r1
 8008f2c:	07ad      	lsls	r5, r5, #30
 8008f2e:	4604      	mov	r4, r0
 8008f30:	4603      	mov	r3, r0
 8008f32:	4608      	mov	r0, r1
 8008f34:	d028      	beq.n	8008f88 <strncmp+0x64>
 8008f36:	7820      	ldrb	r0, [r4, #0]
 8008f38:	780e      	ldrb	r6, [r1, #0]
 8008f3a:	4286      	cmp	r6, r0
 8008f3c:	d129      	bne.n	8008f92 <strncmp+0x6e>
 8008f3e:	2a01      	cmp	r2, #1
 8008f40:	d02a      	beq.n	8008f98 <strncmp+0x74>
 8008f42:	4625      	mov	r5, r4
 8008f44:	b150      	cbz	r0, 8008f5c <strncmp+0x38>
 8008f46:	f815 0f01 	ldrb.w	r0, [r5, #1]!
 8008f4a:	f811 6f01 	ldrb.w	r6, [r1, #1]!
 8008f4e:	43eb      	mvns	r3, r5
 8008f50:	42b0      	cmp	r0, r6
 8008f52:	4413      	add	r3, r2
 8008f54:	d11d      	bne.n	8008f92 <strncmp+0x6e>
 8008f56:	18e3      	adds	r3, r4, r3
 8008f58:	d1f4      	bne.n	8008f44 <strncmp+0x20>
 8008f5a:	4618      	mov	r0, r3
 8008f5c:	bcf0      	pop	{r4, r5, r6, r7}
 8008f5e:	4770      	bx	lr
 8008f60:	6807      	ldr	r7, [r0, #0]
 8008f62:	461c      	mov	r4, r3
 8008f64:	f853 5b04 	ldr.w	r5, [r3], #4
 8008f68:	f1a5 3601 	sub.w	r6, r5, #16843009	; 0x1010101
 8008f6c:	42bd      	cmp	r5, r7
 8008f6e:	4601      	mov	r1, r0
 8008f70:	ea26 0605 	bic.w	r6, r6, r5
 8008f74:	f100 0004 	add.w	r0, r0, #4
 8008f78:	d1dd      	bne.n	8008f36 <strncmp+0x12>
 8008f7a:	3a04      	subs	r2, #4
 8008f7c:	461c      	mov	r4, r3
 8008f7e:	4601      	mov	r1, r0
 8008f80:	d00a      	beq.n	8008f98 <strncmp+0x74>
 8008f82:	f016 3f80 	tst.w	r6, #2155905152	; 0x80808080
 8008f86:	d107      	bne.n	8008f98 <strncmp+0x74>
 8008f88:	2a03      	cmp	r2, #3
 8008f8a:	d8e9      	bhi.n	8008f60 <strncmp+0x3c>
 8008f8c:	e7d3      	b.n	8008f36 <strncmp+0x12>
 8008f8e:	4610      	mov	r0, r2
 8008f90:	4770      	bx	lr
 8008f92:	1b80      	subs	r0, r0, r6
 8008f94:	bcf0      	pop	{r4, r5, r6, r7}
 8008f96:	4770      	bx	lr
 8008f98:	2000      	movs	r0, #0
 8008f9a:	bcf0      	pop	{r4, r5, r6, r7}
 8008f9c:	4770      	bx	lr
 8008f9e:	bf00      	nop

08008fa0 <strncpy>:
 8008fa0:	b470      	push	{r4, r5, r6}
 8008fa2:	ea40 0401 	orr.w	r4, r0, r1
 8008fa6:	07a3      	lsls	r3, r4, #30
 8008fa8:	d101      	bne.n	8008fae <strncpy+0xe>
 8008faa:	2a03      	cmp	r2, #3
 8008fac:	d80f      	bhi.n	8008fce <strncpy+0x2e>
 8008fae:	4604      	mov	r4, r0
 8008fb0:	1e4d      	subs	r5, r1, #1
 8008fb2:	e007      	b.n	8008fc4 <strncpy+0x24>
 8008fb4:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8008fb8:	f803 1b01 	strb.w	r1, [r3], #1
 8008fbc:	1e56      	subs	r6, r2, #1
 8008fbe:	b1c9      	cbz	r1, 8008ff4 <strncpy+0x54>
 8008fc0:	461c      	mov	r4, r3
 8008fc2:	4632      	mov	r2, r6
 8008fc4:	4623      	mov	r3, r4
 8008fc6:	2a00      	cmp	r2, #0
 8008fc8:	d1f4      	bne.n	8008fb4 <strncpy+0x14>
 8008fca:	bc70      	pop	{r4, r5, r6}
 8008fcc:	4770      	bx	lr
 8008fce:	460b      	mov	r3, r1
 8008fd0:	4604      	mov	r4, r0
 8008fd2:	4619      	mov	r1, r3
 8008fd4:	f853 6b04 	ldr.w	r6, [r3], #4
 8008fd8:	f1a6 3501 	sub.w	r5, r6, #16843009	; 0x1010101
 8008fdc:	ea25 0506 	bic.w	r5, r5, r6
 8008fe0:	f015 3f80 	tst.w	r5, #2155905152	; 0x80808080
 8008fe4:	d1e4      	bne.n	8008fb0 <strncpy+0x10>
 8008fe6:	3a04      	subs	r2, #4
 8008fe8:	2a03      	cmp	r2, #3
 8008fea:	f844 6b04 	str.w	r6, [r4], #4
 8008fee:	4619      	mov	r1, r3
 8008ff0:	d8ef      	bhi.n	8008fd2 <strncpy+0x32>
 8008ff2:	e7dd      	b.n	8008fb0 <strncpy+0x10>
 8008ff4:	4422      	add	r2, r4
 8008ff6:	2e00      	cmp	r6, #0
 8008ff8:	d0e7      	beq.n	8008fca <strncpy+0x2a>
 8008ffa:	f803 1b01 	strb.w	r1, [r3], #1
 8008ffe:	4293      	cmp	r3, r2
 8009000:	d1fb      	bne.n	8008ffa <strncpy+0x5a>
 8009002:	bc70      	pop	{r4, r5, r6}
 8009004:	4770      	bx	lr
 8009006:	bf00      	nop
